<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BuildMasterCore</name>
    </assembly>
    <members>
        <member name="T:Inedo.BuildMaster.Artifacts.ArtifactBuilder">
            <summary>
            Allows creation of a BuildMaster artifact.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Artifacts.ArtifactBuilder.#ctor(Inedo.BuildMaster.Artifacts.ArtifactIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Artifacts.ArtifactBuilder"/> class.
            </summary>
            <param name="artifact">The artifact to create.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="artifact"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Artifacts.ArtifactBuilder.#ctor(Inedo.BuildMaster.Artifacts.ArtifactIdentifier,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Artifacts.ArtifactBuilder"/> class.
            </summary>
            <param name="artifact">The artifact to create.</param>
            <param name="executionId">The ID of the associated execution.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="artifact"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Artifacts.ArtifactBuilder.Add(Inedo.BuildMaster.Files.FileEntryInfo,Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter)">
            <summary>
            Adds a file to the artifact.
            </summary>
            <param name="fileEntry">The file to add.</param>
            <param name="fileOps">The <see cref="T:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter"/> to read the file from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileEntry"/> or <paramref name="fileOps"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Artifacts.ArtifactBuilder.Add(Inedo.BuildMaster.Files.DirectoryEntryInfo)">
            <summary>
            Adds an empty directory to the artifact.
            </summary>
            <param name="directoryEntry">The directory to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryEntry"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Artifacts.ArtifactBuilder.Add(Inedo.BuildMaster.Files.SystemEntryInfo,Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter)">
            <summary>
            Adds a file or directory to the artifact.
            </summary>
            <param name="entry">The entry to add.</param>
            <param name="fileOps">The <see cref="T:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter"/> to read the file from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="entry"/> or <paramref name="fileOps"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Artifacts.ArtifactBuilder.Commit">
            <summary>
            Saves the artifact and records it in the database.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Artifacts.ArtifactBuilder.Dispose">
            <summary>
            Releases resources used by the instance.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Artifacts.ArtifactBuilder.ImportZip(Inedo.BuildMaster.Artifacts.ArtifactIdentifier,Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter,Inedo.BuildMaster.Files.FileEntryInfo,System.Nullable{System.Int32})">
            <summary>
            Imports a zip file into the BuildMaster artifact library.
            </summary>
            <param name="artifact">The artifact to import.</param>
            <param name="fileOps">The <see cref="T:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter"/> to import the zip file from.</param>
            <param name="fileEntry">The zip file to import.</param>
            <param name="executionId">The ID of the associated execution.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="artifact"/>, <paramref name="fileOps"/>, or <paramref name="fileEntry"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Artifacts.ArtifactBuilder.ImportZip(Inedo.BuildMaster.Artifacts.ArtifactIdentifier,Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter,Inedo.BuildMaster.Files.FileEntryInfo)">
            <summary>
            Imports a zip file into the BuildMaster artifact library.
            </summary>
            <param name="artifact">The artifact to import.</param>
            <param name="fileOps">The <see cref="T:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter"/> to import the zip file from.</param>
            <param name="fileEntry">The zip file to import.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="artifact"/>, <paramref name="fileOps"/>, or <paramref name="fileEntry"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">File is not a zip file.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Artifacts.ArtifactBuilder.ImportZip(Inedo.BuildMaster.Artifacts.ArtifactIdentifier,System.IO.Stream)">
            <summary>
            Imports the zip file into the BuildMaster artifact library from a stream.
            </summary>
            <param name="artifact">The artifact to import.</param>
            <param name="stream">The stream of the zip file to import.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="artifact"/> or <paramref name="stream"/> is null.</exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException"><paramref name="stream"/> is not a valid zip file.</exception>
        </member>
        <member name="P:Inedo.BuildMaster.Artifacts.ArtifactBuilder.Artifact">
            <summary>
            Gets the artifact being created.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Artifacts.ArtifactBuilder.RootPath">
            <summary>
            Gets or sets the root path for adding entries to the artifact.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Artifacts.ArtifactIdentifier">
            <summary>
            Uniquely identifies a build artifact.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Artifacts.ArtifactIdentifier.#ctor(System.Int32,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Artifacts.ArtifactIdentifier"/> class.
            </summary>
            <param name="applicationId">The application ID of the artifact.</param>
            <param name="releaseNumber">The release number of the artifact.</param>
            <param name="buildNumber">The build number of the artifact.</param>
            <param name="deployableId">The deployable ID of the artifact if applicable.</param>
            <param name="artifactName">The name of the artifact.</param>
            <exception cref="T:System.ArgumentException"><paramref name="applicationId"/> or <paramref name="deployableId"/> is invalid.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="releaseNumber"/>, <paramref name="buildNumber"/>, or <paramref name="artifactName"/> is null, empty, or contains only whitespace.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Artifacts.ArtifactIdentifier.Equals(Inedo.BuildMaster.Artifacts.ArtifactIdentifier)">
            <summary>
            Returns a value indicating whether this identifier is equivalent to another.
            </summary>
            <param name="other">The other identifier.</param>
            <returns>True if identifiers refer to the same artifact; otherwise false.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Artifacts.ArtifactIdentifier.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this identifier is equivalent to another.
            </summary>
            <param name="obj">The other identifier.</param>
            <returns>True if identifiers refer to the same artifact; otherwise false.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Artifacts.ArtifactIdentifier.GetHashCode">
            <summary>
            Returns a hash code for the instance.
            </summary>
            <returns>Hash code for the instance.</returns>
        </member>
        <member name="P:Inedo.BuildMaster.Artifacts.ArtifactIdentifier.ApplicationId">
            <summary>
            Gets the application ID of the artifact.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Artifacts.ArtifactIdentifier.ReleaseNumber">
            <summary>
            Gets the release number of the artifact.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Artifacts.ArtifactIdentifier.BuildNumber">
            <summary>
            Gets the build number of the artifact.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Artifacts.ArtifactIdentifier.DeployableId">
            <summary>
            Gets the deployable ID of the artifact if applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Artifacts.ArtifactIdentifier.ArtifactName">
            <summary>
            Gets the name of the artifact.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Artifacts.PossibleArtifactPath">
            <summary>
            A context that associates a specified artifact name with all the possible paths the artifact could be located
            based on whether an action group is assigned to the same deployable as the group that created the artifact, 
            "all deployables", a different deployable of the same application, or an imported deployable.
            
            Note that the paths returned from the <see cref="M:GetAllPossibleArtifactPaths"/> method only represent
            a path to a possible artifact, and may not actually be the path to the file, it should be verified
            for existence before it is deployed.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Artifacts.PossibleArtifactPath.GetAllPossibleArtifactPaths(Inedo.BuildMaster.Extensibility.Actions.IAgentBasedActionExecutionContext,Inedo.BuildMaster.Artifacts.DeployArtifactOptions,System.String)">
            <summary>
            Gets all possible artifact paths.
            </summary>
            <param name="context">The context.</param>
            <param name="options">The options.</param>
            <param name="artifactsBasePath">The artifacts base path.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            context or options or artifactsBasePath
            </exception>
        </member>
        <member name="M:Inedo.BuildMaster.Artifacts.PossibleArtifactPath.Equals(Inedo.BuildMaster.Artifacts.PossibleArtifactPath)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Artifacts.PossibleArtifactPath.AbsolutePath">
            <summary>
            Gets the absolute path where the artifact could be stored.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Artifacts.PossibleArtifactPath.DeployableId">
            <summary>
            Gets the ID of the possible associated deployable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Artifacts.PossibleArtifactPath.Name">
            <summary>
            Gets the deployable name component the associated artifact path.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Artifacts.PossibleArtifactPath.ApplicationId">
            <summary>
            Gets the application ID component the associated artifact path.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Artifacts.PossibleArtifactPath.ReleaseNumber">
            <summary>
            Gets the release number component of the associated artifact path.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Artifacts.PossibleArtifactPath.BuildNumber">
            <summary>
            Gets the build number component of the associated artifact path.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Artifacts.PossibleArtifactPath.IsReferenced">
            <summary>
            Gets a value indicating whether the artifact at this path is referenced from another application.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Artifacts.DeployArtifactOptions">
            <summary>
            A set of options that determine how and where an artifact will be deployed.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Artifacts.DeployArtifactOptions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Artifacts.DeployArtifactOptions"/> class.
            </summary>
            <param name="artifactName">Name of the artifact.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="artifactName"/> is null/whitespace.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="artifactName"/> must not contain invalid path characters.</exception>
        </member>
        <member name="P:Inedo.BuildMaster.Artifacts.DeployArtifactOptions.ArtifactName">
            <summary>
            Gets the name of the artifact.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Artifacts.DeployArtifactOptions.UseFurthestBuildForReferencedDeployable">
            <summary>
            Gets whether to use the furthest build for a referenced deployable, otherwise uses the latest/newest build.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Artifacts.DeployArtifactOptions.DeployAsZipFile">
            <summary>
            Gets or sets a value indicating whether the artifact should be deployed as a zip file.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Artifacts.DeployArtifactOptions.ClearTargetDirectory">
            <summary>
            Gets or sets a value indicating whether to clear target directory before deploying the artifact. The default is true.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Artifacts.DeployArtifactOptions.LogIndividualFiles">
            <summary>
            Gets or sets a value indicating whether to log individual files as they are deployed.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeployer">
            <summary>
            Facilitates deploying a configuration file to an agent.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeployer.#ctor(Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeploymentOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeployer"/> class.
            </summary>
            <param name="settings">Object containing information about the configuration file to deploy.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="settings"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeployer.Deploy(Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext,Inedo.BuildMaster.Extensibility.Agents.AgentBase)">
            <summary>
            Deploys the configuration file to the specified agent.
            </summary>
            <param name="context">The context used for deployment.</param>
            <param name="agent">The agent to deploy the configuration file to.</param>
            <returns>True if configuration file deployment succeeded or was not necessary; false if there was an error.</returns>
            <remarks>
            For details about the deployment, including any errors, subscribe to the <see cref="E:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeployer.MessageLogged"/> event
            before calling <see cref="M:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeployer.Deploy(Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext,Inedo.BuildMaster.Extensibility.Agents.AgentBase)"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null or <paramref name="agent"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeployer.Write(Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext,System.IO.TextWriter)">
            <summary>
            Writes the configuration file to the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="context">The context used for deployment.</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the configuration file to.</param>
            <returns>True if configuration file was successfully written; false if there was an error.</returns>
            <remarks>
            For details, including any errors, subscribe to the <see cref="E:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeployer.MessageLogged"/> event
            before calling <see cref="M:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeployer.Write(Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext,System.IO.TextWriter)"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null or <paramref name="writer"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeployer.Log(Inedo.Diagnostics.MessageLevel,System.String)">
            <summary>
            Writes the specified message to the corresponding log.
            </summary>
            <param name="logLevel">Log level of the message.</param>
            <param name="message">Message to log.</param>
        </member>
        <member name="E:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeployer.MessageLogged">
            <summary>
            Occurs when a message has been logged.
            </summary>
        </member>
        <member name="E:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeployer.LogReceived">
            <summary>
            Included for SDK compatibility. Use <see cref="E:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeployer.MessageLogged"/> instead.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeployer.Settings">
            <summary>
            Settings used to deploy the configuration file.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeploymentOptions">
            <summary>
            Contains options for deploying a configuration file.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeploymentOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeploymentOptions"/> class.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeploymentOptions.ConfigurationFileId">
            <summary>
            Gets or sets the ID of the configuration file to deploy.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeploymentOptions.InstanceName">
            <summary>
            Gets or sets the name of the configuration file instance to deploy.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeploymentOptions.VersionNumber">
            <summary>
            Gets or sets the version number of the configuration file to deploy.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeploymentOptions.TargetDirectory">
            <summary>
            Gets or sets the directory into which the configuration file will be deployed.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeploymentOptions.FileName">
            <summary>
            Gets or sets the configuration file name to deploy; null indicates that the default name is used.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.ConfigurationFiles.ConfigurationFileDeploymentOptions.UserName">
            <summary>
            Gets or sets the name of the user to use when recording this deployment.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.Domains">
            <summary>
            Contains valid values for various discrete domains.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StandardDataFactory">
            <summary>
            BuildMaster's data factory.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StandardDataFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Data.StandardDataFactory"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StandardDataFactory.#cctor">
            <summary>
            Initializes the <see cref="T:Inedo.BuildMaster.Data.StandardDataFactory"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StandardDataFactory.SetGetUserNameDelegate(System.Func{System.String})">
            <summary>
            Sets the delegate used to obtain the current user name.
            </summary>
            <param name="getUserName">Delegate used to obtain the current user name.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StandardDataFactory.GetConnectionString">
            <summary>
            Returns the connection string for the database.
            </summary>
            <returns>Connection string for the database.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StandardDataFactory.CreateConnection">
            <summary>
            Creates the connection, attempting to retry a few times if it doesn't connect immediately.
            </summary>
            <returns>The connetion to the database.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.AdminEdit_EditChangeScript">
            <summary>
            Updates the text of a database change script.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.AdminEdit_PurgeArtifact">
            <summary>
            Purges an artifact from the specified build.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.AdminEdit_PurgeBuild">
            <summary>
            Purges an entire build and all associated data from the system.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.AdminEdit_UpdateBuildStatus">
            <summary>
            Updates the status of a build.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.AdminEdit_UpdateExecutionStatus">
            <summary>
            Updates the status of an execution.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.AdminEdit_UpdatePromotionStatus">
            <summary>
            Updates the status of a promotion.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.AdminEdit_UpdateReleaseStatus">
            <summary>
            Updates the status of a release.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ApplicationGroups_CreateOrUpdateApplicationGroup">
            <summary>
            Creates or updates a new application group
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ApplicationGroups_DeleteApplicationGroup">
            <summary>
            Deletes an application group
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ApplicationGroups_GetApplicationGroup">
            <summary>
            Gets an application group by ID.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ApplicationGroups_GetApplicationGroups">
            <summary>
            Gets all the application groups
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ApplicationGroups_GetOrCreateApplicationGroup">
            <summary>
            Gets or creates a new application group using the name
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_AddImportedDeployable">
            <summary>
            Adds an imported deployable to an application
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_CloneApplication">
            <summary>
            Clones an application, but does not copy any history
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_CreateApplication">
            <summary>
            Creates a new application
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_CreateOrUpdateDeployable">
            <summary>
            Creates a deployable for a specified application, or updates an existing one
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_DeleteImportedDeployable">
            <summary>
            Deletes an existing imported deployable relation, but does not delete the deployable from the host application
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_EditApplication">
            <summary>
            Edits an existing application.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_FindDeployables">
            <summary>
            Searches for deployables in the system.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_GetApplication">
            <summary>
            Gets the details of an application along with the associated deployables
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_GetApplications">
            <summary>
            Gets the specified number of applications in the system, or all if null is passed in
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_GetApplicationsVisibleToUser">
            <summary>
            Gets the applications which the specified user is allowed to view.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_GetDependentApplications">
            <summary>
            Gets all applications with imported deployables from a specified application
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_GetDeployable">
            <summary>
            Gets the specified deployable
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_GetDeployableDependencies">
            <summary>
            Gets a set of dependencies for the deployables in a given application or a specific deployable if one is specified
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_GetDeployables">
            <summary>
            Gets the deployables for a specific application
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_GetImportedDeployables">
            <summary>
            Gets a set a imported deployables for a specified application
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_GetNavigationData">
            <summary>
            Gets the information required to display the application navigation bar.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_GetWorkflowSteps">
            <summary>
            Gets the workflow steps for a specific application, and any build plans associated with that application.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_PurgeApplicationData">
            <summary>
            Purges an entire application and all associated data from the system
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_PurgeDeployableData">
            <summary>
            Purges a deployable and all its associations from the system.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_SetDashboard">
            <summary>
            Sets the dashboard text for an application
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_SetDeployableDependencies">
            <summary>
            Sets the dependency relationships between the specified deployable and its dependents
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_SetIssueTracker">
            <summary>
            Sets the issue tracking provider of a specified application.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Applications_ValidateHealth">
            <summary>
            Indicates whether an application should redirect to the application health page.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Artifacts_CreateOrReplaceArtifact">
            <summary>
            Creates a reference to an artifact in the artifact library
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Artifacts_GetArtifact">
            <summary>
            Gets an artifact based on the specified criteria.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Artifacts_GetArtifacts">
            <summary>
            Gets a set of artifacts based on the specified criteria.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Artifacts_GetArtifactsByBuildStatus">
            <summary>
            Gets a set of artifacts that are associated with a specified build status, optionally filtered by application and release.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.BuildMaster_GetAlerts">
            <summary>
            Gets the alerts.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.BuildMaster_GetCurrentDateTime">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.BuildOutputs_AddOutput">
            <summary>
            Adds a build output report to a specified build execution
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.BuildOutputs_GetOutput">
            <summary>
            Gets the build output report for a specified build and sequence number
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.BuildOutputs_GetOutputs">
            <summary>
            Gets the build output reports for a specified build
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_AddApproval">
            <summary>
            This procedure is deprecated and will be removed in a future version of BuildMaster.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_CompletePromotion">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_CreateBuild">
            <summary>
            Creates a new build of an application and optionally promotes it to the first environment.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_CreateDependentBuilds">
            <summary>
            Creates new builds in all dependent applications a build.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_DeployBuild">
            <summary>
            Marks a build and its associated release as deployed based on the settings in its workflow.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_GetBuild">
            <summary>
            Gets the details for a specified build
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_GetBuilds">
            <summary>
            Gets the details for all builds that match the specified criteria
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_GetDependentPromotions">
            <summary>
            Gets all promotions that are contingent upon the specified promotion.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_GetExecution">
            <summary>
            Gets all details regarding a specific build execution
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_GetExecutionExtended">
            <summary>
            Gets all details regarding a specific build execution.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_GetExecutionLog">
            <summary>
            Gets the details for a specified build execution, and plan or action if specified.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_GetExecutionLogForActions">
            <summary>
            Gets all of the log entries for the actions specified.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_GetExecutions">
            <summary>
            Gets all the build executions for the specified build
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_GetExecutionsByServer">
            <summary>
            Gets recent build executions for the specified server.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_GetExecutionsInProgress">
            <summary>
            Gets all executions in the executing state optionally filtered by application.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_GetPartialExecutionLog">
            <summary>
            Gets the latest log entries for a specified build execution.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_GetPromotion">
            <summary>
            Gets the set of promotions that have occurred to the specified environment
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_GetPromotions">
            <summary>
            Gets all the promotions that have occurred for a specified build
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_GetRequiredPromotions">
            <summary>
            Gets a list of all the promotions that must occur for a build from start to finish.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_InitiateBuildExecution">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_PromoteBuild">
            <summary>
            Promotes a build to its next environment in its workflow
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_PromoteDependents">
            <summary>
            Promotes all dependents for a given promotion
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_PurgeBuildData">
            <summary>
            Purges an entire build and all associated data from the system.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_PurgeExecutionLogs">
            <summary>
            Purges execution logs in a specific build before a specified time.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_RejectBuild">
            <summary>
            Rejects the specified build
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Builds_ValidateForPromotion">
            <summary>
            Indicates whether a build is eligible for a promotion to the next environment in its workflow
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.BuildSchedules_CreateOrUpdateRecurring">
            <summary>
            Creates a recurring build based on the specified parameters, or updates an existing schedule if one with the given ID already exists.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.BuildSchedules_CreateOrUpdateSchedule">
            <summary>
            Creates a scheduled build based on the specified parameters, or updates an existing scheduled build if one with the given ID already exists.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.BuildSchedules_CreateOrUpdateSCMTriggered">
            <summary>
            Creates a source control triggered automated build based on the specified parameters, or updates an existing one if one with a given ID already exists.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.BuildSchedules_CreateOrUpdateURLTriggered">
            <summary>
            Creates a URL-triggered build based on the specified parameters, or updates an existing schedule if one with the given ID already exists.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.BuildSchedules_DeleteBuildSchedule">
            <summary>
            Deletes the specified build schedule
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.BuildSchedules_GetBuildSchedule">
            <summary>
            Gets the specified build schedule
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.BuildSchedules_GetBuildSchedules">
            <summary>
            Gets a set of builds schedules for the specified application and active indicator, or all if null is supplied
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.BuildSchedules_GetScheduled">
            <summary>
            Gets a set of build schedules that are scheduled to be executed between the specified dates
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.BuildSchedules_SetVariableDefinition">
            <summary>
            Updates a variable definition to use with a scheduled build
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.BuildTestResults_GetAllGroups">
            <summary>
            Gets all of the test result groups in the system.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.BuildTestResults_GetTestGroupResults">
            <summary>
            Gets the unit test results for a specified build execution
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.BuildTestResults_GetTestGroupResultsForBuild">
            <summary>
            Gets the unit test results for a specified build execution
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.BuildTestResults_GetTestHistory">
            <summary>
            Gets this history of a test by its name, and optionally filtered by test group and application.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.BuildTestResults_GetTestLog">
            <summary>
            Gets the results of a specific unit test
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.BuildTestResults_GetTestResults">
            <summary>
            Gets the build test results based on the specified criteria.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.BuildTestResults_RecordTestResult">
            <summary>
            Logs the result of an individual unit test.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ChangeControlPerformances_GetReleaseSummary">
            <summary>
            Gets a summary of the change control performances for a specified change control.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ChangeControls_CreateOrUpdateChangeControl">
            <summary>
            Creates a new change control, or updates an existing one
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ChangeControls_DeleteChangeControl">
            <summary>
            Deletes the specified change control
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ChangeControls_GetChangeControl">
            <summary>
            Gets the details of a specified change control
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ChangeControls_GetChangeControlPerformances">
            <summary>
            Gets a list of change control performances for a specified change control or all change controls if none is specified
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ChangeControls_GetChangeControls">
            <summary>
            Gets a list of change controls based on the specified criteria
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ChangeControls_PerformChangeControl">
            <summary>
            Adds a change control performance for a specified environment
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Configuration_GetConfiguration">
            <summary>
            Gets the a complete list of BuildMaster configuration settings.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Configuration_GetInternalValue">
            <summary>
            Gets the specified BuildMaster internal configuration value.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Configuration_GetValue">
            <summary>
            Gets the specified BuildMaster configuration value.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Configuration_SetValue">
            <summary>
            Sets a BuildMaster configuration value.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Configuration_SetValueWithoutEvent">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ConfigurationFiles_CreateConfigurationFile">
            <summary>
            Creates a configuration file in the system.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ConfigurationFiles_CreateConfigurationFileInstance">
            <summary>
            Creates a new instance of a configuration file.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ConfigurationFiles_CreateConfigurationFileVersions">
            <summary>
            Creates new configuration file versions for each instance specified in the ConfigurationFiles_Xml for the given configuration file.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ConfigurationFiles_DeployConfigurationFile">
            <summary>
            Saves the result of a deployed configuration file (this will not physically deploy the configuration file).
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ConfigurationFiles_FillVersionGaps">
            <summary>
            Ensures that there are no gaps in configuration file instance versions.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ConfigurationFiles_GetConfigurationFile">
            <summary>
            Gets a configuration file and all of its instances.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ConfigurationFiles_GetConfigurationFileDeployments">
            <summary>
            Gets a list of all configuration file deployments based on the specified criteria.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ConfigurationFiles_GetConfigurationFileInstances">
            <summary>
            Gets a list of all configuration file instances that match the specified criteria.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ConfigurationFiles_GetConfigurationFiles">
            <summary>
            Gets all configuration files that match the specified criteria.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ConfigurationFiles_GetConfigurationFileVersion">
            <summary>
            Gets a list of configuration file versions for a specified configuration file.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ConfigurationFiles_PurgeConfigurationFile">
            <summary>
            Purges a configuration file, including all previous versions of all instances and deployment history.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ConfigurationFiles_PurgeConfigurationFileInstance">
            <summary>
            Purges a configuration file instance, including all previous versions and deployment history.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ConfigurationFiles_UpdateConfigurationFile">
            <summary>
            Updates metadata for an existing configuration file.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ConfigurationFiles_UpdateConfigurationFileInstance">
            <summary>
            Updates metadata for an existing configuration file instance.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Dashboards_CreateDashboard">
            <summary>
            Creates a dashboard
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Dashboards_CreateOrUpdateGadget">
            <summary>
            Creates or updates a gadget in an application or system-level dashboard
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Dashboards_DeleteGadget">
            <summary>
            Deletes a gadget in an application or system-level dashboard
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Dashboards_GetApplications">
            <summary>
            Gets an application summary for all applications in BuildMaster or a specific group of applications
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Dashboards_GetDashboard">
            <summary>
            Gets a dashboard.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Dashboards_GetGadget">
            <summary>
            Gets a gadget in an application or system-level dashboard
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Dashboards_GetGadgets">
            <summary>
            Gets the gadgets in a dashboard.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Dashboards_ResequenceGadget">
            <summary>
            Changes the sequence of a gadget within a dashboard
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.DatabaseChangeScripts_AddDatabaseProvider">
            <summary>
            Adds a database change script provider if one does not exist, or updates an existing one.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.DatabaseChangeScripts_CreateNewChangeScript">
            <summary>
            Creates a new database change script
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.DatabaseChangeScripts_DeleteChangeScript">
            <summary>
            Deletes a database change script
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.DatabaseChangeScripts_DeleteDatabaseProvider">
            <summary>
            Deletes a database provider
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.DatabaseChangeScripts_EditChangeScript">
            <summary>
            Updates an existing database change script
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.DatabaseChangeScripts_GetChangeScript">
            <summary>
            Gets the specified database change script
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.DatabaseChangeScripts_GetChangeScripts">
            <summary>
            Gets all the database change scripts that match the specified criteria
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.DatabaseChangeScripts_GetDatabaseChangeScriptExecution">
            <summary>
            Gets the specified database change script execution details
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.DatabaseChangeScripts_GetDatabaseChangeScriptExecutions">
            <summary>
            Gets all the database change script executions that have occurred matching the specified criteria
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.DatabaseChangeScripts_GetDatabaseProvider">
            <summary>
            Gets the specified database provider
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.DatabaseChangeScripts_GetDatabaseProviders">
            <summary>
            Gets all the database providers that match the specified criteria.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.DatabaseChangeScripts_LogExecution">
            <summary>
            Logs the execution of a database change script
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Environments_AddOrRemoveServer">
            <summary>
            Associates or disassociates a server from a specified environment
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Environments_AddOrRemoveServerFromGroup">
            <summary>
            Adds or removes a server from a specified server group
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Environments_CreateOrUpdateAutomaticRequirement">
            <summary>
            Creates a new automatic environment promotion requirement or updates an existing one.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Environments_CreateOrUpdateEnvironment">
            <summary>
            Creates a new environment or updates an existing one
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Environments_CreateOrUpdateManualRequirement">
            <summary>
            Creates a new manual promotion requirement or updates an existing one.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Environments_CreateOrUpdateServer">
            <summary>
            Creates a new server, or updates an existing one.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Environments_DeleteEnvironment">
            <summary>
            Soft deletes an environment
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Environments_DeleteServer">
            <summary>
            Deletes a server.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Environments_GetEnvironment">
            <summary>
            Gets an environment
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Environments_GetEnvironments">
            <summary>
            Gets the environments for a specified application, or all environments if no application is provided.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Environments_GetEnvironmentsAndServers">
            <summary>
            Gets the a dataset containing all environments, all environment/server relations, and servers
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Environments_GetServer">
            <summary>
            Gets the details of a specific server including its environments and any log messages.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Environments_GetServers">
            <summary>
            Gets all the servers in the system.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Environments_GetServersInGroup">
            <summary>
            Gets all the servers in a specified server group.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Environments_ResequenceEnvironment">
            <summary>
            Resequences the specified environment by placing it where another environment is sequenced
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Environments_UndeleteEnvironment">
            <summary>
            Undeletes the specified environment
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Environments_UpdateEnvironmentServers">
            <summary>
            Assigns all server IDs passed in as a CSV to the specified environment
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Environments_UpdateServerGroupServers">
            <summary>
            Assigns all server IDs passed in as a CSV to the specified server group
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Environments_UpdateServerStatus">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.EventListeners_CreateOrUpdateEventListeners">
            <summary>
            Creates a new event listener, or updates an existing one
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.EventListeners_DeleteEventListener">
            <summary>
            Deletes a EventListener from the system
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.EventListeners_GetEventListener">
            <summary>
            Gets a EventListener and a list of event codes that the EventListener is subscribed to
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.EventListeners_GetEventListeners">
            <summary>
            Gets a list of EventListeners for the specified user, or all users if no user is specified
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Events_GetEventListeners">
            <summary>
            Gets the EventListeners that have occurred since the date specified.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Events_GetEventOccurence">
            <summary>
            Get a specific event occurence along with its event details
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Events_GetEventOccurences">
            <summary>
            Gets all the event occurences in the system for a specific application, or all applications, limited to a specified count if provided
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Events_GetNotifiers">
            <summary>
            Gets the notifiers that have arisen since the date specified
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Executions_AppendActionLog">
            <summary>
            Writes a log message to an action log.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Executions_BeginAction">
            <summary>
            Initiates execution of a specific action.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Executions_BeginDeploymentPlan">
            <summary>
            Initiates execution of a specific deployment plan.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Executions_BeginDeploymentPlanActionGroup">
            <summary>
            Initiates execution of a specific deployment plan action group.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Executions_BeginExecution">
            <summary>
            Changes the state of an execution from Pending to Executing.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Executions_CancelExecution">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Executions_CompleteAction">
            <summary>
            Marks an action as completed.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Executions_CompleteExecution">
            <summary>
            Marks an execution as completed.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Executions_FailExecutingPlans">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Executions_GetExecutionsPendingCancellation">
            <summary>
            Returns executions which are awaiting cancellation.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Executions_GetExecutionsToExecute">
            <summary>
            Returns executions which are ready to be started by the executer.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Executions_GetManualActionsInProgress">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Executions_GetManualActionsInProgressForUser">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Executions_GetOrSetManualActionComplete">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Executions_GetVariableValues">
            <summary>
            Gets execution time variable values.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Executions_SetVariableValue">
            <summary>
            Creates, updates, or deletes an execution time variable value.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ExtensionConfiguration_DeleteConfiguration">
            <summary>
            Deletes an extension configuration
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ExtensionConfiguration_GetConfiguration">
            <summary>
            Gets the details of an extension configurer for extension with the specified name
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ExtensionConfiguration_GetConfigurationById">
            <summary>
            Gets the details of an extension configurer for extension with the specified ID
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ExtensionConfiguration_GetConfigurations">
            <summary>
            Gets the details for all extension configurers in the system, or a specific one if specified
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.ExtensionConfiguration_SaveConfiguration">
            <summary>
            Creates an extension configurer in the system, or updates an existing one
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Issues_CloseIssue">
            <summary>
            Closes a BuildMaster issue.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Issues_CreateIssue">
            <summary>
            Creates an issue for a release of an application.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Issues_DeleteIssue">
            <summary>
            Deletes an issue.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Issues_GetIssue">
            <summary>
            Gets the specified.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Issues_GetIssues">
            <summary>
            Gets the issues for an application, optionally filtered by release or build.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Issues_ReopenIssue">
            <summary>
            Re-opens a BuildMaster issue.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Issues_UpdateIssue">
            <summary>
            Updates one or more properties of an issue.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.LicenseKeys_ActivateLicenseKey">
            <summary>
            Sets the activation code for a license key.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.LicenseKeys_AddLicenseKey">
            <summary>
            Adds a new license key.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.LicenseKeys_DeleteLicenseKey">
            <summary>
            Deletes a license key.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.LicenseKeys_GetLicenseKeys">
            <summary>
            Gets all the license keys.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.LogMessages_AddMessage">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.LogMessages_DeleteMessages">
            <summary>
            Deletes one or all message from the error log
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.LogMessages_GetMessage">
            <summary>
            Gets a specified message from the error log
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.LogMessages_GetMessages">
            <summary>
            Gets the messages from the error log that match the specified criteria
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.LogMessages_SetReadIndicator">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Notifiers_CreateOrUpdateNotifier">
            <summary>
            Creates a new notifier, or updates an existing one
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Notifiers_DeleteNotifier">
            <summary>
            Deletes a notifier from the system
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Notifiers_GetNotifier">
            <summary>
            Gets a notifier and a list of event codes that the notifier is subscribed to
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Notifiers_GetNotifiers">
            <summary>
            Gets a list of notifiers for the specified user, or all users if no user is specified
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Plans_ChangeActionGroup">
            <summary>
            Moves an action into a different action group.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Plans_ChangeActionGroupDeploymentPlan">
            <summary>
            Moves a plan action group to the final position of a different deployment plan.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Plans_CloneDeploymentPlans">
            <summary>
            Clones one or more deployment plans
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Plans_CreateDeploymentPlanActionGroup">
            <summary>
            Creates a new action group in the specified deployment plan.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Plans_CreateOrUpdateAction">
            <summary>
            Creates an action in the specified action group or updates an existing one.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Plans_CreateOrUpdateDeploymentPlan">
            <summary>
            Creates a new deployment plan or changes the name of an existing deployment plan.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Plans_DeleteAction">
            <summary>
            Deletes an action from an action group.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Plans_DeleteDeploymentPlan">
            <summary>
            Deletes a deployment plan.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Plans_DeleteDeploymentPlanActionGroup">
            <summary>
            Deletes the specified action group.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Plans_GetAction">
            <summary>
            Gets the details of the specified action.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Plans_GetActionGroup">
            <summary>
            Gets the details of the specified plan, and all the actions associated with the plan.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Plans_GetActionGroups">
            <summary>
            Gets all action groups.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Plans_GetDeploymentPlan">
            <summary>
            Returns action groups and actions for a deployment plan.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Plans_GetDeploymentPlanActionGroup">
            <summary>
            Gets the details of the specified plan, and all the actions associated with the plan.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Plans_GetDeploymentPlans">
            <summary>
            Returns the deployment plans in the system.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Plans_GetGlobalDeploymentPlans">
            <summary>
            Returns named deployment plans and optionally plans orphaned.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Plans_GetMostCommonActions">
            <summary>
            Returns the most commonly used actions in the system.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Plans_ResequenceAction">
            <summary>
            Changes the sequence of an action within a plan.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Plans_ResequenceActionGroup">
            <summary>
            Changes the sequence of a deployment plan action group.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Plans_UpdateActionGroup">
            <summary>
            Updates the specified action group.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Plans_UpdateDeploymentPlanActionGroup">
            <summary>
            Updates the specified deployment plan action group.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Promotions_AddApproval">
            <summary>
            Adds an approval for a promotion.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Promotions_CreateOrUpdateRequirement">
            <summary>
            Adds a requirement for a promotion.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Promotions_DeleteApproval">
            <summary>
            Deletes an approval for a promotion.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Promotions_DeleteRequirement">
            <summary>
            Deletes a promotion requirement.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Promotions_GetApprovalsReceived">
            <summary>
            Gets all requirements and approvals received for the specified promotion.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Promotions_GetRequirement">
            <summary>
            Gets the specified promotion requirement.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Promotions_GetRequirements">
            <summary>
            Gets all requirements for the specified promotion.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Promotions_GetRequirementsToVerify">
            <summary>
            Gets all requirements that need to be verified.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Promotions_GetScheduled">
            <summary>
            Gets scheduled promotions, optionally filtered by promotion and date.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Promotions_InvalidateApprovals">
            <summary>
            Deletes received approvals for a pending promotion.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Promotions_SchedulePromotion">
            <summary>
            Schedules a promotion or removes a previously scheduled promotion.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Promotions_SetAutomaticRequirementStatus">
            <summary>
            Records the status of an automatic promotion requirement.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Providers_CreateOrUpdateProvider">
            <summary>
            Creates a new provider or updates an existing one.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Providers_DeleteProvider">
            <summary>
            Deletes the specified provider
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Providers_GetProvider">
            <summary>
            Gets the details of the specified provider
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Providers_GetProviders">
            <summary>
            Gets a list of providers in the system based on the specified criteria
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Releases_CancelRelease">
            <summary>
            Cancels the specified release
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Releases_CreateOrUpdateRelease">
            <summary>
            Creates a new release or updates an existing one.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Releases_CreateOrUpdateReleaseNote">
            <summary>
            Creates a new release note, or updates an existing one
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Releases_DeleteReleaseNote">
            <summary>
            Deletes a release note from the system
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Releases_GetBuildExecutions">
            <summary>
            Gets the list of build executions for the specified release
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Releases_GetDependentReleases">
            <summary>
            Gets all releases with referenced deployables from a specified release
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Releases_GetNextReleaseNumber">
            <summary>
            Gets the next release number.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Releases_GetRelease">
            <summary>
            Gets the details of a specified release, the deployables associated with the release, and the configuration file versions associated with the release.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Releases_GetReleaseDeployables">
            <summary>
            Gets the set of deployables associated with any release for an application
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Releases_GetReleaseNote">
            <summary>
            Gets a release note from the system
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Releases_GetReleaseNotes">
            <summary>
            Gets the release notes that match the specified criteria
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Releases_GetReleases">
            <summary>
            Gets a list of releases that match the specified criteria
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Releases_GetRequiredPromotions">
            <summary>
            Gets a list of the promotions that are required for the specified release
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Releases_GetSortableReleaseNumber">
            <summary>
            Gets the sortable release number for a release.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Releases_PurgeReleaseData">
            <summary>
            Purges an entire release and all associated data from the system.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Releases_ReleaseExists">
            <summary>
            Determines whether a release already exists, and also whether a newer release of an application exists
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Releases_ResequenceRelease">
            <summary>
            Resequences the specified release by placing it where another release is sequenced
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Releases_SetConfigurationFileVersion">
            <summary>
            Sets the configuration file version for the specified release.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Releases_UnCancelRelease">
            <summary>
            Uncancels a previously cancelled release
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.RetentionPolicies_BeginPurge">
            <summary>
            Marks the start of a new purge.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.RetentionPolicies_CreateOrUpdateRetentionPolicy">
            <summary>
            Creates or updates a retention policy.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.RetentionPolicies_DeleteRetentionPolicy">
            <summary>
            Deletes a retention policy.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.RetentionPolicies_EndPurge">
            <summary>
            Marks the end of a purge.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.RetentionPolicies_GetArtifactsToPurge">
            <summary>
            Gets the artifacts for the specified retention policy that can be purged.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.RetentionPolicies_GetBuildCount">
            <summary>
            Gets the total number of builds in the specified scope.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.RetentionPolicies_GetBuildsToPurge">
            <summary>
            Gets the builds for the specified retention policy that can be purged.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.RetentionPolicies_GetBuildsWithLogsToPurge">
            <summary>
            Gets only the builds that have logs remaining for the specified retention policy that can be purged.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.RetentionPolicies_GetPurgeHistory">
            <summary>
            Gets the purge history for one or all retention policies.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.RetentionPolicies_GetPurgeLog">
            <summary>
            Gets the specified purge history log.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.RetentionPolicies_GetReleaseCount">
            <summary>
            Gets the total number of releases in the specified scope.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.RetentionPolicies_GetReleasesToPurge">
            <summary>
            Gets the releases for the specified retention policy that can be purged.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.RetentionPolicies_GetRetentionPolicies">
            <summary>
            Gets all of the retention policies.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.RetentionPolicies_GetRetentionPolicy">
            <summary>
            Gets the specified retention policy.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.RetentionPolicies_PurgeNow">
            <summary>
            Marks a retention policy as ready to run immediately.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Scripts_CreateOrUpdateParameter">
            <summary>
            Creates a new script parameter or updates an existing one.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Scripts_CreateOrUpdateScript">
            <summary>
            Creates a new script or updates an existing one.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Scripts_CreateVersion">
            <summary>
            Creates a new version of a script.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Scripts_DeleteParameter">
            <summary>
            Creates a new script parameter or updates an existing one.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Scripts_DeleteScript">
            <summary>
            Permanently deletes a script.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Scripts_GetScript">
            <summary>
            Gets a script and all of its associated information.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Scripts_GetScripts">
            <summary>
            Gets all of the scripts in the system, optionally filtered by type code.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Scripts_GetScriptTypeUsage">
            <summary>
            Gets usage data for the script types in the database.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Security_AddNamedUser">
            <summary>
            Assigns the specified user as a named user with the specified user class type
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Security_AddPrivilege">
            <summary>
            Grants or denies the specified principal the ability to perform a certain role
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Security_CreateOrUpdateRole">
            <summary>
            Creates a new role defined by the specified tasks
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Security_DeleteRole">
            <summary>
            Deletes the specified role from the system
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Security_GetNamedUser">
            <summary>
            Gets the specified named user
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Security_GetNamedUsers">
            <summary>
            Gets a list of the named users in the system
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Security_GetOrAddAnonymousRole">
            <summary>
            Gets an anonymous role containing the specified tasks, creating one if necessary.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Security_GetPrivileges">
            <summary>
            Gets a list of privileges assigned in the system
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Security_GetRole">
            <summary>
            Gets the specified role, along with all the tasks that comprise the role.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Security_GetRoles">
            <summary>
            Gets all the roles in the system, along with all the tasks comprising each role.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Security_GetTasks">
            <summary>
            Gets all of the tasks in the system.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Security_GetUserClassCounts">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Security_GetUserPrivileges">
            <summary>
            Gets the list of privileges specifically assigned to a user or any specified groups
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Security_IsAuthorizedForAnyTask">
            <summary>
            Determines whether or not the specified user with specified groups has authorized to perform a task
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Security_IsAuthorizedForTask">
            <summary>
            Determines whether or not the specified user with specified groups has authorized to perform a task.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Security_IsAuthorizedForTaskBatch">
            <summary>
            Determines whether or not the specified user with specified groups has authorized to perform the specified tasks.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Security_RemoveNamedUser">
            <summary>
            Removes the specified user as a named user
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Security_RemovePrivilege">
            <summary>
            Deletes a privilege from the system.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Security_UpdateUserClassType">
            <summary>
            Updates the user class type of the specified user
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Security_UserIsNamed">
            <summary>
            Determines whether or not a user is a named user in the system
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.UserConfiguration_GetUserConfiguration">
            <summary>
            Gets the a complete list of user configuration settings
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.UserConfiguration_GetValue">
            <summary>
            Gets the specified user configuration value
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.UserConfiguration_SetValue">
            <summary>
            Sets a user configuration value
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Users_CreateOrUpdateGroup">
            <summary>
            Creates a new user group in the system
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Users_CreateOrUpdateUser">
            <summary>
            Creates a new user in the system or updates an existing one.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Users_DeleteGroup">
            <summary>
            Deletes a user group from the system, but does not delete the users who belong to the group
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Users_DeleteUser">
            <summary>
            Deletes a user from the system
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Users_GetGroups">
            <summary>
            Gets a list of user groups in the system
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Users_GetUser">
            <summary>
            Gets the details of the specified user, and a list of all the groups the user belongs to
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Users_GetUsers">
            <summary>
            Gets all the users in the system, along with all group membership information.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Users_GetUsersInGroup">
            <summary>
            Gets a list of users in the specified group
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Users_SearchGroups">
            <summary>
            Gets a specific group by name, or if a wildcard search is performed, a group whose name starts with the specified name
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Users_SearchUsers">
            <summary>
            Gets the specified user, or searchs for a user whose name starts with any of the specified criteria
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Users_SetPassword">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Users_ValidateLogin">
            <summary>
            Validates the password of a specified user
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Variables_CreateOrUpdateVariableDeclaration">
            <summary>
            Creates a new variable declaration or updates an existing one
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Variables_CreateOrUpdateVariableDefinition">
            <summary>
            Creates a new variable definition or updates an existing one
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Variables_DeleteVariableDeclaration">
            <summary>
            Deletes a variable declaration
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Variables_DeleteVariableDefinition">
            <summary>
            Deletes a variable definition
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Variables_GetSystemVariableDefinitions">
            <summary>
            Gets the variable definitions for system-scoped variables.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Variables_GetVariableDeclaration">
            <summary>
            Gets the variable declaration in the system that has the specified ID.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Variables_GetVariableDeclarations">
            <summary>
            Gets the variable declarations in the system that are defined in the specified scope
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Variables_GetVariableDefinition">
            <summary>
            Gets the specified variable definition.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Variables_GetVariableDefinitions">
            <summary>
            Gets the variable definitions in the system that are defined in the specified scope
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Variables_GetVariableValues">
            <summary>
            Gets the variable values for the specified scope.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Workflows_AssignGlobalWorkflowToApplication">
            <summary>
            Assigns a global workflow to an application.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Workflows_CloneWorkflow">
            <summary>
            Clones one or more workflows.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Workflows_CreateOrUpdateWorkflow">
            <summary>
            Adds a new workflow or updates an existing one.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Workflows_CreateOrUpdateWorkflowStep">
            <summary>
            Creates a new workflow step or updates an existing one.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Workflows_DeleteApplicationWorkflow">
            <summary>
            Disassociates a global workflow from an application.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Workflows_DeleteStep">
            <summary>
            Deletes a workflow step.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Workflows_DeleteWorkflow">
            <summary>
            Deletes a workflow step.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Workflows_GetGlobalWorkflows">
            <summary>
            Gets a list of global workflows and their steps.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Workflows_GetWorkflow">
            <summary>
            Gets a specific workflow and all of its workflow steps.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Workflows_GetWorkflows">
            <summary>
            Gets a list of all workflows, optionally filtered by application.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Workflows_GetWorkflowStep">
            <summary>
            Gets the specified workflow step.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Workflows_MakeGlobal">
            <summary>
            Moves a workflow step to a new sequence.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Workflows_MoveApproval">
            <summary>
            Moves an approval up or down in sequence.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Workflows_MoveWorkflowStep">
            <summary>
            Moves a workflow step to a new sequence.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Data.StoredProcedures.Workflows_SetBuildStep">
            <summary>
            Sets the build deployment plan or build importer for a workflow.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.AdminEdit_EditChangeScript(System.Nullable{System.Int32},System.String)">
            <summary>
            Updates the text of a database change script.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.AdminEdit_PurgeArtifact(System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Purges an artifact from the specified build.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.AdminEdit_PurgeBuild(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Purges an entire build and all associated data from the system.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.AdminEdit_UpdateBuildStatus(System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Updates the status of a build.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.AdminEdit_UpdateExecutionStatus(System.Nullable{System.Int32},System.String)">
            <summary>
            Updates the status of an execution.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.AdminEdit_UpdatePromotionStatus(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Updates the status of a promotion.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.AdminEdit_UpdateReleaseStatus(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Updates the status of a release.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ApplicationGroups_CreateOrUpdateApplicationGroup(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Creates or updates a new application group
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ApplicationGroups_DeleteApplicationGroup(System.Nullable{System.Int32})">
            <summary>
            Deletes an application group
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ApplicationGroups_GetApplicationGroup(System.Nullable{System.Int32})">
            <summary>
            Gets an application group by ID.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ApplicationGroups_GetApplicationGroups">
            <summary>
            Gets all the application groups
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ApplicationGroups_GetOrCreateApplicationGroup(System.String,System.Nullable{System.Int32})">
            <summary>
            Gets or creates a new application group using the name
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_AddImportedDeployable(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Adds an imported deployable to an application
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_CloneApplication(System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Clones an application, but does not copy any history
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_CreateApplication(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new application
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_CreateOrUpdateDeployable(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Creates a deployable for a specified application, or updates an existing one
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_DeleteImportedDeployable(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Deletes an existing imported deployable relation, but does not delete the deployable from the host application
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_EditApplication(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Edits an existing application.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_FindDeployables(System.String,System.Nullable{System.Int32})">
            <summary>
            Searches for deployables in the system.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_GetApplication(System.Nullable{System.Int32})">
            <summary>
            Gets the details of an application along with the associated deployables
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_GetApplications(System.Nullable{System.Int32})">
            <summary>
            Gets the specified number of applications in the system, or all if null is passed in
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_GetApplicationsVisibleToUser(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Gets the applications which the specified user is allowed to view.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_GetDependentApplications(System.Nullable{System.Int32})">
            <summary>
            Gets all applications with imported deployables from a specified application
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_GetDeployable(System.Nullable{System.Int32})">
            <summary>
            Gets the specified deployable
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_GetDeployableDependencies(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets a set of dependencies for the deployables in a given application or a specific deployable if one is specified
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_GetDeployables(System.Nullable{System.Int32})">
            <summary>
            Gets the deployables for a specific application
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_GetImportedDeployables(System.Nullable{System.Int32})">
            <summary>
            Gets a set a imported deployables for a specified application
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_GetNavigationData(System.Nullable{System.Int32})">
            <summary>
            Gets the information required to display the application navigation bar.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_GetWorkflowSteps(System.Nullable{System.Int32},System.String)">
            <summary>
            Gets the workflow steps for a specific application, and any build plans associated with that application.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_PurgeApplicationData(System.Nullable{System.Int32})">
            <summary>
            Purges an entire application and all associated data from the system
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_PurgeDeployableData(System.Nullable{System.Int32})">
            <summary>
            Purges a deployable and all its associations from the system.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_SetDashboard(System.Nullable{System.Int32},System.String)">
            <summary>
            Sets the dashboard text for an application
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_SetDeployableDependencies(System.Nullable{System.Int32},System.String)">
            <summary>
            Sets the dependency relationships between the specified deployable and its dependents
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_SetIssueTracker(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Sets the issue tracking provider of a specified application.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Applications_ValidateHealth(System.Nullable{System.Int32},System.String,System.String,System.String,System.String)">
            <summary>
            Indicates whether an application should redirect to the application health page.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Artifacts_CreateOrReplaceArtifact(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a reference to an artifact in the artifact library
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Artifacts_GetArtifact(System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Gets an artifact based on the specified criteria.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Artifacts_GetArtifacts(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets a set of artifacts based on the specified criteria.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Artifacts_GetArtifactsByBuildStatus(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Gets a set of artifacts that are associated with a specified build status, optionally filtered by application and release.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.BuildMaster_GetAlerts(System.String,System.String,System.String)">
            <summary>
            Gets the alerts.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.BuildMaster_GetCurrentDateTime(System.Nullable{System.DateTime})">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.BuildOutputs_AddOutput(System.Nullable{System.Int32},System.String,System.Byte[],System.String)">
            <summary>
            Adds a build output report to a specified build execution
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.BuildOutputs_GetOutput(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the build output report for a specified build and sequence number
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.BuildOutputs_GetOutputs(System.Nullable{System.Int32})">
            <summary>
            Gets the build output reports for a specified build
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_AddApproval(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            This procedure is deprecated and will be removed in a future version of BuildMaster.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_CompletePromotion(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_CreateBuild(System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new build of an application and optionally promotes it to the first environment.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_CreateDependentBuilds(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String)">
            <summary>
            Creates new builds in all dependent applications a build.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_DeployBuild(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Marks a build and its associated release as deployed based on the settings in its workflow.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_GetBuild(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Gets the details for a specified build
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_GetBuilds(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Gets the details for all builds that match the specified criteria
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_GetDependentPromotions(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Gets all promotions that are contingent upon the specified promotion.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_GetExecution(System.Nullable{System.Int32})">
            <summary>
            Gets all details regarding a specific build execution
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_GetExecutionExtended(System.Nullable{System.Int32})">
            <summary>
            Gets all details regarding a specific build execution.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_GetExecutionLog(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the details for a specified build execution, and plan or action if specified.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_GetExecutionLogForActions(System.String)">
            <summary>
            Gets all of the log entries for the actions specified.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_GetExecutions(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets all the build executions for the specified build
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_GetExecutionsByServer(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets recent build executions for the specified server.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_GetExecutionsInProgress(System.Nullable{System.Int32})">
            <summary>
            Gets all executions in the executing state optionally filtered by application.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_GetPartialExecutionLog(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Gets the latest log entries for a specified build execution.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_GetPromotion(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Gets the set of promotions that have occurred to the specified environment
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_GetPromotions(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Gets all the promotions that have occurred for a specified build
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_GetRequiredPromotions(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Gets a list of all the promotions that must occur for a build from start to finish.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_InitiateBuildExecution(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_PromoteBuild(System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Promotes a build to its next environment in its workflow
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_PromoteDependents(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Promotes all dependents for a given promotion
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_PurgeBuildData(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Purges an entire build and all associated data from the system.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_PurgeExecutionLogs(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime},System.Nullable{System.Int64})">
            <summary>
            Purges execution logs in a specific build before a specified time.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_RejectBuild(System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Rejects the specified build
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Builds_ValidateForPromotion(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Indicates whether a build is eligible for a promotion to the next environment in its workflow
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.BuildSchedules_CreateOrUpdateRecurring(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Creates a recurring build based on the specified parameters, or updates an existing schedule if one with the given ID already exists.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.BuildSchedules_CreateOrUpdateSchedule(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a scheduled build based on the specified parameters, or updates an existing scheduled build if one with the given ID already exists.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.BuildSchedules_CreateOrUpdateSCMTriggered(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Creates a source control triggered automated build based on the specified parameters, or updates an existing one if one with a given ID already exists.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.BuildSchedules_CreateOrUpdateURLTriggered(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Creates a URL-triggered build based on the specified parameters, or updates an existing schedule if one with the given ID already exists.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.BuildSchedules_DeleteBuildSchedule(System.Nullable{System.Int32})">
            <summary>
            Deletes the specified build schedule
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.BuildSchedules_GetBuildSchedule(System.Nullable{System.Int32})">
            <summary>
            Gets the specified build schedule
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.BuildSchedules_GetBuildSchedules(System.Nullable{System.Int32},System.String)">
            <summary>
            Gets a set of builds schedules for the specified application and active indicator, or all if null is supplied
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.BuildSchedules_GetScheduled(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Gets a set of build schedules that are scheduled to be executed between the specified dates
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.BuildSchedules_SetVariableDefinition(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Updates a variable definition to use with a scheduled build
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.BuildTestResults_GetAllGroups">
            <summary>
            Gets all of the test result groups in the system.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.BuildTestResults_GetTestGroupResults(System.Nullable{System.Int32})">
            <summary>
            Gets the unit test results for a specified build execution
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.BuildTestResults_GetTestGroupResultsForBuild(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Gets the unit test results for a specified build execution
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.BuildTestResults_GetTestHistory(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Gets this history of a test by its name, and optionally filtered by test group and application.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.BuildTestResults_GetTestLog(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Gets the results of a specific unit test
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.BuildTestResults_GetTestResults(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the build test results based on the specified criteria.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.BuildTestResults_RecordTestResult(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Logs the result of an individual unit test.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ChangeControlPerformances_GetReleaseSummary(System.Nullable{System.Int32})">
            <summary>
            Gets a summary of the change control performances for a specified change control.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ChangeControls_CreateOrUpdateChangeControl(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new change control, or updates an existing one
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ChangeControls_DeleteChangeControl(System.Nullable{System.Int32})">
            <summary>
            Deletes the specified change control
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ChangeControls_GetChangeControl(System.Nullable{System.Int32})">
            <summary>
            Gets the details of a specified change control
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ChangeControls_GetChangeControlPerformances(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets a list of change control performances for a specified change control or all change controls if none is specified
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ChangeControls_GetChangeControls(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Gets a list of change controls based on the specified criteria
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ChangeControls_PerformChangeControl(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Adds a change control performance for a specified environment
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Configuration_GetConfiguration">
            <summary>
            Gets the a complete list of BuildMaster configuration settings.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Configuration_GetInternalValue(System.String,System.String)">
            <summary>
            Gets the specified BuildMaster internal configuration value.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Configuration_GetValue(System.String,System.String,System.String)">
            <summary>
            Gets the specified BuildMaster configuration value.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Configuration_SetValue(System.String,System.String,System.String)">
            <summary>
            Sets a BuildMaster configuration value.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Configuration_SetValueWithoutEvent(System.String,System.String,System.String)">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ConfigurationFiles_CreateConfigurationFile(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Creates a configuration file in the system.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ConfigurationFiles_CreateConfigurationFileInstance(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Creates a new instance of a configuration file.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ConfigurationFiles_CreateConfigurationFileVersions(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Creates new configuration file versions for each instance specified in the ConfigurationFiles_Xml for the given configuration file.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ConfigurationFiles_DeployConfigurationFile(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Saves the result of a deployed configuration file (this will not physically deploy the configuration file).
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ConfigurationFiles_FillVersionGaps(System.Nullable{System.Int32})">
            <summary>
            Ensures that there are no gaps in configuration file instance versions.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ConfigurationFiles_GetConfigurationFile(System.Nullable{System.Int32},System.String)">
            <summary>
            Gets a configuration file and all of its instances.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ConfigurationFiles_GetConfigurationFileDeployments(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets a list of all configuration file deployments based on the specified criteria.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ConfigurationFiles_GetConfigurationFileInstances(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Gets a list of all configuration file instances that match the specified criteria.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ConfigurationFiles_GetConfigurationFiles(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Gets all configuration files that match the specified criteria.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ConfigurationFiles_GetConfigurationFileVersion(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Gets a list of configuration file versions for a specified configuration file.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ConfigurationFiles_PurgeConfigurationFile(System.Nullable{System.Int32})">
            <summary>
            Purges a configuration file, including all previous versions of all instances and deployment history.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ConfigurationFiles_PurgeConfigurationFileInstance(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Purges a configuration file instance, including all previous versions and deployment history.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ConfigurationFiles_UpdateConfigurationFile(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Updates metadata for an existing configuration file.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ConfigurationFiles_UpdateConfigurationFileInstance(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Updates metadata for an existing configuration file instance.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Dashboards_CreateDashboard(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Creates a dashboard
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Dashboards_CreateOrUpdateGadget(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Creates or updates a gadget in an application or system-level dashboard
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Dashboards_DeleteGadget(System.Nullable{System.Int32})">
            <summary>
            Deletes a gadget in an application or system-level dashboard
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Dashboards_GetApplications(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets an application summary for all applications in BuildMaster or a specific group of applications
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Dashboards_GetDashboard(System.Nullable{System.Int32},System.String)">
            <summary>
            Gets a dashboard.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Dashboards_GetGadget(System.Nullable{System.Int32})">
            <summary>
            Gets a gadget in an application or system-level dashboard
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Dashboards_GetGadgets(System.Nullable{System.Int32})">
            <summary>
            Gets the gadgets in a dashboard.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Dashboards_ResequenceGadget(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Changes the sequence of a gadget within a dashboard
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.DatabaseChangeScripts_AddDatabaseProvider(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Adds a database change script provider if one does not exist, or updates an existing one.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.DatabaseChangeScripts_CreateNewChangeScript(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new database change script
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.DatabaseChangeScripts_DeleteChangeScript(System.Nullable{System.Int32})">
            <summary>
            Deletes a database change script
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.DatabaseChangeScripts_DeleteDatabaseProvider(System.Nullable{System.Int32})">
            <summary>
            Deletes a database provider
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.DatabaseChangeScripts_EditChangeScript(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Updates an existing database change script
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.DatabaseChangeScripts_GetChangeScript(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the specified database change script
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.DatabaseChangeScripts_GetChangeScripts(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Gets all the database change scripts that match the specified criteria
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.DatabaseChangeScripts_GetDatabaseChangeScriptExecution(System.Nullable{System.Int32})">
            <summary>
            Gets the specified database change script execution details
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.DatabaseChangeScripts_GetDatabaseChangeScriptExecutions(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets all the database change script executions that have occurred matching the specified criteria
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.DatabaseChangeScripts_GetDatabaseProvider(System.Nullable{System.Int32})">
            <summary>
            Gets the specified database provider
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.DatabaseChangeScripts_GetDatabaseProviders(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets all the database providers that match the specified criteria.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.DatabaseChangeScripts_LogExecution(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Logs the execution of a database change script
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Environments_AddOrRemoveServer(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Associates or disassociates a server from a specified environment
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Environments_AddOrRemoveServerFromGroup(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Adds or removes a server from a specified server group
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Environments_CreateOrUpdateAutomaticRequirement(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new automatic environment promotion requirement or updates an existing one.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Environments_CreateOrUpdateEnvironment(System.Nullable{System.Int32},System.String)">
            <summary>
            Creates a new environment or updates an existing one
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Environments_CreateOrUpdateManualRequirement(System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new manual promotion requirement or updates an existing one.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Environments_CreateOrUpdateServer(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new server, or updates an existing one.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Environments_DeleteEnvironment(System.Nullable{System.Int32})">
            <summary>
            Soft deletes an environment
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Environments_DeleteServer(System.Nullable{System.Int32})">
            <summary>
            Deletes a server.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Environments_GetEnvironment(System.Nullable{System.Int32})">
            <summary>
            Gets an environment
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Environments_GetEnvironments(System.Nullable{System.Int32})">
            <summary>
            Gets the environments for a specified application, or all environments if no application is provided.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Environments_GetEnvironmentsAndServers(System.String,System.String)">
            <summary>
            Gets the a dataset containing all environments, all environment/server relations, and servers
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Environments_GetServer(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the details of a specific server including its environments and any log messages.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Environments_GetServers(System.String)">
            <summary>
            Gets all the servers in the system.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Environments_GetServersInGroup(System.Nullable{System.Int32},System.String)">
            <summary>
            Gets all the servers in a specified server group.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Environments_ResequenceEnvironment(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Resequences the specified environment by placing it where another environment is sequenced
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Environments_UndeleteEnvironment(System.Nullable{System.Int32})">
            <summary>
            Undeletes the specified environment
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Environments_UpdateEnvironmentServers(System.Nullable{System.Int32},System.String)">
            <summary>
            Assigns all server IDs passed in as a CSV to the specified environment
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Environments_UpdateServerGroupServers(System.Nullable{System.Int32},System.String)">
            <summary>
            Assigns all server IDs passed in as a CSV to the specified server group
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Environments_UpdateServerStatus(System.Nullable{System.Int32},System.String)">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.EventListeners_CreateOrUpdateEventListeners(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new event listener, or updates an existing one
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.EventListeners_DeleteEventListener(System.Nullable{System.Int32})">
            <summary>
            Deletes a EventListener from the system
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.EventListeners_GetEventListener(System.Nullable{System.Int32})">
            <summary>
            Gets a EventListener and a list of event codes that the EventListener is subscribed to
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.EventListeners_GetEventListeners(System.String)">
            <summary>
            Gets a list of EventListeners for the specified user, or all users if no user is specified
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Events_GetEventListeners(System.Nullable{System.DateTime})">
            <summary>
            Gets the EventListeners that have occurred since the date specified.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Events_GetEventOccurence(System.Nullable{System.Int32})">
            <summary>
            Get a specific event occurence along with its event details
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Events_GetEventOccurences(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets all the event occurences in the system for a specific application, or all applications, limited to a specified count if provided
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Events_GetNotifiers(System.Nullable{System.DateTime})">
            <summary>
            Gets the notifiers that have arisen since the date specified
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Executions_AppendActionLog(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Writes a log message to an action log.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Executions_BeginAction(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Initiates execution of a specific action.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Executions_BeginDeploymentPlan(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initiates execution of a specific deployment plan.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Executions_BeginDeploymentPlanActionGroup(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initiates execution of a specific deployment plan action group.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Executions_BeginExecution(System.Nullable{System.Int32})">
            <summary>
            Changes the state of an execution from Pending to Executing.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Executions_CancelExecution(System.Nullable{System.Int32})">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Executions_CompleteAction(System.Nullable{System.Int32},System.String)">
            <summary>
            Marks an action as completed.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Executions_CompleteExecution(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Marks an execution as completed.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Executions_FailExecutingPlans">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Executions_GetExecutionsPendingCancellation">
            <summary>
            Returns executions which are awaiting cancellation.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Executions_GetExecutionsToExecute">
            <summary>
            Returns executions which are ready to be started by the executer.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Executions_GetManualActionsInProgress(System.Nullable{System.Int32},System.String)">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Executions_GetManualActionsInProgressForUser(System.String,System.String)">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Executions_GetOrSetManualActionComplete(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Executions_GetVariableValues(System.Nullable{System.Int32})">
            <summary>
            Gets execution time variable values.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Executions_SetVariableValue(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Creates, updates, or deletes an execution time variable value.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ExtensionConfiguration_DeleteConfiguration(System.Nullable{System.Int32})">
            <summary>
            Deletes an extension configuration
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ExtensionConfiguration_GetConfiguration(System.String,System.String)">
            <summary>
            Gets the details of an extension configurer for extension with the specified name
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ExtensionConfiguration_GetConfigurationById(System.Nullable{System.Int32})">
            <summary>
            Gets the details of an extension configurer for extension with the specified ID
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ExtensionConfiguration_GetConfigurations(System.String)">
            <summary>
            Gets the details for all extension configurers in the system, or a specific one if specified
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.ExtensionConfiguration_SaveConfiguration(System.Nullable{System.Int32},System.String,System.String,System.String,System.String)">
            <summary>
            Creates an extension configurer in the system, or updates an existing one
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Issues_CloseIssue(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Closes a BuildMaster issue.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Issues_CreateIssue(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            Creates an issue for a release of an application.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Issues_DeleteIssue(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Deletes an issue.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Issues_GetIssue(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the specified.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Issues_GetIssues(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Gets the issues for an application, optionally filtered by release or build.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Issues_ReopenIssue(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Re-opens a BuildMaster issue.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Issues_UpdateIssue(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String)">
            <summary>
            Updates one or more properties of an issue.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.LicenseKeys_ActivateLicenseKey(System.String,System.String)">
            <summary>
            Sets the activation code for a license key.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.LicenseKeys_AddLicenseKey(System.String)">
            <summary>
            Adds a new license key.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.LicenseKeys_DeleteLicenseKey(System.String)">
            <summary>
            Deletes a license key.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.LicenseKeys_GetLicenseKeys">
            <summary>
            Gets all the license keys.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.LogMessages_AddMessage(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.LogMessages_DeleteMessages(System.Nullable{System.Int32})">
            <summary>
            Deletes one or all message from the error log
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.LogMessages_GetMessage(System.Nullable{System.Int32})">
            <summary>
            Gets a specified message from the error log
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.LogMessages_GetMessages(System.Nullable{System.Int32},System.Nullable{System.DateTime},System.String)">
            <summary>
            Gets the messages from the error log that match the specified criteria
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.LogMessages_SetReadIndicator(System.Nullable{System.Int32},System.String)">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Notifiers_CreateOrUpdateNotifier(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new notifier, or updates an existing one
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Notifiers_DeleteNotifier(System.Nullable{System.Int32})">
            <summary>
            Deletes a notifier from the system
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Notifiers_GetNotifier(System.Nullable{System.Int32})">
            <summary>
            Gets a notifier and a list of event codes that the notifier is subscribed to
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Notifiers_GetNotifiers(System.String)">
            <summary>
            Gets a list of notifiers for the specified user, or all users if no user is specified
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Plans_ChangeActionGroup(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Moves an action into a different action group.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Plans_ChangeActionGroupDeploymentPlan(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Moves a plan action group to the final position of a different deployment plan.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Plans_CloneDeploymentPlans(System.String,System.String)">
            <summary>
            Clones one or more deployment plans
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Plans_CreateDeploymentPlanActionGroup(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new action group in the specified deployment plan.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Plans_CreateOrUpdateAction(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Creates an action in the specified action group or updates an existing one.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Plans_CreateOrUpdateDeploymentPlan(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new deployment plan or changes the name of an existing deployment plan.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Plans_DeleteAction(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Deletes an action from an action group.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Plans_DeleteDeploymentPlan(System.Nullable{System.Int32})">
            <summary>
            Deletes a deployment plan.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Plans_DeleteDeploymentPlanActionGroup(System.Nullable{System.Int32})">
            <summary>
            Deletes the specified action group.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Plans_GetAction(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the details of the specified action.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Plans_GetActionGroup(System.Nullable{System.Int32})">
            <summary>
            Gets the details of the specified plan, and all the actions associated with the plan.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Plans_GetActionGroups">
            <summary>
            Gets all action groups.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Plans_GetDeploymentPlan(System.Nullable{System.Int32},System.String)">
            <summary>
            Returns action groups and actions for a deployment plan.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Plans_GetDeploymentPlanActionGroup(System.Nullable{System.Int32})">
            <summary>
            Gets the details of the specified plan, and all the actions associated with the plan.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Plans_GetDeploymentPlans(System.String)">
            <summary>
            Returns the deployment plans in the system.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Plans_GetGlobalDeploymentPlans">
            <summary>
            Returns named deployment plans and optionally plans orphaned.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Plans_GetMostCommonActions(System.Nullable{System.Int32})">
            <summary>
            Returns the most commonly used actions in the system.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Plans_ResequenceAction(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Changes the sequence of an action within a plan.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Plans_ResequenceActionGroup(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Changes the sequence of a deployment plan action group.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Plans_UpdateActionGroup(System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Updates the specified action group.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Plans_UpdateDeploymentPlanActionGroup(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Updates the specified deployment plan action group.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Promotions_AddApproval(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Adds an approval for a promotion.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Promotions_CreateOrUpdateRequirement(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Adds a requirement for a promotion.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Promotions_DeleteApproval(System.Nullable{System.Int32})">
            <summary>
            Deletes an approval for a promotion.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Promotions_DeleteRequirement(System.Nullable{System.Int32})">
            <summary>
            Deletes a promotion requirement.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Promotions_GetApprovalsReceived(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets all requirements and approvals received for the specified promotion.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Promotions_GetRequirement(System.Nullable{System.Int32})">
            <summary>
            Gets the specified promotion requirement.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Promotions_GetRequirements(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets all requirements for the specified promotion.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Promotions_GetRequirementsToVerify(System.Nullable{System.Int32})">
            <summary>
            Gets all requirements that need to be verified.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Promotions_GetScheduled(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Gets scheduled promotions, optionally filtered by promotion and date.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Promotions_InvalidateApprovals(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Deletes received approvals for a pending promotion.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Promotions_SchedulePromotion(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Schedules a promotion or removes a previously scheduled promotion.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Promotions_SetAutomaticRequirementStatus(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Records the status of an automatic promotion requirement.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Providers_CreateOrUpdateProvider(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new provider or updates an existing one.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Providers_DeleteProvider(System.Nullable{System.Int32})">
            <summary>
            Deletes the specified provider
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Providers_GetProvider(System.Nullable{System.Int32})">
            <summary>
            Gets the details of the specified provider
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Providers_GetProviders(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets a list of providers in the system based on the specified criteria
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Releases_CancelRelease(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Cancels the specified release
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Releases_CreateOrUpdateRelease(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.String,System.String,System.String)">
            <summary>
            Creates a new release or updates an existing one.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Releases_CreateOrUpdateReleaseNote(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Creates a new release note, or updates an existing one
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Releases_DeleteReleaseNote(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Deletes a release note from the system
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Releases_GetBuildExecutions(System.Nullable{System.Int32},System.String)">
            <summary>
            Gets the list of build executions for the specified release
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Releases_GetDependentReleases(System.Nullable{System.Int32},System.String)">
            <summary>
            Gets all releases with referenced deployables from a specified release
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Releases_GetNextReleaseNumber(System.Nullable{System.Int32},System.String)">
            <summary>
            Gets the next release number.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Releases_GetRelease(System.Nullable{System.Int32},System.String)">
            <summary>
            Gets the details of a specified release, the deployables associated with the release, and the configuration file versions associated with the release.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Releases_GetReleaseDeployables(System.Nullable{System.Int32})">
            <summary>
            Gets the set of deployables associated with any release for an application
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Releases_GetReleaseNote(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Gets a release note from the system
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Releases_GetReleaseNotes(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Gets the release notes that match the specified criteria
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Releases_GetReleases(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Gets a list of releases that match the specified criteria
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Releases_GetRequiredPromotions(System.Nullable{System.Int32},System.String)">
            <summary>
            Gets a list of the promotions that are required for the specified release
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Releases_GetSortableReleaseNumber(System.Nullable{System.Int32},System.String,System.Nullable{System.Decimal})">
            <summary>
            Gets the sortable release number for a release.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Releases_PurgeReleaseData(System.Nullable{System.Int32},System.String)">
            <summary>
            Purges an entire release and all associated data from the system.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Releases_ReleaseExists(System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Determines whether a release already exists, and also whether a newer release of an application exists
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Releases_ResequenceRelease(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Resequences the specified release by placing it where another release is sequenced
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Releases_SetConfigurationFileVersion(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Sets the configuration file version for the specified release.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Releases_UnCancelRelease(System.Nullable{System.Int32},System.String)">
            <summary>
            Uncancels a previously cancelled release
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.RetentionPolicies_BeginPurge(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Marks the start of a new purge.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.RetentionPolicies_CreateOrUpdateRetentionPolicy(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Creates or updates a retention policy.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.RetentionPolicies_DeleteRetentionPolicy(System.Nullable{System.Int32})">
            <summary>
            Deletes a retention policy.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.RetentionPolicies_EndPurge(System.Nullable{System.Int32},System.Byte[])">
            <summary>
            Marks the end of a purge.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.RetentionPolicies_GetArtifactsToPurge(System.Nullable{System.Int32})">
            <summary>
            Gets the artifacts for the specified retention policy that can be purged.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.RetentionPolicies_GetBuildCount(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the total number of builds in the specified scope.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.RetentionPolicies_GetBuildsToPurge(System.Nullable{System.Int32})">
            <summary>
            Gets the builds for the specified retention policy that can be purged.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.RetentionPolicies_GetBuildsWithLogsToPurge(System.Nullable{System.Int32})">
            <summary>
            Gets only the builds that have logs remaining for the specified retention policy that can be purged.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.RetentionPolicies_GetPurgeHistory(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the purge history for one or all retention policies.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.RetentionPolicies_GetPurgeLog(System.Nullable{System.Int32})">
            <summary>
            Gets the specified purge history log.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.RetentionPolicies_GetReleaseCount(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the total number of releases in the specified scope.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.RetentionPolicies_GetReleasesToPurge(System.Nullable{System.Int32})">
            <summary>
            Gets the releases for the specified retention policy that can be purged.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.RetentionPolicies_GetRetentionPolicies(System.String)">
            <summary>
            Gets all of the retention policies.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.RetentionPolicies_GetRetentionPolicy(System.Nullable{System.Int32})">
            <summary>
            Gets the specified retention policy.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.RetentionPolicies_PurgeNow(System.Nullable{System.Int32})">
            <summary>
            Marks a retention policy as ready to run immediately.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Scripts_CreateOrUpdateParameter(System.Nullable{System.Int32},System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new script parameter or updates an existing one.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Scripts_CreateOrUpdateScript(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new script or updates an existing one.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Scripts_CreateVersion(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Byte[])">
            <summary>
            Creates a new version of a script.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Scripts_DeleteParameter(System.Nullable{System.Int32},System.String)">
            <summary>
            Creates a new script parameter or updates an existing one.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Scripts_DeleteScript(System.Nullable{System.Int32})">
            <summary>
            Permanently deletes a script.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Scripts_GetScript(System.Nullable{System.Int32})">
            <summary>
            Gets a script and all of its associated information.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Scripts_GetScripts(System.String,System.String)">
            <summary>
            Gets all of the scripts in the system, optionally filtered by type code.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Scripts_GetScriptTypeUsage">
            <summary>
            Gets usage data for the script types in the database.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Security_AddNamedUser(System.String,System.String)">
            <summary>
            Assigns the specified user as a named user with the specified user class type
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Security_AddPrivilege(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Grants or denies the specified principal the ability to perform a certain role
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Security_CreateOrUpdateRole(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Creates a new role defined by the specified tasks
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Security_DeleteRole(System.Nullable{System.Int32})">
            <summary>
            Deletes the specified role from the system
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Security_GetNamedUser(System.String)">
            <summary>
            Gets the specified named user
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Security_GetNamedUsers">
            <summary>
            Gets a list of the named users in the system
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Security_GetOrAddAnonymousRole(System.String,System.Nullable{System.Int32})">
            <summary>
            Gets an anonymous role containing the specified tasks, creating one if necessary.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Security_GetPrivileges(System.Nullable{System.Int32},System.String)">
            <summary>
            Gets a list of privileges assigned in the system
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Security_GetRole(System.Nullable{System.Int32})">
            <summary>
            Gets the specified role, along with all the tasks that comprise the role.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Security_GetRoles(System.String)">
            <summary>
            Gets all the roles in the system, along with all the tasks comprising each role.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Security_GetTasks">
            <summary>
            Gets all of the tasks in the system.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Security_GetUserClassCounts">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Security_GetUserPrivileges(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Gets the list of privileges specifically assigned to a user or any specified groups
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Security_IsAuthorizedForAnyTask(System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Determines whether or not the specified user with specified groups has authorized to perform a task
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Security_IsAuthorizedForTask(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Determines whether or not the specified user with specified groups has authorized to perform a task.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Security_IsAuthorizedForTaskBatch(System.Nullable{System.Int32},System.String,System.String,System.String,System.String)">
            <summary>
            Determines whether or not the specified user with specified groups has authorized to perform the specified tasks.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Security_RemoveNamedUser(System.String)">
            <summary>
            Removes the specified user as a named user
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Security_RemovePrivilege(System.Nullable{System.Int32})">
            <summary>
            Deletes a privilege from the system.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Security_UpdateUserClassType(System.String,System.String)">
            <summary>
            Updates the user class type of the specified user
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Security_UserIsNamed(System.String,System.String)">
            <summary>
            Determines whether or not a user is a named user in the system
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.UserConfiguration_GetUserConfiguration(System.String)">
            <summary>
            Gets the a complete list of user configuration settings
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.UserConfiguration_GetValue(System.String,System.String,System.String)">
            <summary>
            Gets the specified user configuration value
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.UserConfiguration_SetValue(System.String,System.String,System.String)">
            <summary>
            Sets a user configuration value
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Users_CreateOrUpdateGroup(System.String,System.String)">
            <summary>
            Creates a new user group in the system
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Users_CreateOrUpdateUser(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new user in the system or updates an existing one.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Users_DeleteGroup(System.String)">
            <summary>
            Deletes a user group from the system, but does not delete the users who belong to the group
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Users_DeleteUser(System.String)">
            <summary>
            Deletes a user from the system
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Users_GetGroups">
            <summary>
            Gets a list of user groups in the system
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Users_GetUser(System.String)">
            <summary>
            Gets the details of the specified user, and a list of all the groups the user belongs to
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Users_GetUsers">
            <summary>
            Gets all the users in the system, along with all group membership information.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Users_GetUsersInGroup(System.String)">
            <summary>
            Gets a list of users in the specified group
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Users_SearchGroups(System.String,System.String)">
            <summary>
            Gets a specific group by name, or if a wildcard search is performed, a group whose name starts with the specified name
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Users_SearchUsers(System.String,System.String,System.String,System.String)">
            <summary>
            Gets the specified user, or searchs for a user whose name starts with any of the specified criteria
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Users_SetPassword(System.String,System.String,System.String)">
            <summary>
            Stored procedure for internal use only.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Users_ValidateLogin(System.String,System.String,System.String)">
            <summary>
            Validates the password of a specified user
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Variables_CreateOrUpdateVariableDeclaration(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new variable declaration or updates an existing one
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Variables_CreateOrUpdateVariableDefinition(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Creates a new variable definition or updates an existing one
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Variables_DeleteVariableDeclaration(System.Nullable{System.Int32})">
            <summary>
            Deletes a variable declaration
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Variables_DeleteVariableDefinition(System.Nullable{System.Int32})">
            <summary>
            Deletes a variable definition
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Variables_GetSystemVariableDefinitions">
            <summary>
            Gets the variable definitions for system-scoped variables.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Variables_GetVariableDeclaration(System.Nullable{System.Int32})">
            <summary>
            Gets the variable declaration in the system that has the specified ID.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Variables_GetVariableDeclarations(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the variable declarations in the system that are defined in the specified scope
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Variables_GetVariableDefinition(System.Nullable{System.Int32})">
            <summary>
            Gets the specified variable definition.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Variables_GetVariableDefinitions(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Gets the variable definitions in the system that are defined in the specified scope
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Variables_GetVariableValues(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Gets the variable values for the specified scope.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Workflows_AssignGlobalWorkflowToApplication(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Assigns a global workflow to an application.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Workflows_CloneWorkflow(System.String,System.String)">
            <summary>
            Clones one or more workflows.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Workflows_CreateOrUpdateWorkflow(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new workflow or updates an existing one.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Workflows_CreateOrUpdateWorkflowStep(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new workflow step or updates an existing one.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Workflows_DeleteApplicationWorkflow(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Disassociates a global workflow from an application.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Workflows_DeleteStep(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Deletes a workflow step.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Workflows_DeleteWorkflow(System.Nullable{System.Int32})">
            <summary>
            Deletes a workflow step.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Workflows_GetGlobalWorkflows(System.String)">
            <summary>
            Gets a list of global workflows and their steps.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Workflows_GetWorkflow(System.Nullable{System.Int32})">
            <summary>
            Gets a specific workflow and all of its workflow steps.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Workflows_GetWorkflows(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Gets a list of all workflows, optionally filtered by application.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Workflows_GetWorkflowStep(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the specified workflow step.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Workflows_MakeGlobal(System.Nullable{System.Int32})">
            <summary>
            Moves a workflow step to a new sequence.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Workflows_MoveApproval(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Moves an approval up or down in sequence.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Workflows_MoveWorkflowStep(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Moves a workflow step to a new sequence.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Data.StoredProcs.Workflows_SetBuildStep(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Sets the build deployment plan or build importer for a workflow.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Diagnostics.DatabaseErrorMessenger">
            <summary>
            Implementation of <see cref="T:Inedo.Diagnostics.IMessenger"/> that writes to the BuildMaster event log.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Diagnostics.DatabaseErrorMessenger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Diagnostics.DatabaseErrorMessenger"/> class.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Events.BuildMasterEvent">
            <summary>
            Base class for BuildMaster event details.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Events.BuildMasterEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Events.BuildMasterEvent"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Events.BuildMasterEvent.GetBuildMasterEvents">
            <summary>
            Returns all of the BuildMaster events.
            </summary>
            <returns>Array containing all of the BuildMaster events.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Events.BuildMasterEvent.GetWorkflowOnlyBuildMasterEvents">
            <summary>
            Returns all of the workflow-only BuildMaster events.
            </summary>
            <returns>Array containing all of the workflow-only BuildMaster events.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Events.BuildMasterEvent.GetDetail(System.String)">
            <summary>
            Returns a specific detail about the event occurrence.
            </summary>
            <param name="keyName">Name of the key.</param>
            <returns>The value of hte specified detail.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyName"/> is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">Event details have not been initialized.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="keyName"/> does not refer to a valid detail.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Events.BuildMasterEvent.GetDetails">
            <summary>
            Returns all of the details of the event occurrence.
            </summary>
            <returns>All of the details of the event occurrence.</returns>
            <exception cref="T:System.InvalidOperationException">Event details have not been initialized.</exception>
        </member>
        <member name="P:Inedo.BuildMaster.Events.BuildMasterEvent.ApplicationId">
            <summary>
            Gets the application ID.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Events.BuildMasterEvent.EventCode">
            <summary>
            Gets the unique event code.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Events.BuildMasterEvent.EventDescription">
            <summary>
            Gets a description of the event type.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Events.EventPropertiesAttribute">
            <summary>
            Event properties
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Events.EventPropertiesAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Events.EventPropertiesAttribute"/> class.
            </summary>
            <param name="eventCode">The event code.</param>
            <param name="eventDescription">The event description.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Events.EventPropertiesAttribute.EventCode">
            <summary>
            Gets the event code.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Events.EventPropertiesAttribute.EventDescription">
            <summary>
            Gets the event description.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.ActionBase">
            <summary>
            Represents the base class for all Actions.
            </summary>
            <remarks>
            It is normally not necessary to inherit <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionBase"/> directly. A direct subclass
            will only be able to execute on the BuildMaster server and not on an Agent without
            explicit remoting calls. In most cases, you should inherit <see cref="T:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase"/> or
            <see cref="T:Inedo.BuildMaster.Extensibility.Actions.AgentBasedActionBase"/> instead.
            </remarks>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.IExtensible">
            <summary>
            A marker interface that indicates the target class is designed for
            run-time extensibility.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.ILogger">
            <summary>
            Provides logging for some kind of operation.
            </summary>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.LoggerExtensions"/>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.ILogger.Log(Inedo.Diagnostics.MessageLevel,System.String)">
            <summary>
            Writes the specified message to the corresponding log.
            </summary>
            <param name="logLevel">Log level of the message.</param>
            <param name="message">Message to log.</param>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.LoggerExtensions"/>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.Execute">
            <summary>
            Executes the action.
            </summary>
            <remarks>
            This method is always called on the BuildMaster server.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.GetActionDescription">
            <summary>
            Returns a description of the current configuration of the action.
            </summary>
            <returns>Description of the action's current configuration.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the action.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the action.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.HasConfigurerSettings">
            <summary>
            Returns a value indicating whether the action uses one or more settings in its
            extension configurer.
            </summary>
            <returns>True if the action uses at least one configurer settings; otherwise false.</returns>
            <remarks>
            Unless overridden by an action, this method returns true if the extension has a configurer
            regardless of whether it actually uses the configurer.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.IsConfigurerSettingRequired">
            <summary>
            Returns a value indicating whether the extension's configurer currently needs to be
            configured.
            </summary>
            <returns>True if configurer requires configuration; otherwise false.</returns>
            <remarks>
            Unless overridden by an action, this method always returns false.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.Log(Inedo.Diagnostics.MessageLevel,System.String)">
            <summary>
            Writes the specified message to the Action's log.
            </summary>
            <param name="logLevel">Log level of the message.</param>
            <param name="message">Message to log.</param>
            <remarks>
            Instead of calling <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.Log(Inedo.Diagnostics.MessageLevel,System.String)"/> directly, it is often more convenient
            to call the more specific <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.LogDebug(System.String,System.Object[])"/>,
            <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.LogError(System.String,System.Object[])"/>, <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.LogInformation(System.String,System.Object[])"/>,
            or <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.LogWarning(System.String,System.Object[])"/> method.
            </remarks>
            <seealso cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.LogDebug(System.String,System.Object[])"/>
            <seealso cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.LogInformation(System.String,System.Object[])"/>
            <seealso cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.LogWarning(System.String,System.Object[])"/>
            <seealso cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.LogError(System.String,System.Object[])"/>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.LogDebug(System.String)">
            <summary>
            Logs the specified message to the Action's log with a Debug log level.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.LogDebug(System.String,System.Object[])">
            <summary>
            Logs the specified message to the Action's log with a Debug log level.
            </summary>
            <param name="messageFmt">Message to log as a composite format string.</param>
            <param name="args">Arguments for the composite format string.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.LogError(System.String)">
            <summary>
            Logs the specified message to the Action's log with an Error log level.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.LogError(System.String,System.Object[])">
            <summary>
            Logs the specified message to the Action's log with an Error log level.
            </summary>
            <param name="messageFmt">Message to log as a composite format string.</param>
            <param name="args">Arguments for the composite format string.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.LogInformation(System.String)">
            <summary>
            Logs the specified message to the Action's log with an Information log level.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.LogInformation(System.String,System.Object[])">
            <summary>
            Logs the specified message to the Action's log with an Information log level.
            </summary>
            <param name="messageFmt">Message to log as a composite format string.</param>
            <param name="args">Arguments for the composite format string.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.LogWarning(System.String)">
            <summary>
            Logs the specified message to the Action's log with a Warning log level.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.LogWarning(System.String,System.Object[])">
            <summary>
            Logs the specified message to the Action's log with a Warning log level.
            </summary>
            <param name="messageFmt">Message to log as a composite format string.</param>
            <param name="args">Arguments for the composite format string.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.GetExtensionConfigurer">
            <summary>
            Gets the <see cref="T:Inedo.BuildMaster.Extensibility.Configurers.Extension.ExtensionConfigurerBase"/> associated with the action.
            </summary>
            <returns>The extension configurer.</returns>
            <remarks>
                <para>
                    When an <see cref="T:Inedo.BuildMaster.Extensibility.Configurers.Extension.ExtensionConfigurerBase"/> is associated with this assembly, 
                    this will return the first item below that is available:
                </para>
                <list type="number">
                    <item>
                        <description>The configuration associated with the profile selected in the deployment plan.</description>
                    </item>
                    <item>
                        <description>The global configuration.</description>
                    </item>
                    <item>
                        <description>An instance with default values.</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.ThrowIfCanceledOrTimeoutExpired">
            <summary>
            Throws a <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionTimeoutException"/> if the action has been executing for at least
            <see cref="P:Timeout"/> seconds or throws a <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionCanceledException"/> if the
            action has been canceled.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.OnBeforeExecute(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Inedo.BuildMaster.Extensibility.Actions.ActionBase.BeforeExecute"/> event.
            </summary>
            <param name="e">Unused <see cref="T:System.EventArgs"/> instance.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.OnLogReceived(Inedo.BuildMaster.Extensibility.Actions.LogReceivedEventArgs)">
            <summary>
            Raises the <see cref="E:Inedo.BuildMaster.Extensibility.Actions.ActionBase.LogReceived"/> event.
            </summary>
            <param name="e">Contains information about the log message.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.OnAfterExecute(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Inedo.BuildMaster.Extensibility.Actions.ActionBase.AfterExecute"/> event.
            </summary>
            <param name="e">Unused <see cref="T:System.EventArgs"/> instance.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.CreateActionLogMessageDelegator">
            <summary>
            Creates the action log message delegator used to allow external resources to write to the action log.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.ActionBase.Timeout">
            <summary>
            Gets the number of seconds the action should execute before failing.
            </summary>
            <remarks>
            When 0, timeout is infinite.
            </remarks>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.ActionBase.IsExecuting">
            <summary>
            Gets a value indicating whether the Action is in the primary stage
            (i.e. <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.Execute"/>) of execution.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.ActionBase.ResumeNextOnError">
            <summary>
            Gets a value indicating whether the plan should continue executing even if this Action
            throws an exception or logs an error.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.ActionBase.LogErrorsAsWarnings">
            <summary>
            Gets a value indicating whether errors will be logged as warnings.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.ActionBase.Context">
            <summary>
            Gets the action context.
            </summary>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.Actions.ActionBase.BeforeExecute">
            <summary>
            Raised before the <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.Execute"/> method is invoked.
            </summary>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.Actions.ActionBase.LogReceived">
            <summary>
            Raised when a log message has been received.
            </summary>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.Actions.ActionBase.AfterExecute">
            <summary>
            Raised after the <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.Execute"/> method has returned.
            </summary>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.Actions.ActionBase.MessageLogged">
            <summary>
            Occurs when a message is logged.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.ActionCanceledException">
            <summary>
            Thrown when a <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionBase"/> has been canceled.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionCanceledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionCanceledException"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionCanceledException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.ActionExecuterBase">
            <summary>
            Helper class used to execute an action.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionExecuterBase.#ctor(Inedo.BuildMaster.Extensibility.Actions.ActionBase,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionExecuterBase"/> class.
            </summary>
            <param name="action">The action.</param>
            <param name="extensionConfigurationId">The extension configuration id.</param>
            <exception cref="T:System.ArgumentNullException">action</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionExecuterBase.Log(Inedo.Diagnostics.MessageLevel,System.String)">
            <summary>
            Writes the specified message to the action's log.
            </summary>
            <param name="logLevel">Log level of the message.</param>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionExecuterBase.GetExecutionContext">
            <summary>
            When implemented in a derived class, creates the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.IActionExecutionContext"/> used in the
            <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionExecuterBase.ExecuteAction(System.Boolean,System.Boolean)"/> method.
            </summary>
            <returns>Instance of <see cref="T:Inedo.BuildMaster.Extensibility.Actions.IActionExecutionContext"/>.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionExecuterBase.GetExtensionConfigurer">
            <summary>
            Returns the <see cref="T:Inedo.BuildMaster.Extensibility.Configurers.Extension.ExtensionConfigurerBase"/> used internally by
            the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionBase"/> when executed within the <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionExecuterBase.ExecuteAction(System.Boolean,System.Boolean)"/> method, or null
            if <see cref="T:Inedo.BuildMaster.Extensibility.Configurers.Extension.ExtensionConfigurerBase"/> is used by the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionBase"/>.
            </summary>
            <returns>Instance of <see cref="T:Inedo.BuildMaster.Extensibility.Configurers.Extension.ExtensionConfigurerBase"/>, or null.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionExecuterBase.ExecuteAction(System.Boolean,System.Boolean)">
            <summary>
            Executes the action.
            </summary>
            <param name="resumeOnError">Value indicating whether exeuction should continue if there is an error.</param>
            <param name="logErrorsAsWarnings">Value indicating whether errors should be logged as warnings.</param>
            <returns>Value indicating whether the execution was successful.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionExecuterBase.Dispose">
            <summary>
            Releases resources used by this instance.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionExecuterBase.Dispose(System.Boolean)">
            <summary>
            Releases resources used by this instance.
            </summary>
            <param name="disposing">Value indicating whether managed resources should be disposed.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.ActionExecuterBase.Action">
            <summary>
            Gets the underlying action associated with the executer.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.ActionExecuterBase.ExtensionConfigurationId">
            <summary>
            Gets the extension configuration id.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.ActionDescription">
            <summary>
            Describes the current configuration of an <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionBase"/>.
            </summary>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionBase"/>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.ExtensionComponentDescription">
            <summary>
            Describes the current configuration of an extension component.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.ExtensionComponentDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.ExtensionComponentDescription"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.ExtensionComponentDescription.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.ExtensionComponentDescription"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.ExtensionComponentDescription.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.ExtensionComponentDescription"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.ExtensionComponentDescription.AppendContent(System.Object)">
            <summary>
            Appends content to the description.
            </summary>
            <param name="content">The content to append.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.ExtensionComponentDescription.AppendContent(System.Object[])">
            <summary>
            Appends content to the description.
            </summary>
            <param name="content">The content to append.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.ExtensionComponentDescription.ToHtml(System.String)">
            <summary>
            Returns a string containing an HTML representation of the description.
            </summary>
            <param name="variableSupportCode">Indicates how variables should be rendered. See <see cref="T:Inedo.BuildMaster.Data.Domains.VariableSupportCodes"/>.</param>
            <returns>String containing an HTML representation of the description.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.ExtensionComponentDescription.ToString">
            <summary>
            Returns a string containing an undecorated description.
            </summary>
            <returns>String containing an undecorated description.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.ExtensionComponentDescription.IsCompatible(System.Text.RegularExpressions.Match,System.Text.RegularExpressions.Match)">
            <summary>
            Returns a value indicating whether an old variable usage is compatible with
            a new variable usage in the same string.
            </summary>
            <param name="oldMatch">The old variable match.</param>
            <param name="newMatch">The new variable match.</param>
            <returns>True if matches are compatible; otherwise false.</returns>
            <remarks>
            A variable is compatible if it does not overlap with another match.
            <para>
            Compatible: %var1% $var2, $var2 %var1%
            </para>
            <para>
            Incompatible: %var$var2%, ${var%}var1%
            </para>
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionDescription.#ctor(Inedo.BuildMaster.Extensibility.Actions.ShortActionDescription,Inedo.BuildMaster.Extensibility.Actions.LongActionDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionDescription"/> class.
            </summary>
            <param name="shortDescription">The short description or title of the action.</param>
            <param name="longDescription">The long description or details of the action.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionDescription.#ctor(Inedo.BuildMaster.Extensibility.Actions.ShortActionDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionDescription"/> class.
            </summary>
            <param name="shortDescription">The short description or title of the action.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionDescription.#ctor(Inedo.BuildMaster.Extensibility.Actions.LongActionDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionDescription"/> class.
            </summary>
            <param name="longDescription">The long description or details of the action.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionDescription.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.ActionDescription.ShortDescription">
            <summary>
            Gets the short description or title of the action.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.ActionDescription.LongDescription">
            <summary>
            Gets the long description or details of the action.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.ActionDescriptionBase">
            <summary>
            Base class for a collection of action description nodes.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionDescriptionBase.AppendContent(System.Object)">
            <summary>
            Appends content to the description.
            </summary>
            <param name="content">The content to append.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionDescriptionBase.AppendContent(System.Object[])">
            <summary>
            Appends content to the description.
            </summary>
            <param name="content">The content to append.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionDescriptionBase.ToHtml(System.String)">
            <summary>
            Returns a string containing an HTML representation of the description.
            </summary>
            <param name="variableSupportCode">Indicates how variables should be rendered. See <see cref="T:Inedo.BuildMaster.Data.Domains.VariableSupportCodes"/>.</param>
            <returns>String containing an HTML representation of the description.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionDescriptionBase.ToString">
            <summary>
            Returns a string containing an undecorated description.
            </summary>
            <returns>String containing an undecorated description.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.ShortActionDescription">
            <summary>
            Contains the short description or title of an action.
            </summary>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionDescription"/>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ShortActionDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ShortActionDescription"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ShortActionDescription.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ShortActionDescription"/> class.
            </summary>
            <param name="content">The description content.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ShortActionDescription.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ShortActionDescription"/> class.
            </summary>
            <param name="content">The description content.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.LongActionDescription">
            <summary>
            Contains the long description or details of an action.
            </summary>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionDescription"/>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.LongActionDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.LongActionDescription"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.LongActionDescription.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.LongActionDescription"/> class.
            </summary>
            <param name="content">The description content.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.LongActionDescription.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.LongActionDescription"/> class.
            </summary>
            <param name="content">The description content.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.ApplicationHilite">
            <summary>
            Represents a highlighted BuildMaster application.
            </summary>
            <remarks>
            This is a shim class that will be removed in SDK5
            </remarks>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.ApplicationHilite">
            <summary>
            Represents a highlighted BuildMaster application.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.ExtensionComponentDescriptionNode">
            <summary>
            Represents a node in an extension description description tree.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.ExtensionComponentDescriptionNode.AppendContent(System.Object)">
            <summary>
            Appends content to the description.
            </summary>
            <param name="content">The content to append.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.ExtensionComponentDescriptionNode.AppendContent(System.Object[])">
            <summary>
            Appends content to the description.
            </summary>
            <param name="content">The content to append.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.ApplicationHilite.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.ApplicationHilite"/> class.
            </summary>
            <param name="applicationId">The application ID.</param>
            <param name="applicationName">The application name.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.ApplicationHilite.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.ApplicationHilite"/> class.
            </summary>
            <param name="applicationId">The application ID.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.ApplicationHilite.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.ApplicationHilite"/> class.
            </summary>
            <param name="applicationName">The application name.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ApplicationHilite.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ApplicationHilite"/> class.
            </summary>
            <param name="applicationId">The application ID.</param>
            <param name="applicationName">The application name.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ApplicationHilite.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ApplicationHilite"/> class.
            </summary>
            <param name="applicationId">The application ID.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ApplicationHilite.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ApplicationHilite"/> class.
            </summary>
            <param name="applicationName">The application name.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.DirectoryHilite">
            <summary>
            Represents a highlighted directory that is relative to a special path.
            </summary>
            <remarks>
            This is a shim class that will be removed in SDK5
            </remarks>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.DirectoryHilite">
            <summary>
            Represents a highlighted directory that is relative to a special path.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Hilite">
            <summary>
            Represents a highlighted region of text in an extension component description.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Hilite.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Hilite"/> class.
            </summary>
            <param name="text">The highlighted text.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.DirectoryHilite.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.DirectoryHilite"/> class.
            </summary>
            <param name="rootDirectory">The root directory. This should normally be <see cref="P:ActionBase.OverriddenSourceDirectory"/> or <see cref="P:ActionBase.OverriddenTargetDirectory"/>.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.DirectoryHilite.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.DirectoryHilite"/> class.
            </summary>
            <param name="rootDirectory">The root directory. This should normally be <see cref="P:ActionBase.OverriddenSourceDirectory"/> or <see cref="P:ActionBase.OverriddenTargetDirectory"/>.</param>
            <param name="path">The relative path.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.DirectoryHilite.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.DirectoryHilite"/> class.
            </summary>
            <param name="rootDirectory">The root directory. This should normally be <see cref="P:ActionBase.OverriddenSourceDirectory"/> or <see cref="P:ActionBase.OverriddenTargetDirectory"/>.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.DirectoryHilite.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.DirectoryHilite"/> class.
            </summary>
            <param name="rootDirectory">The root directory. This should normally be <see cref="P:ActionBase.OverriddenSourceDirectory"/> or <see cref="P:ActionBase.OverriddenTargetDirectory"/>.</param>
            <param name="path">The relative path.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.ListHilite">
            <summary>
            Represents a highlighted region of a texts list in an action description.
            </summary>
            <remarks>
            This is a shim class that will be removed in SDK5
            </remarks>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.ListHilite">
            <summary>
            Represents a highlighted region of a texts list in an extension component description.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.ListHilite.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.ListHilite"/> class.
            </summary>
            <param name="texts">The texts.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ListHilite.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ListHilite"/> class.
            </summary>
            <param name="texts">The texts.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.Hilite">
            <summary>
            Represents a highlighted region of text in an action description.
            </summary>
            <remarks>
            This is a shim class that will be removed in SDK5
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.Hilite.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.Hilite"/> class.
            </summary>
            <param name="text">The highlighted text.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.DualAgentBasedActionBase">
            <summary>
            The base class for actions which require a source and target agent.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.DualAgentBasedActionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.DualAgentBasedActionBase"/> class.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.DualAgentBasedActionBase.Context">
            <summary>
            Gets the action context.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.IActionExecutionContext">
            <summary>
            Provides information about the current execution of an action.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IActionExecutionContext.ExecutionId">
            <summary>
            Gets the ID of the execution in which the plan is running.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IActionExecutionContext.ExecutionPlanActionId">
            <summary>
            Gets the ID of the plan that the Action is executing in.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IActionExecutionContext.ApplicationId">
            <summary>
            Gets the ID of the application which contains the executing plan.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IActionExecutionContext.ApplicationGroupId">
            <summary>
            Gets the ID of the application group which contains the executing plan.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IActionExecutionContext.DeployableId">
            <summary>
            Gets the ID of the deployable associated with the executing plan.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IActionExecutionContext.EnvironmentId">
            <summary>
            Gets the ID of the environment associated with the executing plan.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IActionExecutionContext.ReleaseNumber">
            <summary>
            Gets the release number of the application which
            contains the executing plan.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IActionExecutionContext.BuildNumber">
            <summary>
            Gets the build number of the application which
            contains the executing plan.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IActionExecutionContext.NumericReleaseNumber">
            <summary>
            Gets the numeric representation of the release number of
            the application which contains the executing plan.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IActionExecutionContext.Variables">
            <summary>
            Gets a collection of variable names and values.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IActionExecutionContext.CancellationToken">
            <summary>
            Gets the action cancellation token.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.ActionPropertiesAttribute">
            <summary>
            Describes what an action is and does for an end-user.
            </summary>
            <remarks>
            This attribute must be applied to an Action for it to be usable in BuildMaster.
            </remarks>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.ExtensionPropertiesAttribute">
            <summary>
            Describes what an extension is and does.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.ExtensionPropertiesAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.ExtensionPropertiesAttribute"/> class.
            </summary>
            <param name="name">The name of the extension.</param>
            <param name="description">The description of the extension.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.ExtensionPropertiesAttribute.Name">
            <summary>
            Gets the user-friendly name of the extension.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.ExtensionPropertiesAttribute.Description">
            <summary>
            Gets the user-friendly description of the extension.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.ExtensionPropertiesAttribute.IconResource">
            <summary>
            Gets or sets the name of a resource in the extension's assembly that
            contains a PNG-format icon.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionPropertiesAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionPropertiesAttribute"/> class.
            </summary>
            <param name="name">The friendly name of the Action.</param>
            <param name="description">The description of the Action.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionPropertiesAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionPropertiesAttribute"/> class.
            </summary>
            <param name="name">The friendly name of the Action.</param>
            <param name="description">The description of the Action.</param>
            <param name="category">The category which will contain the Action in the user-interface.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.ActionPropertiesAttribute.Category">
            <summary>
            Gets or sets the user-friendly category name of the action.
            </summary>
            <remarks>
            There are several standard categories, including:
            <list type="bullet">
            <item>Files</item>
            <item>Source Control</item>
            <item>IssueTrackerIssue Tracking</item>
            <item>General</item>
            </list>
            Generally speaking, actions based on a specific technology (such 
            as SQL Server or .NET) should be placed in their own category.
            </remarks>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.ActionPropertiesAttribute.DefaultToLocalServer">
            <summary>
            Gets or sets a value indicating whether the Action
            should default to executing on the local server.
            </summary>
            <remarks>
            This only applies to Actions deriving from <see cref="T:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase"/>.
            </remarks>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.ActionTimeoutException">
            <summary>
            Thrown when a <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionBase"/> has timed out.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionTimeoutException"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionTimeoutException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.AgentBasedActionBase">
            <summary>
            The base class for actions which execute on an agent.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.AgentBasedActionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.AgentBasedActionBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.AgentBasedActionBase.LogProcessErrorData(System.String)">
            <summary>
            Invoked when data is written to the process's Standard Error output.
            </summary>
            <param name="data">Data written to Standard Error.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.AgentBasedActionBase.LogProcessOutputData(System.String)">
            <summary>
            Invoked when data is written to the process's Standard Out output.
            </summary>
            <param name="data">Data written to Standard Out.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.AgentBasedActionBase.ExecuteCommandLine(Inedo.BuildMaster.Extensibility.Agents.AgentProcessStartInfo)">
            <summary>
            Executes a process on the associated agent, blocking until the process terminates,
            the action is canceled, or the action timeout is reached.
            </summary>
            <param name="startInfo">Process initialization information.</param>
            <returns>Exit code of the process.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.AgentBasedActionBase.ExecuteCommandLine(System.String)">
            <summary>
            Executes a process on the associated agent, blocking until the process terminates,
            the action is canceled, or the action timeout is reached.
            </summary>
            <param name="fileName">Full path of the process to start.</param>
            <returns>Exit code of the process.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.AgentBasedActionBase.ExecuteCommandLine(System.String,System.String)">
            <summary>
            Executes a process on the associated agent, blocking until the process terminates,
            the action is canceled, or the action timeout is reached.
            </summary>
            <param name="fileName">Full path of the process to start.</param>
            <param name="arguments">Arguments to pass to the process.</param>
            <returns>Exit code of the process.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.AgentBasedActionBase.ExecuteCommandLine(System.String,System.String,System.String)">
            <summary>
            Executes a process on the associated agent, blocking until the process terminates,
            the action is canceled, or the action timeout is reached.
            </summary>
            <param name="fileName">Full path of the process to start.</param>
            <param name="arguments">Arguments to pass to the process.</param>
            <param name="workingDirectory">Initial working directory of the process. If not specified, the source directory is used.</param>
            <returns>Exit code of the process.</returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.AgentBasedActionBase.OverriddenWorkingDirectory">
            <summary>
            Gets or sets the Working Directory override.
            </summary>
            <remarks>
            When null or string.Empty, the default Working Directory is used.
            </remarks>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.AgentBasedActionBase.OverriddenSourceDirectory">
            <summary>
            Gets or sets the Source Directory override.
            </summary>
            <remarks>
            When null or string.Empty, the default Source Directory is used.
            </remarks>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.AgentBasedActionBase.OverriddenTargetDirectory">
            <summary>
            Gets or sets the Target Directory override.
            </summary>
            <remarks>
            When null or string.Empty, the default Target Directory is used.
            </remarks>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.AgentBasedActionBase.Context">
            <summary>
            Gets the action context.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.AgentBasedActionBase.LogProcessStandardErrorAsError">
            <summary>
            Gets a value indicating whether the executed process's Standard Error should be logged 
            with a <see cref="T:Inedo.Diagnostics.MessageLevel"/> of <see cref="F:Inedo.Diagnostics.MessageLevel.Error"/>
            or <see cref="F:Inedo.Diagnostics.MessageLevel.Information"/>.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.AgentBasedActionBase.AddBuildMasterVariablesAsEnvironmentVariables">
            <summary>
            Gets a value indicating whether the new process environment should contain all of the
            variables in the current execution context.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.IActionCancellationToken">
            <summary>
            Represents a token which an action uses to determine if it was canceled.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.IActionCancellationToken.ThrowIfCancellationRequested">
            <summary>
            Throws a <see cref="T:ActionCanceledException"/> if this token has had cancellation requested.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IActionCancellationToken.IsCancellationRequested">
            <summary>
            Gets a value indicating whether cancellation has been requested.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IActionCancellationToken.WaitHandle">
            <summary>
            Gets a <see cref="T:WaitHandle"/> that is signaled when the token is canceled.
            </summary>
            <remarks>
            Accessing this property causes a <see cref="T:WaitHandle"/> to be instantiated. It is preferable to only use this property when necessary.
            </remarks>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.IAgentBasedActionExecutionContext">
            <summary>
            Provides information about the current execution of an agent-based action.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IAgentBasedActionExecutionContext.ServerId">
            <summary>
            Gets the server ID which the action is executing on.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IAgentBasedActionExecutionContext.Agent">
            <summary>
            Gets the <see cref="T:Inedo.BuildMaster.Extensibility.Agents.AgentBase"/> which the action executes on.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IAgentBasedActionExecutionContext.TempDirectory">
            <summary>
            Gets the temporary directory used for file operations.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IAgentBasedActionExecutionContext.SourceDirectory">
            <summary>
            Gets the source directory used for file operations.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IAgentBasedActionExecutionContext.TargetDirectory">
            <summary>
            Gets the target directory used for file operations.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IAgentBasedActionExecutionContext.BaseWorkingDirectory">
            <summary>
            Gets the base working directory for the agent.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IAgentBasedActionExecutionContext.ApplicationDirectory">
            <summary>
            Gets the application working directory for the agent.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.IDualAgentBasedActionExecutionContext">
            <summary>
            Provides information about the current execution of a dual-agent-based action.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IDualAgentBasedActionExecutionContext.SourceServerId">
            <summary>
            Gets the source server ID.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IDualAgentBasedActionExecutionContext.TargetServerId">
            <summary>
            Gets the target server ID.
            </summary>
            <remarks>
            This may be a server group.
            </remarks>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IDualAgentBasedActionExecutionContext.SourceAgent">
            <summary>
            Gets the <see cref="T:Inedo.BuildMaster.Extensibility.Agents.AgentBase"/> for the source server.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.IssueTracking.IssueTrackingActionBase">
            <summary>
            Base class for an action that is to be used with a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackingProviderBase"/>.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.IssueTracking.IssueTrackingActionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.IssueTracking.IssueTrackingActionBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.IssueTracking.IssueTrackingActionBase.Execute">
            <summary>
            Executes the action.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.IssueTracking.IssueTrackingActionBase.ExecuteForConnection(Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase,Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionContext)">
            <summary>
            Invoked to execute the action for a <see cref="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase"/>.
            </summary>
            <param name="connection">The connection.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.IssueTracking.IssueTrackingActionBase.ExecuteForLegacyProvider(Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackingProviderBase)">
            <summary>
            Invoked to execute the action for a legacy <see cref="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackingProviderBase"/>.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.IssueTracking.IssueTrackingActionBase.ExecuteForBuildMaster">
            <summary>
            Invoked to execute the action for the BuildMaster issue tracker.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.IActionNameProvider">
            <summary>
            Represents an <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionBase"/> that can provide an alternate name once instantiated.
            </summary>
            <remarks>
            The <see cref="P:Inedo.BuildMaster.Extensibility.Actions.IActionNameProvider.ActionName"/> property will be displayed instead of the <see cref="P:Inedo.BuildMaster.Extensibility.ExtensionPropertiesAttribute.Name"/> property;
            this is entirely dependent on the consumer, and may not occur all the time.
            </remarks>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.IActionNameProvider.ActionName">
            <summary>
            Gets the name of the Action that will be displayed in BuildMaster.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator">
            <summary>
            An object that allows external resources to write to an action's log.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator.#ctor(System.Action{Inedo.Diagnostics.MessageLevel,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator"/> class.
            </summary>
            <param name="logMethod">The log method.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logMethod"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator.Log(Inedo.Diagnostics.MessageLevel,System.String)">
            <summary>
            Writes the specified message to the delegate log.
            </summary>
            <param name="logLevel">Log level of the message.</param>
            <param name="message">Message to log.</param>
            <remarks>
            Instead of calling <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator.Log(Inedo.Diagnostics.MessageLevel,System.String)"/> directly, it is often more convenient
            to call the more specific <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator.LogDebug(System.String,System.Object[])"/>,
            <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator.LogError(System.String,System.Object[])"/>, <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator.LogInformation(System.String,System.Object[])"/>,
            or <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator.LogWarning(System.String,System.Object[])"/> method.
            </remarks>
            <seealso cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator.LogDebug(System.String,System.Object[])"/>
            <seealso cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator.LogInformation(System.String,System.Object[])"/>
            <seealso cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator.LogWarning(System.String,System.Object[])"/>
            <seealso cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator.LogError(System.String,System.Object[])"/>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator.LogDebug(System.String)">
            <summary>
            Logs the specified message to the delegate log with a Debug log level.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator.LogDebug(System.String,System.Object[])">
            <summary>
            Logs the specified message to the delegate log with a Debug log level.
            </summary>
            <param name="messageFmt">Message to log as a composite format string.</param>
            <param name="args">Arguments for the composite format string.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator.LogError(System.String)">
            <summary>
            Logs the specified message to the delegate log with an Error log level.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator.LogError(System.String,System.Object[])">
            <summary>
            Logs the specified message to the delegate log with an Error log level.
            </summary>
            <param name="messageFmt">Message to log as a composite format string.</param>
            <param name="args">Arguments for the composite format string.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator.LogInformation(System.String)">
            <summary>
            Logs the specified message to the delegate log with an Information log level.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator.LogInformation(System.String,System.Object[])">
            <summary>
            Logs the specified message to the delegate log with an Information log level.
            </summary>
            <param name="messageFmt">Message to log as a composite format string.</param>
            <param name="args">Arguments for the composite format string.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator.LogWarning(System.String)">
            <summary>
            Logs the specified message to the delegate log with a Warning log level.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator.LogWarning(System.String,System.Object[])">
            <summary>
            Logs the specified message to the Action's log with a Warning log level.
            </summary>
            <param name="messageFmt">Message to log as a composite format string.</param>
            <param name="args">Arguments for the composite format string.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.LogReceivedEventArgs">
            <summary>
            Contains information about a log message.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.LogReceivedEventArgs.#ctor(System.String,Inedo.Diagnostics.MessageLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.LogReceivedEventArgs"/> class.
            </summary>
            <param name="message">The message to log.</param>
            <param name="level">The message log level.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.LogReceivedEventArgs.Message">
            <summary>
             Gets the message that was logged.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.LogReceivedEventArgs.LogLevel">
            <summary>
            Gets or sets the message log level.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.ProviderInitializedEventArgs">
            <summary>
            Contains information about a provider in a <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction"/>.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.ProviderInitializedEventArgs.Provider">
            <summary>
            Gets or sets the provider.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase">
            <summary>
            The base class for Actions that can execute remotely
            on a BuildMaster Agent.
            </summary>
            <remarks>
            Inheriting from the class will allow an Action to be executed
            on any server in the BuildMaster UI. For a more specialized
            class which wraps command-line execution on a remote server,
            see <see cref="T:Inedo.BuildMaster.Extensibility.Actions.AgentBasedActionBase"/>. For an Action that
            will only execute on the BuildMaster server, see <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionBase"/>.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase.ExecuteRemoteCommand(System.String)">
            <summary>
            Executes the specified Action-defined command against the remotely running
            agent, which is then processed by the Action-defined <see cref="M:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase.ProcessRemoteCommand(System.String,System.String[])"/>.
            </summary>
            <param name="name">Action-defined command name.</param>
            <returns>Action-defined return string.</returns>
            <remarks>
            This method is meant to be called from the <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.Execute"/> method to
            begin remote execution. Additionally, this method has been deprecated if the consuming agent
            type is anything other than the SOAP/TCP variety. The new recommended approach is to call
            Util.Agents.CreateAgentFromId(...) and cast to the appropriate interface (e.g. IFileOperationsExecuter)
            in order to perform remote actions on an agent.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase.ExecuteRemoteCommand(System.String,System.String[])">
            <summary>
            Executes the specified Action-defined command with the specified Action-defined arguments
            against the remotely running
            agent, which is then processed by the Action-defined <see cref="M:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase.ProcessRemoteCommand(System.String,System.String[])"/>.
            </summary>
            <param name="name">Action-defined command name.</param>
            <param name="args">Action-defined command arguments.</param>
            <returns>Action-defined return string</returns>
            <remarks>
            This method is meant to be called from the <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.Execute"/> method to
            begin remote execution.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase.ProcessRemoteCommand(System.String,System.String[])">
            <summary>
            When implemented in a derived class, processes an arbitrary command
            on the appropriate server.
            </summary>
            <param name="name">Name of command to process.</param>
            <param name="args">Optional command arguments.</param>
            <returns>Result of the command.</returns>
            <remarks>
            This method is always invoked on the remote server by the system and should
            never be called directly. To begin remote execution from the <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.Execute"/>
            method, call <see cref="M:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase.ExecuteRemoteCommand(System.String,System.String[])"/>.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase.OnBeforeProcessRemoteCommand(System.EventArgs)">
            <summary>
            Raises the <see cref="E:BeforeProcessRemotecommand"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase.OnAfterProcessRemoteCommand(System.EventArgs)">
            <summary>
            Raises the <see cref="E:AfterProcessRemoteCommand"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase.BeforeProcessRemoteCommand">
            <summary>
            Raised before the <see cref="M:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase.ProcessRemoteCommand(System.String,System.String[])"/> method is invoked.
            </summary>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase.AfterProcessRemoteCommand">
            <summary>
            Raised after the <see cref="M:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase.ProcessRemoteCommand(System.String,System.String[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase.IsExecutingRemotely">
            <summary>
            Gets a value indicating whether the code is executing locally or on the remote agent.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteCommandExecuter">
            <summary>
            Used for the purpose of executing commands against a <see cref="T:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase"/>,
            this class provides base functionality for unpackaging and is responsible for calling
            the action's <see cref="M:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase.ProcessRemoteCommand(System.String,System.String[])"/> method.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteCommandExecuter.ExecuteCommand(Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase,System.String,System.String[])">
            <summary>
            Executes the command.
            </summary>
            <param name="remoteAction">The remote action.</param>
            <param name="commandName">Name of the command.</param>
            <param name="commandArgs">The command args.</param>
            <returns>The command return value.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteCommandExecuter.CancelExecution(System.Int32)">
            <summary>
            Cancels the execution.
            </summary>
            <param name="executionId">The execution identifier.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext">
            <summary>
            Implementation of <see cref="T:Inedo.BuildMaster.Extensibility.Actions.IAgentBasedActionExecutionContext"/> for use on actions
            during a remote command execution.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext"/> class.
            </summary>
            <param name="serializedContext">The serialized context.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext.Serialize(Inedo.BuildMaster.Extensibility.Actions.IAgentBasedActionExecutionContext)">
            <summary>
            Serializes the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>The serialized context.</returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext.ServerId">
            <summary>
            Gets the server ID.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext.Agent">
            <summary>
            Gets a local agent.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext.TempDirectory">
            <summary>
            Gets the temp directory.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext.SourceDirectory">
            <summary>
            Gets the source directory.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext.TargetDirectory">
            <summary>
            Gets the target directory.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext.BaseWorkingDirectory">
            <summary>
            Gets the base working directory for the agent.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext.ApplicationDirectory">
            <summary>
            Gets the application working directory for the agent.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext.ExecutionId">
            <summary>
            Gets the execution ID.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext.ExecutionPlanActionId">
            <summary>
            Gets the execution plan action ID.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext.ApplicationId">
            <summary>
            Gets the application ID.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext.ApplicationGroupId">
            <summary>
            Gets the application group ID.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext.DeployableId">
            <summary>
            Gets the deployable ID.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext.EnvironmentId">
            <summary>
            Gets the ID of the environment associated with the executing plan.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext.ReleaseNumber">
            <summary>
            Gets the release number.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext.BuildNumber">
            <summary>
            Gets the build number.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext.NumericReleaseNumber">
            <summary>
            Gets a sortable release number.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext.Variables">
            <summary>
            Gets the variables.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.RemoteCommandExecution.RemoteExecutionContext.CancellationToken">
            <summary>
            Gets the action cancellation token.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.CommandLineActionBase">
            <summary>
            This class is obsolete. Use <see cref="T:Inedo.BuildMaster.Extensibility.Actions.AgentBasedActionBase"/> or <see cref="T:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase"/> instead.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.CommandLineActionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.CommandLineActionBase"/> class.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.Database.DatabaseBaseAction">
            <summary>
            Base class for an Action that is to be used with a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.Database.DatabaseProviderBase"/>.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction`1">
            <summary>
            A <see cref="T:Inedo.BuildMaster.Extensibility.Actions.AgentBasedActionBase"/> which uses a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.ProviderBase"/>.
            </summary>
            <typeparam name="TProvider">Type derived from <see cref="T:Inedo.BuildMaster.Extensibility.Providers.ProviderBase"/>.</typeparam>
            <remarks>
            Generally, the <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction`1.ExecuteProviderBasedAction"/> method should be overridden;
            the <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction`1.Execute"/> method simply checks for the <see cref="P:ProviderPropertiesAttribute.RequiresTransparentProxy"/>
            attribute and runs either <see cref="M:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase.ExecuteRemoteCommand(System.String)"/> or <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction`1.ExecuteProviderBasedAction"/>.
            </remarks>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction">
            <summary>
            An <see cref="T:Inedo.BuildMaster.Extensibility.Actions.AgentBasedActionBase"/> which uses a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.ProviderBase"/>.
            </summary>
            <remarks>
            This class should not be inherited directly. Instead, see <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction`1"/>.
            </remarks>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction`1"/>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction.GetProviderNameSafe">
            <summary>
            Gets the name of the provider
            </summary>
            <remarks>
            This will first attempt to use the <see cref="P:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction.ProviderName"/> property, and if that's null or empty, then
            look-up the name from the database using <see cref="P:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction.ProviderId"/>, and then "(unknown)" if that fails.
            </remarks>
            <returns>Provider name or "(unknown)"</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction.OnProviderInitialized(Inedo.BuildMaster.Extensibility.Actions.ProviderInitializedEventArgs)">
            <summary>
            Raises the <see cref="E:ProviderInitialized"/> event.
            </summary>
            <param name="e">The <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ProviderInitializedEventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is null.</exception>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction.ProviderInitialized">
            <summary>
            Occurs when the provider has been initialized.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction.ProviderId">
            <summary>
            Gets or sets the provider ID associated with the action.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction.ProviderName">
            <summary>
            When the <see cref="P:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction.ProviderId"/> property is less than or equal to 0, gets or sets the 
            provider name associated with the action.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction`1"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction`1.Execute">
            <summary>
            Executes the action.
            </summary>
            <remarks>
            Override this method if you want to implement different behavior for handling transparent proxying
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction`1.ProcessRemoteCommand(System.String,System.String[])">
            <summary>
            When implemented in a derived class, processes an arbitrary command
            on the appropriate server.
            </summary>
            <param name="name">Name of command to process.</param>
            <param name="args">Optional command arguments.</param>
            <returns>
            Result of the command.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction`1.ExecuteProviderBasedAction">
            <summary>
            Executes the provider based action.
            </summary>
            <remarks>
            If the corresponding <see cref="P:ProviderPropertiesAttribute.RequiresTransparentProxy"/> property is true,
            this will be invoked on the remote agent. If it is false, this will be invoked on the BuildMaster server.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction`1.OnBeforeExecute(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Inedo.BuildMaster.Extensibility.Actions.ActionBase.BeforeExecute"/> event.
            </summary>
            <param name="e">Unused <see cref="T:System.EventArgs"/> instance.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction`1.OnBeforeProcessRemoteCommand(System.EventArgs)">
            <summary>
            Raises the <see cref="E:BeforeProcessRemotecommand"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction`1.Provider">
            <summary>
            Gets the provider associated with the action.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.IMissingPersistentPropertyHandler">
            <summary>
            Indicates that a type with persistent properties has special handling for
            dealing with deleted/renamed properties.
            </summary>
            <remarks>
            The default behavior for missing properties is to ignore them.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IMissingPersistentPropertyHandler.OnDeserializedMissingProperties(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Invoked when at least one persistent property could not be found on deserialization.
            </summary>
            <param name="missingProperties">The missing properties.</param>
            <remarks>
            This method is invoked after all matched properties have been assigned.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.Database.DatabaseBaseAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.Database.DatabaseBaseAction"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.Database.DatabaseBaseAction.OnDeserializedMissingProperties(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Invoked when at least one persistent property could not be found on deserialization.
            </summary>
            <param name="missingProperties">The missing properties.</param>
            <remarks>
            This method is invoked after all matched properties have been assigned.
            </remarks>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.Reporting.ReportFormats">
            <summary>
            Represents the types of report formats for a <see cref="T:Inedo.BuildMaster.Extensibility.Actions.Reporting.ReportingActionBase"/>.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Actions.Reporting.ReportFormats.Html">
            <summary>
            The report is a single HTML page.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Actions.Reporting.ReportFormats.ZippedHtml">
            <summary>
            The report is one or more HTML files with associated resources.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Actions.Reporting.ReportFormats.PlainText">
            <summary>
            The report is a single plain text file.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.Reporting.ReportingActionBase">
            <summary>
            A <see cref="T:Inedo.BuildMaster.Extensibility.Actions.CommandLineActionBase"/> that can report results into build output.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.Reporting.ReportingActionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.Reporting.ReportingActionBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.Reporting.ReportingActionBase.SubmitReport(System.String)">
            <summary>
            Submits a string as a report in HTML.
            </summary>
            <param name="buildOutput">HTML content of report to submit.</param>
            <remarks>
            A Build Output Report may not be submitted more than once, or while a remote command is being executed.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.Reporting.ReportingActionBase.SubmitReport(System.Byte[],Inedo.BuildMaster.Extensibility.Actions.Reporting.ReportFormats)">
            <summary>
            Submits arbitrary data as a report.
            </summary>
            <param name="buildOutput">Report data to submit.</param>
            <param name="format">Format of the report data.</param>
            <remarks>
            A Build Output Report may not be submitted more than once, or while a remote command is being executed.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.Reporting.ReportingActionBase.ZipAndEncodeDirectory(System.String,System.String,System.String)">
            <summary>
            Zips a directory and returns a base 64 encoded string containing the resulting archive.
            </summary>
            <param name="path">Directory to zip. Files and subdirectories will be added to the archive.</param>
            <param name="defaultPage">Default or main page of the archive.</param>
            <param name="previewPage">Page to display in an iframe as a preview of the report; may be null.</param>
            <returns>Base 64 encoded string containing the zipped directory.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.Reporting.ReportingActionBase.ZipAndEncodeDirectory(System.String,System.String)">
            <summary>
            Zips a directory and returns a base 64 encoded string containing the resulting archive.
            </summary>
            <param name="path">Directory to zip. Files and subdirectories will be added to the archive.</param>
            <param name="defaultPage">Default or main page of the archive.</param>
            <returns>Base 64 encoded string containing the zipped directory.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.Reporting.ReportingActionBase.getAbsPath(System.String)">
            <summary>
            Gets the abs path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.Reporting.ReportingActionBase.OutputName">
            <summary>
            Gets or sets the output name of the report
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.Reporting.ReportingActionBase.ExePath">
            <summary>
            Gets or sets the application to start
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.Reporting.ReportingActionBase.Arguments">
            <summary>
            Gets or sets the command line arguments to use when running the command
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.Scripting.ExecuteScriptActionBase`1">
            <summary>
            Base class for execute script actions.
            </summary>
            <typeparam name="TScriptType">The type of the script type.</typeparam>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.IPreprocessPersistence">
            <summary>
            Indicates that a type has special handling for serialization and deserialization.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IPreprocessPersistence.BeforeVariablesReplaced">
            <summary>
            Method invoked before variables are replaced.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IPreprocessPersistence.AfterVariablesReplaced">
            <summary>
            Method invoked after variables are replaced.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.Scripting.ExecuteScriptActionBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.Scripting.ExecuteScriptActionBase`1"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.Scripting.ExecuteScriptActionBase`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <remarks>
            This should return a user-friendly string describing what the Action does
            and the state of its important persistent properties.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.Scripting.ExecuteScriptActionBase`1.Execute">
            <summary>
            Executes the action.
            </summary>
            <remarks>
            This method is always called on the BuildMaster server.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.Scripting.ExecuteScriptActionBase`1.ProcessRemoteCommand(System.String,System.String[])">
            <summary>
            When implemented in a derived class, processes an arbitrary command
            on the appropriate server.
            </summary>
            <param name="name">Name of command to process.</param>
            <param name="args">Optional command arguments.</param>
            <returns>
            Result of the command.
            </returns>
            <exception cref="T:System.ArgumentException">Invalid command.</exception>
            <remarks>
            This method is always invoked on the remote server by the system and should
            never be called directly. To begin remote execution from the <see cref="M:Inedo.BuildMaster.Extensibility.Actions.ActionBase.Execute"/>
            method, call <see cref="M:Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase.ExecuteRemoteCommand(System.String,System.String[])"/>.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.Scripting.ExecuteScriptActionBase`1.ExecuteScript(Inedo.BuildMaster.Extensibility.Scripting.ScriptExecutionContext)">
            <summary>
            Executes the script.
            </summary>
            <param name="scriptContext">The script context.</param>
            <exception cref="T:System.ArgumentNullException">scriptContext</exception>
            <exception cref="T:System.InvalidOperationException">ExecuteScript returned null.</exception>
            <exception cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionTimeoutException"></exception>
            <exception cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionCanceledException"></exception>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.Scripting.ExecuteScriptActionBase`1.ScriptMode">
            <summary>
            Gets or sets the mode of the action.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.Scripting.ExecuteScriptActionBase`1.ScriptData">
            <summary>
            Gets or sets the script data.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.Scripting.ExecuteScriptActionBase`1.VariableValues">
            <summary>
            Gets or sets the variable values.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.Scripting.ExecuteScriptActionBase`1.ParameterValues">
            <summary>
            Gets or sets the parameter values.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.Scripting.ExecuteScriptActionBase`1.LogResults">
            <summary>
            Gets or sets a value indicating whether to log script output.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.Scripting.ExecuteScriptActionBase`1.ActionName">
            <summary>
            Gets the name of the Action that will be displayed in BuildMaster.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.Scripting.ExecuteScriptActionBase`1.ScriptId">
            <summary>
            Gets or sets the script ID.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.Scripting.ExecuteScriptActionBase`1.ScriptFileName">
            <summary>
            Gets or sets the script file name.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.Scripting.ExecuteScriptActionBase`1.ScriptText">
            <summary>
            Gets or sets the script text.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.Scripting.ScriptActionMode">
            <summary>
            Indicates how a script is specified for a <see cref="T:Inedo.BuildMaster.Extensibility.Actions.Scripting.ExecuteScriptActionBase`1"/>.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Actions.Scripting.ScriptActionMode.Library">
            <summary>
            The script is in the BuildMaster script library.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Actions.Scripting.ScriptActionMode.FileName">
            <summary>
            The script is in a file on a server.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Actions.Scripting.ScriptActionMode.Direct">
            <summary>
            The script is embedded in the action.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.Scripting.ScriptArgumentConverter">
            <summary>
            Contains key value pairs.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.ICustomPersistentSerializer">
            <summary>
            Indicates that a type implements custom serialization logic for
            a specific type.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.ICustomPersistentSerializer.Serialize(System.Object)">
            <summary>
            Returns the content an XML element which represents the current value.
            </summary>
            <param name="instance">The object to serialize.</param>
            <returns>Content of an XML element which represents the current value.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.ICustomPersistentSerializer.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            Reads configuration for this instance from the specified XML element.
            </summary>
            <param name="element">The XML element to read from.</param>
            <returns>Instance deserialized from the element.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.ICustomVariableReplacer">
            <summary>
            Indicates that a persistent property supports custom variable replacement logic.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.ICustomVariableReplacer.GetFieldsToExpand(System.Object)">
            <summary>
            Returns an enumeration of the fields which require variable expansion of an instance.
            </summary>
            <param name="instance">The instance whose fields will be expanded.</param>
            <returns>Enumeration of <see cref="T:Inedo.BuildMaster.Extensibility.VariableExpandingField"/> instances.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.Scripting.ScriptArgumentConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.Scripting.ScriptArgumentConverter"/> class.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Actions.Testing.UnitTestActionBase">
            <summary>
            Base class for an Action that executes unit tests.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.Testing.UnitTestActionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Actions.Testing.UnitTestActionBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.Testing.UnitTestActionBase.ProcessRemoteCommand(System.String,System.String[])">
            <summary>
            Runs the unit tests on the appropriate server.
            </summary>
            <param name="name">Name of command to process.</param>
            <param name="args">Optional command arguments.</param>
            <returns>
            Result of the command.
            </returns>
            <remarks>
            This method should not be called directly.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.Testing.UnitTestActionBase.Execute">
            <summary>
            Executes the Unit Test Action.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.Testing.UnitTestActionBase.RunTests">
            <summary>
            Runs a unit test against the target specified in the action.
            After the test is run, use the <see cref="M:RecordResult"/> method
            to save the test results to the database.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Actions.Testing.UnitTestActionBase.RecordResult(System.String,System.Boolean,System.String,System.DateTime,System.DateTime)">
            <summary>
            Records the test result in BuildMaster.
            </summary>
            <param name="testName">The name of the file the test was run against.</param>
            <param name="testPassed">Value indicating whether the test passed.</param>
            <param name="testResult">The XML (or text) result of the test.</param>
            <param name="startTime">The time when the test was started.</param>
            <param name="endTime">The time when the test was completed.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Actions.Testing.UnitTestActionBase.GroupName">
            <summary>
            Gets or sets the unit test group name.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Configuration.CoreConfig">
            <summary>
            Configuration items used within core
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Configuration.CoreConfig.GetConfigSource">
            <summary>
            Loads the configuration <see cref="T:Inedo.Configuration.Sources.IConfigSource"/> associated with
            this configuration
            </summary>
            <returns>
            instance of IConfigSource
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Configuration.CoreConfig.OverrideConfigSource(Inedo.Configuration.Sources.IConfigSource)">
            <summary>
            Replaces the configuration source used by <see cref="T:Inedo.BuildMaster.Configuration.CoreConfig"/>.
            </summary>
            <param name="configSource">The <see cref="T:Inedo.Configuration.Sources.IConfigSource"/> to use (or null to use the default).</param>
        </member>
        <member name="P:Inedo.BuildMaster.Configuration.CoreConfig.BaseWorkingDirectory">
            <summary>
            Gets the BuildMaster working directory
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Configuration.CoreConfig.DbConnectionString">
            <summary>
            Gets the ConnectionString used by BuildMaster to connect to its database.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Configuration.CoreConfig.DbSync">
            <summary>
            Gets the DbSync.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Events.EventType">
            <summary>
            Represents a type of Event that can occur
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Events.EventType.EventCode">
            <summary>
            Gets the code associated with the event type
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Events.EventType.EventDescription">
            <summary>
            Gets the description associated with the event description
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Events.Internal.EventType`2">
            <summary>
            Represents a type of Event that can occur and provides an strong-typing for the details
            </summary>
            <typeparam name="T">event type</typeparam>
            /// <typeparam name="D">event details type</typeparam>
            <remarks>This is intended to be used internally</remarks>
        </member>
        <member name="F:Inedo.BuildMaster.Events.Internal.EventType`2.EventDetails">
            <summary>
            Gets the details associated with the event type
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Events.Internal.EventType`2.op_Implicit(Inedo.BuildMaster.Events.Internal.EventType{`0,`1})~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Inedo.BuildMaster.Events.Internal.EventType`2"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="e">The e.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Inedo.BuildMaster.Events.Internal.EventTypeDetails`1">
            <summary>
            Represents the base for all event type detail classes
            </summary>
            <typeparam name="T">event type details are assocaitedw ith</typeparam>
            <remarks>This class is intended to be used internally only</remarks>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.AgentBase">
            <summary>
            The base class for all agents.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Agents.AgentBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentBase.GetAgentStatus(Inedo.BuildMaster.Extensibility.Agents.IHostedAgentContext)">
            <summary>
            Gets the agent status, which is one of the constants defined within <see cref="T:Inedo.BuildMaster.Data.Domains.ServerStatus"/>
            </summary>
            <param name="context">Context information for hosted agents.</param>
            <remarks>
            Note to implementers - this applies validation to <see cref="M:Inedo.BuildMaster.Extensibility.Agents.AgentBase.GetAgentStatusInternal(Inedo.BuildMaster.Extensibility.Agents.IHostedAgentContext)"/>
            </remarks>
            <returns>The agent status code</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentBase.GetAgentDescription">
            <summary>
            Returns a human-friendly description of the agent's configuration.
            </summary>
            <returns>the agent description</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentBase.TryGetService``1">
            <summary>
            Returns the requested agent service interface if it is supported; otherwise returns null.
            </summary>
            <typeparam name="TService">Type of the requested interface.</typeparam>
            <returns>Requested agent service if it is supported; otherwise null.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentBase.GetService``1">
            <summary>
            Returns the requested agent service or throws an exception if it is not available.
            </summary>
            <typeparam name="TService">Type of the requested interface.</typeparam>
            <returns>Requested agent service.</returns>
            <exception cref="T:System.NotSupportedException">The requested interface is not supported.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentBase.GetAgentStatusInternal(Inedo.BuildMaster.Extensibility.Agents.IHostedAgentContext)">
            <summary>
            Returns the agent status, which is one of the constants defined within <see cref="T:Inedo.BuildMaster.Data.Domains.ServerStatus"/>.
            </summary>
            <param name="context">Context information for hosted agents.</param>
            <returns>The agent status code.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentBase.GetAgentServiceInternal``1">
            <summary>
            Returns an instance of the requested agent service if it is supported;
            otherwise returns null.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns>Instance of the requested service if supported; otherwise null.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentBase.VerifyRemotableMethod(System.Delegate,System.Object[])">
            <summary>
            Throws an appropriate exception if a delegate or its arguments are not compatible with the
            <see cref="M:Inedo.BuildMaster.Extensibility.Agents.IRemoteMethodExecuter.InvokeMethod(System.Reflection.MethodBase,System.Object,System.Object[])"/> method.
            </summary>
            <param name="method">The delegate to test.</param>
            <param name="parameters">The arguments passed to the delegate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> or one of the values of <paramref name="parameters"/> is not remotable, or <paramref name="parameters"/> does not match <paramref name="method"/>'s signature.</exception>
            <remarks>
            This method is provided as a convenience to implementers of <see cref="T:Inedo.BuildMaster.Extensibility.Agents.IRemoteMethodExecuter"/>.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentBase.GetExtensionUpdates(Inedo.BuildMaster.Extensibility.Agents.IHostedAgentContext,Inedo.BuildMaster.Extensibility.Agents.IHostedAgentInfo)">
            <summary>
            Returns extension files which require updating on a remote agent.
            </summary>
            <param name="context">Context of the <see cref="T:Inedo.BuildMaster.Extensibility.Agents.IHostedAgent"/>.</param>
            <param name="info">Information about the remote agent.</param>
            <returns>Extension files which require updating.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null or <paramref name="info"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:Inedo.BuildMaster.Extensibility.Agents.IHostedAgentContext.ExtensionFiles"/> is null or <see cref="P:Inedo.BuildMaster.Extensibility.Agents.IHostedAgentInfo.ExtensionFiles"/> is null.</exception>
            <remarks>
            This is a helper method for implementers of the <see cref="T:Inedo.BuildMaster.Extensibility.Agents.IHostedAgent"/> interface.
            </remarks>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.AgentBase.AgentFileUpdates">
            <summary>
            Contains information about agent files that require updates.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentBase.AgentFileUpdates.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Agents.AgentBase.AgentFileUpdates"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentBase.AgentFileUpdates.Any">
            <summary>
            Returns a value indicating whether <see cref="P:Inedo.BuildMaster.Extensibility.Agents.AgentBase.AgentFileUpdates.ToUpdate"/> or <see cref="P:Inedo.BuildMaster.Extensibility.Agents.AgentBase.AgentFileUpdates.ToDelete"/>
            contain any elements.
            </summary>
            <returns>
            True if <see cref="P:Inedo.BuildMaster.Extensibility.Agents.AgentBase.AgentFileUpdates.ToUpdate"/> or <see cref="P:Inedo.BuildMaster.Extensibility.Agents.AgentBase.AgentFileUpdates.ToDelete"/> contain any elements; otherwise false.
            </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.AgentBase.AgentFileUpdates.ToUpdate">
            <summary>
            Gets the collection of files to update or add.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.AgentBase.AgentFileUpdates.ToDelete">
            <summary>
            Gets the collection of files to delete.s
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.AgentDescription">
            <summary>
            Represents a huma-friendly description of an agent
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Agents.AgentDescription"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentDescription.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Agents.AgentDescription"/> class.
            </summary>
            <param name="endPoint">The end point.</param>
            <param name="usesToken">if set to <c>true</c> [uses token].</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.AgentDescription.EndPoint">
            <summary>
            Gets or sets the end point name
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.AgentDescription.UsesToken">
            <summary>
            Gets or sets a value indicating whether the agent uses a security token
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions">
            <summary>
            Contains agent-related extension methods.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions.GetDefaultApplicationBaseDirectory(Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter,System.Int32)">
            <summary>
            Returns the base working directory for the specified application.
            </summary>
            <param name="agent">The agent.</param>
            <param name="applicationId">The ID of the application.</param>
            <returns>Base working directory for the application.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions.GetRelativeDeployableWorkingDirectory(Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter,System.Int32)">
            <summary>
            Returns the relative working directory for the specified deployable.
            </summary>
            <param name="agent">The agent.</param>
            <param name="deployableId">The ID of the deployable.</param>
            <returns>Relative working directory for the specified deployable.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions.GetWorkingDirectory(Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter,System.Int32,System.Int32,System.String)">
            <summary>
            Returns the working directory for the specified application, deployable, and overridden path.
            </summary>
            <param name="agent">The agent.</param>
            <param name="applicationId">The ID of the application.</param>
            <param name="deployableId">The ID of the deployable.</param>
            <param name="overridePath">The overridden path.</param>
            <returns>Working directory for the specified application, deployable, and overridden path.</returns>
            <remarks>
                The value of <paramref name="overridePath"/> may be either a relative or absolute path:
                <list type="bullet">
                    <item>absolute - <paramref name="overridePath"/> is always returned.</item>
                    <item>relative (starts with ~) - <paramref name="overridePath"/> is combined with the application base path.</item>
                    <item>relative (does not start with ~) - <paramref name="overridePath"/> is combined with the deployable base path.</item>
                </list>
            </remarks>
            <example>
                <list type="table">
                    <listheader>
                        <term>Value of <paramref name="overridePath"/></term>
                        <description>Result</description>
                    </listheader>
                    <item>
                        <term>(null/empty)</term>
                        <description>C:\[BuildMaster base directory]\A[AppId]\S[DplId]\WRK</description>
                    </item>
                    <item>
                        <term>~</term>
                        <description>C:\[BuildMaster base directory]\A[AppId]</description>
                    </item>
                    <item>
                        <term>~\MyPath</term>
                        <description>C:\[BuildMaster base directory]\A[AppId]\MyPath</description>
                    </item>
                    <item>
                        <term>\MyPath</term>
                        <description>C:\MyPath</description>
                    </item>
                    <item>
                        <term>MyPath</term>
                        <description>C:\[BuildMaster base directory]\A[AppId]\S[DplId]\WRK\MyPath</description>
                    </item>
                </list>
            </example>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions.DeleteFile(Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Deletes the specified file if it exists.
            </summary>
            <param name="agent">The agent.</param>
            <param name="fileName">The name of the file to delete.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions.CombinePath(Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter,System.String[])">
            <summary>
            Combines multiple path components into one string.
            </summary>
            <param name="agent">The agent.</param>
            <param name="paths">The path components to combine.</param>
            <returns>Combined path string.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions.ReadFileBytes(Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Reads all file bytes.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <returns>The file bytes.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions.WriteFileBytes(Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter,System.String,System.Byte[])">
            <summary>
            Writes the file bytes.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions.ReadAllText(Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Reads all text.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions.ReadAllText(Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter,System.String,System.Text.Encoding)">
            <summary>
            Reads all text.
            </summary>
            <param name="agent">The agent.</param>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions.InvokeMethod(Inedo.BuildMaster.Extensibility.Agents.IRemoteMethodExecuter,System.Delegate,System.Object[])">
            <summary>
            Invokes the method on the remote server using the specified arguments, and returns the result.
            </summary>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="parameters">The parameters to pass to the method. May be null if there are no parameters.</param>
            <returns>Return value of the method if applicable; otherwise null.</returns>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The values in <paramref name="parameters"/>
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or <paramref name="parameters"/> are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions.InvokeFunc``1(Inedo.BuildMaster.Extensibility.Agents.IRemoteMethodExecuter,System.Func{``0})">
            <summary>
            Invokes the method on the remote server and returns the result.
            </summary>
            <typeparam name="TResult">The type of the method return value.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <returns>Return value of the method.</returns>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The paremeter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions.InvokeFunc``2(Inedo.BuildMaster.Extensibility.Agents.IRemoteMethodExecuter,System.Func{``0,``1},``0)">
            <summary>
            Invokes the method on the remote server using the specified arguments, and returns the result.
            </summary>
            <typeparam name="T">The type of the method argument.</typeparam>
            <typeparam name="TResult">The type of the method return value.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg">The parameter to pass to the method.</param>
            <returns>Return value of the method.</returns>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The parameter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions.InvokeFunc``3(Inedo.BuildMaster.Extensibility.Agents.IRemoteMethodExecuter,System.Func{``0,``1,``2},``0,``1)">
            <summary>
            Invokes the method on the remote server using the specified arguments, and returns the result.
            </summary>
            <typeparam name="T1">The type of the first method argument.</typeparam>
            <typeparam name="T2">The type of the second method argument.</typeparam>
            <typeparam name="TResult">The type of the method return value.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg1">The first parameter to pass to the method.</param>
            <param name="arg2">The second parameter to pass to the method.</param>
            <returns>Return value of the method.</returns>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The parameter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions.InvokeFunc``4(Inedo.BuildMaster.Extensibility.Agents.IRemoteMethodExecuter,System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Invokes the method on the remote server using the specified arguments, and returns the result.
            </summary>
            <typeparam name="T1">The type of the first method argument.</typeparam>
            <typeparam name="T2">The type of the second method argument.</typeparam>
            <typeparam name="T3">The type of the third method argument.</typeparam>
            <typeparam name="TResult">The type of the method return value.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg1">The first parameter to pass to the method.</param>
            <param name="arg2">The second parameter to pass to the method.</param>
            <param name="arg3">The third parameter to pass to the method.</param>
            <returns>Return value of the method.</returns>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The parameter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions.InvokeFunc``5(Inedo.BuildMaster.Extensibility.Agents.IRemoteMethodExecuter,System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Invokes the method on the remote server using the specified arguments, and returns the result.
            </summary>
            <typeparam name="T1">The type of the first method argument.</typeparam>
            <typeparam name="T2">The type of the second method argument.</typeparam>
            <typeparam name="T3">The type of the third method argument.</typeparam>
            <typeparam name="T4">The type of the fourth method argument.</typeparam>
            <typeparam name="TResult">The type of the method return value.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg1">The first parameter to pass to the method.</param>
            <param name="arg2">The second parameter to pass to the method.</param>
            <param name="arg3">The third parameter to pass to the method.</param>
            <param name="arg4">The fourth parameter to pass to the method.</param>
            <returns>Return value of the method.</returns>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The parameter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions.InvokeAction(Inedo.BuildMaster.Extensibility.Agents.IRemoteMethodExecuter,System.Action)">
            <summary>
            Invokes the method on the remote server.
            </summary>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The parameter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions.InvokeAction``1(Inedo.BuildMaster.Extensibility.Agents.IRemoteMethodExecuter,System.Action{``0},``0)">
            <summary>
            Invokes the method on the remote server using the specified argument.
            </summary>
            <typeparam name="T">The type of the method argument.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg">The parameter to pass to the method.</param>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The parameter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions.InvokeAction``2(Inedo.BuildMaster.Extensibility.Agents.IRemoteMethodExecuter,System.Action{``0,``1},``0,``1)">
            <summary>
            Invokes the method on the remote server using the specified argument.
            </summary>
            <typeparam name="T1">The type of the first method argument.</typeparam>
            <typeparam name="T2">The type of the second method argument.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg1">The first parameter to pass to the method.</param>
            <param name="arg2">The second parameter to pass to the method.</param>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The paremeter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions.InvokeAction``3(Inedo.BuildMaster.Extensibility.Agents.IRemoteMethodExecuter,System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Invokes the method on the remote server using the specified argument.
            </summary>
            <typeparam name="T1">The type of the first method argument.</typeparam>
            <typeparam name="T2">The type of the second method argument.</typeparam>
            <typeparam name="T3">The type of the third method argument.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg1">The first parameter to pass to the method.</param>
            <param name="arg2">The second parameter to pass to the method.</param>
            <param name="arg3">The third parameter to pass to the method.</param>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The paremeter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions.InvokeAction``4(Inedo.BuildMaster.Extensibility.Agents.IRemoteMethodExecuter,System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Invokes the method on the remote server using the specified argument.
            </summary>
            <typeparam name="T1">The type of the first method argument.</typeparam>
            <typeparam name="T2">The type of the second method argument.</typeparam>
            <typeparam name="T3">The type of the third method argument.</typeparam>
            <typeparam name="T4">The type of the fourth method argument.</typeparam>
            <param name="agent">The agent to invoke the method on.</param>
            <param name="method">The method to invoke.</param>
            <param name="arg1">The first parameter to pass to the method.</param>
            <param name="arg2">The second parameter to pass to the method.</param>
            <param name="arg3">The third parameter to pass to the method.</param>
            <param name="arg4">The fourth parameter to pass to the method.</param>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The paremeter values
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="agent"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or parameters are not valid. See Remarks.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentExtensions.WaitForExit(Inedo.BuildMaster.Extensibility.Agents.IProcess)">
            <summary>
            Blocks until the process exits.
            </summary>
            <param name="process">The process.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="process"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The process has not been started.</exception>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.AgentProcessScheduler">
            <summary>
            Manages concurrent execution of remote processes on an agent.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentProcessScheduler.BeginExecuteProcess(System.String,Inedo.BuildMaster.Extensibility.Agents.ProcessIsolationMode,System.Action{Inedo.BuildMaster.Extensibility.Agents.IScheduledProcessContext})">
            <summary>
            Begins asynchronously executing a process with the specified isolation mode.
            </summary>
            <param name="fileName">Full path to the process to execute.</param>
            <param name="isolationMode">Concurrent isolation mode of the process.</param>
            <param name="executeProcess">Delegate to invoke when the process is ready to execute.</param>
            <returns>Asynchronous operation status object.</returns>
            <remarks>
            The <see cref="M:Inedo.BuildMaster.Extensibility.Agents.IScheduledProcessContext.ProcessExited"/> method must be called by the consumer
            to notify the process scheduler that the process has exited.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentProcessScheduler.EndExecuteProcess(Inedo.BuildMaster.Extensibility.Agents.IScheduledProcess)">
            <summary>
            Completes the asynchronous process execution.
            </summary>
            <param name="ar">Asynchronous operation status object.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.IScheduledProcess">
            <summary>
            Represents a process that has been scheduled to run on an agent.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IScheduledProcess.Cancel">
            <summary>
            Cancels the scheduled process if it is still in a pending state.
            </summary>
            <returns>True if the process was canceled or no longer running; otherwise false.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.IScheduledProcessContext">
            <summary>
            Provides methods and properties associated with a scheduled process.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IScheduledProcessContext.ProcessExited">
            <summary>
            This must be invoked when the process has exited.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.AgentProcessStartInfo">
            <summary>
            Contains process initialization information.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentProcessStartInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Agents.AgentProcessStartInfo"/> class.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.AgentProcessStartInfo.Arguments">
            <summary>
            Gets or sets the arguments to pass to the process.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.AgentProcessStartInfo.EnvironmentVariables">
            <summary>
            Gets the environment variables.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.AgentProcessStartInfo.FileName">
            <summary>
            Gets or sets the file name of the process to start.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.AgentProcessStartInfo.WorkingDirectory">
            <summary>
            Gets or sets the initial working directory of the process to start.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.AgentProcessStartInfo.IsolationMode">
            <summary>
            Gets or sets the isolation mode of the process to start.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.AgentProcessStartInfo.OutputFileName">
            <summary>
            Gets or sets the name of the file to write process output to.
            </summary>
            <remarks>
            If this property is null, output will be captured by BuildMaster instead.
            </remarks>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.AgentPropertiesAttribute">
            <summary>
            Properties for an agent.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.AgentPropertiesAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Agents.AgentPropertiesAttribute"/> class.
            </summary>
            <param name="name">The name of the extension.</param>
            <param name="description">The description of the extension.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.ClientConnectionPool`2">
            <summary>
            Manages resources which can be shared and pooled using reference counting.
            </summary>
            <typeparam name="TEndpoint">The type of the connection endpoint.</typeparam>
            <typeparam name="TConnection">The type of the connection.</typeparam>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.ClientConnectionPool`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Agents.ClientConnectionPool`2"/> class.
            </summary>
            <param name="openConnection">The factory method for creating a new connection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="openConnection"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.ClientConnectionPool`2.AcquireConnection(`0)">
            <summary>
            Returns an already-open connection if possible, or a newly-opened connection if necessary.
            </summary>
            <param name="endpoint">The connection endpoint.</param>
            <returns>Valid pooled connection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="endpoint"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.ClientConnectionPool`2.ReleaseConnection(System.Int32)">
            <summary>
            Releases the connection associated with the specified connection token.
            </summary>
            <param name="token">The token of the connection to release.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.ClientConnectionPool`2.IdleTimeout">
            <summary>
            Gets or sets the time to wait before closing idle connections.
            </summary>
            <remarks>
            The default value is 30 seconds.
            </remarks>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.IPooledConnection`1">
            <summary>
            Represents a pooled connection.
            </summary>
            <typeparam name="TConnection">The type of the connection.</typeparam>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.IPooledConnection`1.Connection">
            <summary>
            Gets the connection.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.IPooledConnection`1.Token">
            <summary>
            Gets the connection token.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.INotifyConnectionClosed">
            <summary>
            Allows a connection to notify a connection pool that it has been
            closed and can no longer be used.
            </summary>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.Agents.INotifyConnectionClosed.ConnectionClosed">
            <summary>
            Occurs when the connection has been closed.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.HostedAgentInfo">
            <summary>
            Represents the status of an <see cref="T:Inedo.BuildMaster.Extensibility.Agents.IHostedAgent"/>.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.IHostedAgentInfo">
            <summary>
            Represents the status of a <see cref="T:Inedo.BuildMaster.Extensibility.Agents.IHostedAgent"/>.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.IHostedAgentInfo.CoreAssemblies">
            <summary>
            Gets the assembly names of all of the agent's core assemblies.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.IHostedAgentInfo.ExtensionAssemblies">
            <summary>
            Gets the assembly names of all of the agent's extension assemblies.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.IHostedAgentInfo.ExtensionFiles">
            <summary>
            Gets the files in the extensions root path.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.IHostedAgentInfo.Platform">
            <summary>
            Gets the remote agent platform.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.HostedAgentInfo.#ctor(System.String[],System.String[],Inedo.BuildMaster.Files.ExtendedFileEntryInfo[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Agents.HostedAgentInfo"/> class.
            </summary>
            <param name="extensionAssemblies">The extension assemblies.</param>
            <param name="coreAssemblies">The core assemblies.</param>
            <param name="extensionFiles">The extension files.</param>
            <param name="platform">The platform.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.HostedAgentInfo.ExtensionAssemblies">
            <summary>
            Gets a string array of assembly names (using <see cref="P:System.Reflection.Assembly.FullName"/>)
            from the extensions root.
            </summary>   
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.HostedAgentInfo.ExtensionFiles">
            <summary>
            Gets an array of files in the extensions root path.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.HostedAgentInfo.CoreAssemblies">
            <summary>
            Gets a string array of assembly names (using <see cref="P:System.Reflection.Assembly.FullName"/>)
            from the private path (/bin).
            </summary>   
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.HostedAgentInfo.Platform">
            <summary>
            Gets the platform.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.IBinaryDataProcess">
            <summary>
            Represents a process that outputs binary data.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.IProcess">
            <summary>
            Represents a process.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IProcess.Start">
            <summary>
            Starts the process.
            </summary>
            <exception cref="T:System.InvalidOperationException">The process has already been started.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IProcess.Kill">
            <summary>
            Immediately terminates the process.
            </summary>
            <exception cref="T:System.InvalidOperationException">The process has not been started or has already terminated.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IProcess.WaitForExit(System.Nullable{System.Int32})">
            <summary>
            Blocks until the process exits or the timeout length is exceeded.
            </summary>
            <param name="milliseconds">The timeout length in milliseconds. Null or <see cref="F:System.Threading.Timeout.Infinite"/> indicates an infinite timeout length.</param>
            <returns>True if process exited; false if the timeout length was exceeded.</returns>
            <exception cref="T:System.InvalidOperationException">The process has not been started.</exception>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.Agents.IProcess.Exited">
            <summary>
            Occurs when the process has exited.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.IProcess.ExitCode">
            <summary>
            Gets the process exit code.
            </summary>
            <exception cref="T:System.InvalidOperationException">The process has not been started or has not yet terminated.</exception>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.IProcess.HasExited">
            <summary>
            Gets a value indicating whether the process has exited.
            </summary>
            <exception cref="T:System.InvalidOperationException">The process has not been started.</exception>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.IProcess.StartTime">
            <summary>
            Gets the process start time in UTC, or null if the process has not been started.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.IProcess.ExitTime">
            <summary>
            Gets the process exit time in UTC, or null if the process has not exited.
            </summary>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.Agents.IBinaryDataProcess.ErrorDataReceived">
            <summary>
            Occurs when data has been written to the <see cref="P:StandardError"/> stream.
            </summary>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.Agents.IBinaryDataProcess.OutputDataReceived">
            <summary>
            Occurs when data has been written to the <see cref="P:StandardOutput"/> stream.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Agents.AgentBase"/> supports file operations.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter.GetDirectorySeparator">
            <summary>
            Returns the directory separator character used by the agent's platform.
            </summary>
            <returns>Directory separator character used by the agent's platform.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter.GetNewLine">
            <summary>
            Returns the new line string used by the agent's platform.
            </summary>
            <returns>The new line string used by the agent's platform.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter.CombinePath(System.String,System.String)">
            <summary>
            Combines two path strings according to the path format of the agent.
            </summary>
            <param name="path1">The fist path.</param>
            <param name="path2">The second path.</param>
            <returns>Combined path string.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter.GetDirectoryEntry(Inedo.BuildMaster.Files.GetDirectoryEntryCommand)">
            <summary>
            Wrapper for <see cref="M:Inedo.BuildMaster.Util.Files.GetDirectoryEntry(Inedo.BuildMaster.Files.GetDirectoryEntryCommand)"/>.
            </summary>
            <param name="command">See <see cref="M:Inedo.BuildMaster.Util.Files.GetDirectoryEntry(Inedo.BuildMaster.Files.GetDirectoryEntryCommand)"/>.</param>
            <returns>See <see cref="M:Inedo.BuildMaster.Util.Files.GetDirectoryEntry(Inedo.BuildMaster.Files.GetDirectoryEntryCommand)"/></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter.GetFileEntry(System.String)">
            <summary>
            Wrapper for <see cref="M:Inedo.BuildMaster.Util.Files.GetFileEntry(System.String)"/>.
            </summary>
            <param name="path">See <see cref="M:Inedo.BuildMaster.Util.Files.GetFileEntry(System.String)"/>.</param>
            <returns>See <see cref="M:Inedo.BuildMaster.Util.Files.GetFileEntry(System.String)"/></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter.FileExists(System.String)">
            <summary>
            Returns a value indicating whether a file exists at the specified path.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>True if the file exists; otherwise false.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter.DirectoryExists(System.String)">
            <summary>
            Returns a value indicating whether a directory exists at the specified path.
            </summary>
            <param name="path">The path of the directory.</param>
            <returns>True if the directory exists; otherwise false.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter.CreateDirectory(System.String)">
            <summary>
            Wrapper for <see cref="M:System.IO.Directory.CreateDirectory(System.String)"/>.
            </summary>
            <param name="path">See <see cref="M:System.IO.Directory.CreateDirectory(System.String)"/>.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter.DeleteFiles(System.String[])">
            <summary>
            Deletes all of the specified files if they exist.
            </summary>
            <param name="fileNames">The files to delete.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter.ClearFolder(System.String)">
            <summary>
            Deletes all files and subfolders in a folder (but not the folder itself).
            </summary>
            <param name="path">The path of the folder to empty.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter.DeleteDirectories(System.String[])">
            <summary>
            Deletes all of the specified directories if they exist.
            </summary>
            <param name="directoryNames">THe directories to delete.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a file on the agent.
            </summary>
            <param name="path">Full path of the file to open.</param>
            <param name="fileMode">Specifies how the file should be opened.</param>
            <param name="fileAccess">Specifies the required access level of the file.</param>
            <returns><see cref="T:System.IO.Stream"/> backed by the specified file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or an empty string.</exception>
            <exception cref="T:System.NotSupportedException">The agent does not support the specified file operation.</exception>
            <exception cref="T:System.IO.FileNotFoundException">
            The file cannot be found, such as when <paramref name="fileMode"/> is <c>FileMode.Truncate</c> or <c>FileMode.Open</c>,
            and the file specified by path does not exist. The file must already exist in these modes.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter.SetAttributes(System.String,System.Nullable{System.DateTime},System.Nullable{System.IO.FileAttributes})">
            <summary>
            Writes the specified metadata to the file or directory.
            </summary>
            <param name="path">Full path of the file or directory.</param>
            <param name="lastModified">Timestamp (UTC) to write.</param>
            <param name="fileAttributes">Attributes to write.</param>
            <remarks>
            If specified metadata is not supported, this method should still succeed.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter.FileCopyBatch(System.String,System.String[],System.String,System.String[],System.Boolean,System.Boolean)">
            <summary>
            Performs a local copy on a batch of files.
            </summary>
            <param name="sourceDirName">Directory to copy files from.</param>
            <param name="sourceFileNames">Files in the directory to copy.</param>
            <param name="destDirName">Directory to copy files to.</param>
            <param name="destFileNames">Names of the copied files in the new directory.</param>
            <param name="overwrite">Value indicating whether files should be overwritten.</param>
            <param name="createDirectory">Value indicating whether the target directory should be created if it doesn't exist.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter.MoveDirectory(System.String,System.String)">
            <summary>
            Wrapper for <see cref="M:System.IO.Directory.Move(System.String,System.String)"/>
            </summary>
            <param name="sourceDirName">See <see cref="M:System.IO.Directory.Move(System.String,System.String)"/>.</param>
            <param name="destDirName">See <see cref="M:System.IO.Directory.Move(System.String,System.String)"/>.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter.GetBaseWorkingDirectory">
            <summary>
            Returns the base working directory for the agent.
            </summary>
            <returns>Base working directory for the agent.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.IHostedAgent">
            <summary>
            Represents an <see cref="T:Inedo.BuildMaster.Extensibility.Agents.AgentBase"/> which is remotely hosted.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IHostedAgent.Restart(Inedo.BuildMaster.Extensibility.Agents.IHostedAgentContext)">
            <summary>
            Restarts the remotely hosted agent.
            </summary>
            <param name="context">Context information for the request.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IHostedAgent.Update(Inedo.BuildMaster.Extensibility.Agents.IHostedAgentContext,System.Byte[])">
            <summary>
            Updates the remotely hosted agent.
            </summary>
            <param name="context">Context information for the request.</param>
            <param name="coreAssemblyZip">Zip file containing core assemblies.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IHostedAgent.GetHostedAgentInfo(Inedo.BuildMaster.Extensibility.Agents.IHostedAgentContext)">
            <summary>
            Returns information about the remotely hosted agent including its loaded extensions.
            </summary>
            <param name="context">Context information for the request.</param>
            <returns>Detailed information about the remotely hosted agent.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.IHostedAgentContext">
            <summary>
            Provides context information to implementations of <see cref="T:Inedo.BuildMaster.Extensibility.Agents.IHostedAgent"/>.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.IHostedAgentContext.CoreVersion">
            <summary>
            Gets the core BuildMaster version.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.IHostedAgentContext.ExtensionFiles">
            <summary>
            Gets information about the BuildMaster extension files.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.IRemoteCommandExecuter">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Agents.AgentBase"/> supports command execution for remote actions.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IRemoteCommandExecuter.ExecuteCommand(Inedo.BuildMaster.Extensibility.Actions.RemoteActionBase,System.String,System.String[])">
            <summary>
            Executes the specified command on the specified packaged remote action.
            </summary>
            <param name="action">The remote action.</param>
            <param name="commandName">The name of the command to execute.</param>
            <param name="commandArgs">The arguments to pass to the command.</param>
            <returns>Return value of the command.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IRemoteCommandExecuter.IsExecuting">
            <summary>
            Determines whether a command is currently executing.
            </summary>
            <returns>
            Value indicating whether a command is currently executing.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IRemoteCommandExecuter.CancelCommand(System.Int32)">
            <summary>
            Cancels any running or pending remote commands for the specified exeuction.
            </summary>
            <param name="executionId">The execution ID.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.IRemoteMethodExecuter">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Agents.AgentBase"/> supports executing a method on the remote server.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IRemoteMethodExecuter.InvokeMethod(System.Reflection.MethodBase,System.Object,System.Object[])">
            <summary>
            Invokes the method on the remote server using the specified arguments, and returns the result.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="instance">The instance to serialize and invoke the method on.</param>
            <param name="parameters">The parameters to pass to the method. May be null if there are no parameters.</param>
            <returns>Return value of the method if applicable; otherwise null.</returns>
            <remarks>
            The method supplied in <paramref name="method"/> must refer to a single static method
            or a single instance method of a serializable class. The values in <paramref name="parameters"/>
            must correspond to the arguments types of the specified method. If the remote method throws an unhandled
            exception, the exception will be rethrown at the client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is not valid or <paramref name="parameters"/> are not valid. See Remarks.</exception>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.IRemoteProcessExecuter`1">
            <summary>
            Implemented by agents that can execute a process remotely.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IRemoteProcessExecuter`1.CreateProcess(Inedo.BuildMaster.Extensibility.Agents.AgentProcessStartInfo)">
            <summary>
            Creates a process on the agent.
            </summary>
            <param name="startInfo">The process start info.</param>
            <returns>Instance used to control and monitor the remote process.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.IRemoteZip">
            <summary>
            Indicates that an agent can create and extract zip files.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IRemoteZip.CreateZipFile(System.String,System.String)">
            <summary>
            Creates a zip file on the remote server.
            </summary>
            <param name="sourcePath">Path of the directory to zip.</param>
            <param name="targetFileName">Path to the zip file to create.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.IRemoteZip.ExtractZipFile(System.String,System.String,System.Boolean)">
            <summary>
            Extracts a zip file on the remote server.
            </summary>
            <param name="sourceFileName">Path to the zip file to extract.</param>
            <param name="targetPath">Path to extract the file to.</param>
            <param name="overwrite">Value indicating whether to overwrite files in the target directory.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.LocalBinaryDataProcess">
            <summary>
            Represents a process on the local machine that generates binary output.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1">
            <summary>
            Provides common functionality for executing a local process and reading its output.
            </summary>
            <typeparam name="TData">The type of the data received from the process.</typeparam>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1.#ctor(Inedo.BuildMaster.Extensibility.Agents.AgentProcessStartInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1"/> class.
            </summary>
            <param name="startInfo">Process startup information used to create the process.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="startInfo"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1.Start">
            <summary>
            Starts the process.
            </summary>
            <exception cref="T:System.InvalidOperationException">The process has already been started.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1.Kill">
            <summary>
            Immediately terminates the process.
            </summary>
            <exception cref="T:System.InvalidOperationException">The process has not been started or has already terminated.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1.WaitForExit(System.Nullable{System.Int32})">
            <summary>
            Blocks until the process exits or the timeout length is exceeded.
            </summary>
            <param name="milliseconds">The timeout length in milliseconds. Null or <see cref="F:System.Threading.Timeout.Infinite"/> indicates an infinite timeout length.</param>
            <returns>True if process exited; false if the timeout length was exceeded.</returns>
            <exception cref="T:System.InvalidOperationException">The process has not been started.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1.OnErrorDataReceived(Inedo.BuildMaster.Extensibility.Agents.ProcessDataReceivedEventArgs{`0})">
            <summary>
            Raises the <see cref="E:ErrorDataReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:Inedo.BuildMaster.Extensibility.Agents.ProcessDataReceivedEventArgs`1"/> instance containing the event data.</param>
            <exception cref="T:System.ArgumentNullException">e</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1.OnOutputDataReceived(Inedo.BuildMaster.Extensibility.Agents.ProcessDataReceivedEventArgs{`0})">
            <summary>
            Raises the <see cref="E:OutputDataReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:Inedo.BuildMaster.Extensibility.Agents.ProcessDataReceivedEventArgs`1"/> instance containing the event data.</param>
            <exception cref="T:System.ArgumentNullException">e</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1.OnExited(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Exited"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.ArgumentNullException">e</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1.ReadProcessOutputAsync">
            <summary>
            Asynchronously reads all of the process output from output and error.
            </summary>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1.Exited">
            <summary>
            Occurs when the process has exited.
            </summary>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1.ErrorDataReceived">
            <summary>
            Occurs when error data has been received.
            </summary>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1.OutputDataReceived">
            <summary>
            Occurs when output data has been received.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1.ExitCode">
            <summary>
            Gets the process exit code.
            </summary>
            <exception cref="T:System.InvalidOperationException">The process has not been started or has not yet terminated.</exception>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1.HasExited">
            <summary>
            Gets a value indicating whether the process has exited.
            </summary>
            <exception cref="T:System.InvalidOperationException">The process has not been started.</exception>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1.StartTime">
            <summary>
            Gets the process start time in UTC, or null if the process has not been started.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1.ExitTime">
            <summary>
            Gets the process exit time in UTC, or null if the process has not exited.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1.OutputFileName">
            <summary>
            Gets the name of the file to write process output to.
            </summary>
            <remarks>
            If this property is null, output will be captured by BuildMaster instead.
            </remarks>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1.OutputStream">
            <summary>
            Gets the stream which is backed by the file specified in the <see cref="P:OutputFileName"/> property.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1.Process">
            <summary>
            Gets the internal <see cref="P:Inedo.BuildMaster.Extensibility.Agents.LocalProcessBase`1.Process"/>.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.LocalBinaryDataProcess.#ctor(Inedo.BuildMaster.Extensibility.Agents.AgentProcessStartInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Agents.LocalBinaryDataProcess"/> class.
            </summary>
            <param name="startInfo">Process startup information used to create the process.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="startInfo"/> is null.</exception>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.LocalTextDataProcess">
            <summary>
            Represents a process on the local machine that generates text output.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.ITextDataProcess">
            <summary>
            Represents a process that outputs text.
            </summary>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.Agents.ITextDataProcess.ErrorDataReceived">
            <summary>
            Occurs when text has been written to the <see cref="P:StandardError"/> stream.
            </summary>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.Agents.ITextDataProcess.OutputDataReceived">
            <summary>
            Occurs when text has been written to the <see cref="P:StandardOutput"/> stream.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.LocalTextDataProcess.#ctor(Inedo.BuildMaster.Extensibility.Agents.AgentProcessStartInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Agents.LocalTextDataProcess"/> class.
            </summary>
            <param name="startInfo">Process startup information used to create the process.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="startInfo"/> is null.</exception>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.ProcessDataReceivedEventArgs`1">
            <summary>
            Contains data received from a process.
            <typeparam name="TData">The type of the data.</typeparam>
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Agents.ProcessDataReceivedEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Agents.ProcessDataReceivedEventArgs`1"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Agents.ProcessDataReceivedEventArgs`1.Data">
            <summary>
            Gets the data received.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Agents.ProcessIsolationMode">
            <summary>
            Specifies how a remote process will be scheduled to run on an agent.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Agents.ProcessIsolationMode.None">
            <summary>
            The specified process will not prevent any other processes from starting.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Agents.ProcessIsolationMode.PathExclusive">
            <summary>
            Only one instance of the specified process may run on the agent at a time.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Agents.ProcessIsolationMode.AgentExclusive">
            <summary>
            The specified process will only run if no other processes are running.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterBase">
            <summary>
            Responsible for importing files and creating artifacts against builds.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterBase.Import(Inedo.BuildMaster.Extensibility.BuildImporters.IBuildImporterContext)">
            <summary>
            Imports a build with the specified context.
            </summary>
            <param name="context">The context of the build to import.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterBase.Log(Inedo.Diagnostics.MessageLevel,System.String)">
            <summary>
            Writes the specified message to the build importer log.
            </summary>
            <param name="logLevel">Log level of the message.</param>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterBase.OnLogReceived(Inedo.BuildMaster.Extensibility.Actions.LogReceivedEventArgs)">
            <summary>
            Raises the <see cref="E:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterBase.LogReceived"/> event.
            </summary>
            <param name="e">Contains information about the log message.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterBase.GetExtensionConfigurer">
            <summary>
            Returns the configurer for the extension which implements this instance.
            </summary>
            <returns>Instance of the extension configurer if applicable.</returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterBase.ServerId">
            <summary>
            Gets or sets the server ID.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterBase.ExtensionConfigurerId">
            <summary>
            Gets or sets the extension configurer ID.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterBase.DeployableName">
            <summary>
            Gets or sets the name of the deployable.
            </summary>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterBase.LogReceived">
            <summary>
            Raised when a log message has been received.
            </summary>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterBase.MessageLogged">
            <summary>
            Occurs when a message is logged.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterTemplateBase">
            <summary>
            Defines initial configuration values and constraints for a <see cref="T:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterBase"/>.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterTemplateBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterTemplateBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterTemplateBase.GetDescription">
            <summary>
            Creates a control that can represent the configuration of this template
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterTemplateBase.GetExtensionConfigurer">
            <summary>
            Returns the configurer for the extension which implements this instance.
            </summary>
            <returns>Instance of the extension configurer if applicable.</returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterTemplateBase.BuildImporterType">
            <summary>
            Gets the type of the build importer.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterTemplateBase.ServerId">
            <summary>
            Gets or sets the server ID.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterTemplateBase.ExtensionConfigurerId">
            <summary>
            Gets or sets the extension configurer ID.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterTemplateBase.DeployableName">
            <summary>
            Gets or sets the name of the deployable.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterTemplateBase`1">
            <summary>
            Defines initial configuration values and constraints for a <see cref="T:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterBase"/>.
            </summary>
            <typeparam name="TImporter">A <see cref="T:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterBase"/> type.</typeparam>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterTemplateBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterTemplateBase`1"/> class.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterTemplateBase`1.BuildImporterType">
            <summary>
            Gets the type of the build importer.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterPropertiesAttribute">
            <summary>
            Describes a <see cref="T:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterBase"/>.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterPropertiesAttribute.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterPropertiesAttribute"/> class.
            </summary>
            <param name="name">The name of the extension.</param>
            <param name="description">The description of the extension.</param>
            <param name="templateType">Type of the template.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterPropertiesAttribute.TemplateType">
            <summary>
            Gets the type of the template.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.BuildImporters.IBuildImporterContext">
            <summary>
            Contains build importer context information.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext">
            <summary>
            Represents context information for BuildMaster.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext.ApplicationGroupId">
            <summary>
            Gets the ID of the application group ID in the current context, or null if not applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext.ApplicationId">
            <summary>
            Gets the ID of the application in the current context, or null if not applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext.ReleaseNumber">
            <summary>
            Gets the release number in the current context, or null if not applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext.BuildNumber">
            <summary>
            Gets the build number in the current context, or null if not applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext.DeployableId">
            <summary>
            Gets the ID of the deployable in the current context, or null if not applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext.ExecutionId">
            <summary>
            Gets the ID of the execution in the current context, or null if not applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext.EnvironmentId">
            <summary>
            Gets the ID of the environment in the current context, or null if not applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext.ServerId">
            <summary>
            Gets the ID of the server in the current context, or null if not applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext.WorkflowId">
            <summary>
            Gets the ID of the workflow in the current context, or null if not applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.BuildImporters.IBuildImporterContext.ApplicationId">
            <summary>
            Gets the ID of the application in the current context.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.BuildImporters.IBuildImporterContext.WorkflowId">
            <summary>
            Gets the ID of the workflow in the current context.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.BuildImporters.ICustomBuildNumberProvider">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterBase"/> supports getting a custom build number
            from a third-party source.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.BuildImporters.ICustomBuildNumberProvider.BuildNumber">
            <summary>
            Gets the build number from the custom <see cref="T:Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterBase"/>, or null if BuildMaster
            should auto-generate the build number.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase">
            <summary>
            An event listener that provides additional email functionality
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase">
            <summary>
            Event listeners are triggered in response to a BuildMaster event.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.GetEventTypes">
            <summary>
            Gets the event type codes that this listener responds to.
            </summary>
            <returns>Collection of event type codes.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.EventOccurred(Inedo.BuildMaster.Events.BuildMasterEvent)">
            <summary>
            Invoked when one of the events indicated by the <see cref="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.GetEventTypes"/> method occurs.
            </summary>
            <param name="eventDetails">The event details.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.GetCustomDescription">
            <summary>
            Returns a user friendly description of the event listener and its configuration.
            </summary>
            <returns>A description of the configured instance.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.GetEventTypesSupported(System.Type)">
            <summary>
            Returns a sequence of event types which the specified event listener type supports.
            </summary>
            <param name="eventListenerType">The event listener type.</param>
            <returns>Sequence of supported event listeners.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventListenerType"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="eventListenerType"/> does not inherit from <see cref="T:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase"/>.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.Log(Inedo.Diagnostics.MessageLevel,System.String)">
            <summary>
            Writes the specified message to the Provider's log.
            </summary>
            <param name="logLevel">Log level of the message.</param>
            <param name="message">Message to log.</param>
            <remarks>
            Instead of calling <see cref="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.Log(Inedo.Diagnostics.MessageLevel,System.String)"/> directly, it is often more convenient
            to call the more specific <see cref="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.LogDebug(System.String,System.Object[])"/>,
            <see cref="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.LogError(System.String,System.Object[])"/>, <see cref="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.LogInformation(System.String,System.Object[])"/>,
            or <see cref="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.LogWarning(System.String,System.Object[])"/> method.
            </remarks>
            <seealso cref="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.LogDebug(System.String,System.Object[])"/>
            <seealso cref="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.LogInformation(System.String,System.Object[])"/>
            <seealso cref="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.LogWarning(System.String,System.Object[])"/>
            <seealso cref="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.LogError(System.String,System.Object[])"/>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.LogDebug(System.String)">
            <summary>
            Logs the specified message to the Provider's log with a Debug log level.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.LogDebug(System.String,System.Object[])">
            <summary>
            Logs the specified message to the Provider's log with a Debug log level.
            </summary>
            <param name="messageFmt">Message to log as a composite format string.</param>
            <param name="args">Arguments for the composite format string.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.LogError(System.String)">
            <summary>
            Logs the specified message to the Provider's log with an Error log level.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.LogError(System.String,System.Object[])">
            <summary>
            Logs the specified message to the Provider's log with an Error log level.
            </summary>
            <param name="messageFmt">Message to log as a composite format string.</param>
            <param name="args">Arguments for the composite format string.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.LogInformation(System.String)">
            <summary>
            Logs the specified message to the Provider's log with an Information log level.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.LogInformation(System.String,System.Object[])">
            <summary>
            Logs the specified message to the Provider's log with an Information log level.
            </summary>
            <param name="messageFmt">Message to log as a composite format string.</param>
            <param name="args">Arguments for the composite format string.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.LogWarning(System.String)">
            <summary>
            Logs the specified message to the Provider's log with a Warning log level.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.LogWarning(System.String,System.Object[])">
            <summary>
            Logs the specified message to the Provider's log with a Warning log level.
            </summary>
            <param name="messageFmt">Message to log as a composite format string.</param>
            <param name="args">Arguments for the composite format string.</param>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.LogReceived">
            <summary>
            Occurs when a log message has been received.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase.OwnerUsername">
            <summary>
            Gets or sets the user name of the user which owns this event listener.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase.GetEmailAddresses">
            <summary>
            Gets the email addresses.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase.GeneratePlainTextBodyFromHtml(System.String)">
            <summary>
            Generates the plain text from HTML.
            </summary>
            <param name="htmlEmailBody">The HTML email body.</param>
            <returns></returns>
            <remarks>
            This method is used by <see cref="M:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase.SendEmail(System.String,System.String)"/> to generate a plaintext
            message from html. This is very simplistic; it uses a regex to strip tags, replaces BR with linebreaks
            and de-encodes nbsp, lt, gt, and amp entities. It's fine for simple html, but if you 
            need good text formating, use a different overload
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase.SendEmailFromTemplate(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Sends a notification email with variable replacements.
            </summary>
            <param name="subject">The subject.</param>
            <param name="variableReplacements">The variable replacements.</param>
            <remarks>The email HTML and plain-text bodies are loaded from embedded resources in the same path as
            the type of the <see cref="T:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase"/>, and the namespace must match the folder path of both .txt and .html resources.</remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase.GetHtmlTemplateStream">
            <summary>
            Gets the HTML template stream used by the <see cref="M:SendEmailFromTemplate"/> method.
            </summary>
            <returns>A stream which contains the HTML email body template.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase.GetPlainTextBodyStream">
            <summary>
            Gets the plain-text body template stream used by the <see cref="M:SendEmailFromTemplate"/> method.
            </summary>
            <returns>A stream which contains the plain-text email body template.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase.GetMailMessage(System.String,System.String,System.String)">
            <summary>
            Gets the mail message.
            </summary>
            <param name="subject">The subject.</param>
            <param name="htmlEmailBody">The HTML email body.</param>
            <param name="plainTextBody">The plain text body.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase.GetDefaultEmailAddress">
            <summary>
            Gets the default email address of the event listener's owner.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase.GetDefaultEmailAddress(System.String)">
            <summary>
            Gets the default email address of the specified username.
            </summary>
            <param name="username">The username.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase.SendEmail(System.String,System.String)">
            <summary>
            Sends the email.
            </summary>
            <param name="subject">The subject.</param>
            <param name="htmlEmailBody">The HTML email body.</param>
            <remarks>
            This uses <see cref="M:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase.GeneratePlainTextBodyFromHtml(System.String)"/> to generate a plain
            body text</remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase.SendEmail(System.String,System.String,System.String)">
            <summary>
            Sends the email.
            </summary>
            <param name="subject">The subject.</param>
            <param name="htmlEmailBody">The HTML email body.</param>
            <param name="plainTextBody">The plain text body.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase.SendEmail(System.Net.Mail.MailMessage)">
            <summary>
            Sends the email.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase.ApplyBuildMasterEmailTemplate(System.String)">
            <summary>
            Applies the build master email template.
            </summary>
            <param name="htmlBody">The HTML body.</param>
            <returns></returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase.EmailAddresses">
            <summary>
            Gets or sets the email addresses that instances may use to send out emails.
            </summary>
            <remarks>
            When null or empty, the default email address of the context's owner will be used.
            </remarks>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase`1">
            <summary>
            An event listener that provides additional email functionality
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <remarks>
            This class is intended to make listening to a single event simpler;
            for multiple event listening, use the base class 
            <see cref="T:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase"/>
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase`1"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase`1.GetEventTypes">
            <summary>
            Gets the event type codes that this listener may listen to
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase`1.EventOccurred(Inedo.BuildMaster.Events.BuildMasterEvent)">
            <summary>
            Events the occurred.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase`1.EventOccurred(`0)">
            <summary>
            Events the occurred.
            </summary>
            <param name="eventDetails">The event details.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.EventListeners.NotifierAdapter`1">
            <summary>
            Allows a legacy <see cref="T:Inedo.BuildMaster.Extensibility.Notifiers.NotifierBase"/> to be used as an <see cref="T:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase"/>
            </summary>
            <typeparam name="TNotifier">The type of the notifier.</typeparam>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.NotifierAdapter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.EventListeners.NotifierAdapter`1"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.NotifierAdapter`1.GetEventTypes">
            <summary>
            Gets the event type codes that this listener responds to.
            </summary>
            <returns>Collection of event type codes.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.NotifierAdapter`1.EventOccurred(Inedo.BuildMaster.Events.BuildMasterEvent)">
            <summary>
            Invoked when one of the events indicated by the <see cref="M:Inedo.BuildMaster.Extensibility.EventListeners.NotifierAdapter`1.GetEventTypes"/> method occurs.
            </summary>
            <param name="eventDetails">The event details.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:Inedo.BuildMaster.Extensibility.EventListeners.NotifierAdapter`1.CreateNotifier(Inedo.BuildMaster.Events.BuildMasterEvent)"/> method returns null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.NotifierAdapter`1.CreateNotifier(Inedo.BuildMaster.Events.BuildMasterEvent)">
            <summary>
            Returns a legacy notifier for the specified event.
            </summary>
            <param name="eventDetails">The event details.</param>
            <returns>Legacy notifier for the specified event.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase`1">
            <summary>
            Event listeners are triggered in response to a BuildMaster event.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <remarks>
            This class is intended to make listening to a single event simpler.
            To listen for multiple events inherit the <see cref="T:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase"/>
            class directly.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase`1"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase`1.GetEventTypes">
            <summary>
            Gets the event type codes that this listener responds to.
            </summary>
            <returns>Collection of event type codes.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase`1.EventOccurred(Inedo.BuildMaster.Events.BuildMasterEvent)">
            <summary>
            Invoked when one of the events indicated by the <see cref="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase`1.GetEventTypes"/> method occurs.
            </summary>
            <param name="eventDetails">The event details.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase`1.EventOccurred(`0)">
            <summary>
            Invoked when the event occurs.
            </summary>
            <param name="eventDetails">The event details.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Variables.IVariableEvaluationContext">
            <summary>
            Contains context information required for variable expression evaluation.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.IVariableEvaluationContext.GetVariableValue(System.String)">
            <summary>
            Returns the value of the specified variable if it was found; otherwise returns null.
            </summary>
            <param name="variableName">The name of the variable.</param>
            <returns>Value of the specified variable if it was found; otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="variableName"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.IVariableEvaluationContext.GetFunction(System.String)">
            <summary>
            Returns the function with the specified name if it was found; otherwise returns null.
            </summary>
            <param name="functionName">The name of the function.</param>
            <returns>Specified function if it was found; otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="functionName"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.IVariableEvaluationContext.GetFunctionByAlias(System.String)">
            <summary>
            Returns the function with the specified alias if it was found; otherwise returns null.
            </summary>
            <param name="functionAlias">The alias of the function.</param>
            <returns>Specified function if it was found; otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="functionAlias"/> is null or empty.</exception>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Variables.IVariableEvaluationContext.GenericContext">
            <summary>
            Gets the generic context which will be supplied to variable functions.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerPropertiesAttribute">
            <summary>
            Describes an event listener.
            </summary>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerBase"/>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerPropertiesAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerPropertiesAttribute"/> class.
            </summary>
            <param name="name">The name of the extension.</param>
            <param name="description">The description of the extension.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.EventListeners.EventListenerPropertiesAttribute.RequiresManageAllPrivileges">
            <summary>
            Gets a value indicating whether creation of this notifier requires the Events_ManageAllNotifiers secured task.
            </summary>
            <remarks>
            When set to true, this event listener will not be displayed for low-privileged users who want to create personal event listeners.
            </remarks>
        </member>
        <member name="T:Inedo.BuildMaster.Events.BuildMasterEventFactory">
            <summary>
            Creates <see cref="T:Inedo.BuildMaster.Events.BuildMasterEvent"/> instances based on event types.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Events.BuildMasterEventFactory.CreateEventWithDetails(System.String,System.Nullable{System.Int32},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a <see cref="T:Inedo.BuildMaster.Events.BuildMasterEvent"/> and popluates its details.
            </summary>
            <param name="eventCode">The event code.</param>
            <param name="applicationId">The application identifier.</param>
            <param name="details">The details.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.EventListeners.EmailNotifierAdapter`1">
            <summary>
            Allows a legacy <see cref="T:Inedo.BuildMaster.Extensibility.Notifiers.NotifierBase"/> to be used as an <see cref="T:Inedo.BuildMaster.Extensibility.EventListeners.EmailEventListenerBase"/>.
            </summary>
            <typeparam name="TNotifier">The type of the notifier.</typeparam>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EmailNotifierAdapter`1.CreateNotifier(Inedo.BuildMaster.Events.BuildMasterEvent)">
            <summary>
            Creates the notifier for a given event.
            </summary>
            <param name="eventDetails">The event details.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EmailNotifierAdapter`1.GetEventTypes">
            <summary>
            Gets the event type codes that this listener may listen to
            </summary>
            <remarks>
            By default, this returns the event types from a default instance of TNotifier
            </remarks>
            <exception cref="T:System.InvalidOperationException">An instance of TNotifier cannot be created</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.EventListeners.EmailNotifierAdapter`1.EventOccurred(Inedo.BuildMaster.Events.BuildMasterEvent)">
            <summary>
            Events the occurred.
            </summary>
            <param name="eventDetails">The event details.</param>
            <exception cref="T:System.InvalidOperationException">CreateNotifier cannot return null</exception>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.LoggerExtensions">
            <summary>
            Contains extension methods for the <see cref="T:Inedo.BuildMaster.Extensibility.ILogger"/> interface.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.LoggerExtensions.LogDebug(Inedo.BuildMaster.Extensibility.ILogger,System.String)">
            <summary>
            Logs the specified message with a debug log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="message">The message to log.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.LoggerExtensions.LogDebug(Inedo.BuildMaster.Extensibility.ILogger,System.String,System.Object)">
            <summary>
            Logs the specified message with a debug log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="arg0">The first argument for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.LoggerExtensions.LogDebug(Inedo.BuildMaster.Extensibility.ILogger,System.String,System.Object,System.Object)">
            <summary>
            Logs the specified message with a debug log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="arg0">The first argument for the composite format string.</param>
            <param name="arg1">The second argument for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.LoggerExtensions.LogDebug(Inedo.BuildMaster.Extensibility.ILogger,System.String,System.Object[])">
            <summary>
            Logs the specified message with a debug log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="args">The arguments for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.LoggerExtensions.LogInformation(Inedo.BuildMaster.Extensibility.ILogger,System.String)">
            <summary>
            Logs the specified message with an information log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="message">The message to log.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.LoggerExtensions.LogInformation(Inedo.BuildMaster.Extensibility.ILogger,System.String,System.Object)">
            <summary>
            Logs the specified message with an information log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="arg0">The first argument for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.LoggerExtensions.LogInformation(Inedo.BuildMaster.Extensibility.ILogger,System.String,System.Object,System.Object)">
            <summary>
            Logs the specified message with an information log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="arg0">The first argument for the composite format string.</param>
            <param name="arg1">The second argument for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.LoggerExtensions.LogInformation(Inedo.BuildMaster.Extensibility.ILogger,System.String,System.Object[])">
            <summary>
            Logs the specified message with an information log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="args">The arguments for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.LoggerExtensions.LogWarning(Inedo.BuildMaster.Extensibility.ILogger,System.String)">
            <summary>
            Logs the specified message with a warning log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="message">The message to log.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.LoggerExtensions.LogWarning(Inedo.BuildMaster.Extensibility.ILogger,System.String,System.Object)">
            <summary>
            Logs the specified message with a warning log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="arg0">The first argument for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.LoggerExtensions.LogWarning(Inedo.BuildMaster.Extensibility.ILogger,System.String,System.Object,System.Object)">
            <summary>
            Logs the specified message with a warning log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="arg0">The first argument for the composite format string.</param>
            <param name="arg1">The second argument for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.LoggerExtensions.LogWarning(Inedo.BuildMaster.Extensibility.ILogger,System.String,System.Object[])">
            <summary>
            Logs the specified message with a warning log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="args">The arguments for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.LoggerExtensions.LogError(Inedo.BuildMaster.Extensibility.ILogger,System.String)">
            <summary>
            Logs the specified message with an error log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="message">The message to log.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.LoggerExtensions.LogError(Inedo.BuildMaster.Extensibility.ILogger,System.String,System.Object)">
            <summary>
            Logs the specified message with an error log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="arg0">The first argument for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.LoggerExtensions.LogError(Inedo.BuildMaster.Extensibility.ILogger,System.String,System.Object,System.Object)">
            <summary>
            Logs the specified message with an error log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="arg0">The first argument for the composite format string.</param>
            <param name="arg1">The second argument for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.LoggerExtensions.LogError(Inedo.BuildMaster.Extensibility.ILogger,System.String,System.Object[])">
            <summary>
            Logs the specified message with an error log level.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="format">The message to log as a composite format string.</param>
            <param name="args">The arguments for the composite format string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="logger"/> is null.</exception>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IIssueCloser">
            <summary>
            Implemented by an <see cref="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase"/> to indicate that
            the issue tracker supports closing issues.
            </summary>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase"/>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IIssueCloser.CloseIssue(Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionContext,System.String)">
            <summary>
            Closes a specific issue in the specified context.
            </summary>
            <param name="context">The current issue tracker context.</param>
            <param name="issueId">The ID of the issue to close.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null or <paramref name="issueId"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IIssueCloser.CloseAllIssues(Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionContext)">
            <summary>
            Closes all issues in the specified context.
            </summary>
            <param name="context">The current issue tracker context.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IIssueStatusUpdater">
            <summary>
            Implemented by an <see cref="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase"/> to indicate that
            the issue tracker supports changing the status of issues.
            </summary>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase"/>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IIssueStatusUpdater.ChangeIssueStatus(Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionContext,System.String,System.String)">
            <summary>
            Changes the status of the specified issue.
            </summary>
            <param name="context">The current issue tracker context.</param>
            <param name="issueId">The ID of the issue whose status will be changed.</param>
            <param name="issueStatus">The new status of the issue.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null or <paramref name="issueId"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IIssueStatusUpdater.ChangeStatusForAllIssues(Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionContext,System.String,System.String)">
            <summary>
            Changes the status of all of the issues in the specified context that have the
            specified initial status.
            </summary>
            <param name="context">The current issue tracker context.</param>
            <param name="fromStatus">The initial status. If null, any status will match.</param>
            <param name="toStatus">The new status of the matching issues.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IIssueCommenter">
            <summary>
            Implemented by an <see cref="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase"/> to indicate that
            the issue tracker supports adding comments to issues.
            </summary>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase"/>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IIssueCommenter.AddComment(Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionContext,System.String,System.String)">
            <summary>
            Adds the specified text as a comment to the specified issue.
            </summary>
            <param name="context">The current issue tracker context.</param>
            <param name="issueId">The ID of the issue to add the comment to.</param>
            <param name="commentText">The text of the comment.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null or <paramref name="issueId"/> is null or empty.</exception>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IIssueTrackerIssue">
            <summary>
            Describes an issue in an issue tracker.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IIssueTrackerIssue.Id">
            <summary>
            Gets the unique ID of the issue.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IIssueTrackerIssue.Status">
            <summary>
            Gets the current status of the issue.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IIssueTrackerIssue.Title">
            <summary>
            Gets the HTML title of the issue.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IIssueTrackerIssue.Description">
            <summary>
            Gets the HTML description of the issue.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IIssueTrackerIssue.Submitter">
            <summary>
            Gets the name of the user that submitted the issue.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IIssueTrackerIssue.SubmittedDate">
            <summary>
            Gets the UTC date when the issue was submitted.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IIssueTrackerIssue.IsClosed">
            <summary>
            Gets a value indicating whether the issue is considered closed.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IIssueTrackerIssue.Url">
            <summary>
            Gets the URL of the issue in the original issue tracker if applicable.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IReleaseManager">
            <summary>
            Implemented by an <see cref="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase"/> to indicate that
            the issue tracker supports creating and closing releases.
            </summary>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase"/>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IReleaseManager.CreateRelease(Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionContext)">
            <summary>
            Creates the release specified by the current context in the issue tracker.
            </summary>
            <param name="context">The current issue tracker context.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IReleaseManager.DeployRelease(Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionContext)">
            <summary>
            Closes the release specified by the current context in the issue tracker.
            </summary>
            <param name="context">The current issue tracker context.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerApplicationConfigurationBase">
            <summary>
            Container for application-level filtering options used by an <see cref="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase"/>.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerApplicationConfigurationBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerApplicationConfigurationBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerApplicationConfigurationBase.GetDescription">
            <summary>
            Returns a friendly description of the issue tracker application configuration.
            </summary>
            <returns>Friendly description of the issue tracker application configuration.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase">
            <summary>
            Represents a connection to an issue tracker.
            </summary>
            <remarks>
            This is the preferred base class for issue tracking integration.
            </remarks>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackingProviderBase">
            <summary>
            Base class for all issue tracking providers.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.ProviderBase">
            <summary>
            Base class for all providers.
            </summary>
            <remarks>
            This class should not normally be inherited directly in an extension.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.ProviderBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.IsAvailable">
            <summary>
            When implemented in a derived class, indicates whether the provider 
            is installed and available for use in the current execution context.
            </summary>
            <returns>Value indicating whether the provider is available in the current context.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.ValidateConnection">
            <summary>
            When implemented in a derived class, attempts to connect with the
            current configuration and throws an exception if unsuccessful.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.ExecuteCommandLine(System.String,System.String,System.String)">
            <summary>
            Executes a command line process on the provider's agent.
            </summary>
            <param name="fileName">The file name of the process to execute.</param>
            <param name="arguments">The arguments to pass to the process.</param>
            <param name="workingDirectory">The working directory of the process.</param>
            <returns>Results of the process.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.ExecuteCommandLine(Inedo.BuildMaster.Extensibility.Agents.AgentProcessStartInfo)">
            <summary>
            Executes a command line process on the provider's agent.
            </summary>
            <param name="startInfo">The process start info.</param>
            <returns>Results of the process.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="startInfo"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.ThrowIfTimeoutExpired">
            <summary>
            Throws a <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionTimeoutException"/> if the action has been executing for at least
            <see cref="P:Timeout"/> seconds.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.SetAgent(Inedo.BuildMaster.Extensibility.Agents.AgentBase,System.Boolean)">
            <summary>
            Inititializes the <see cref="P:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.Agent"/> property.
            </summary>
            <param name="agent">Value to write to the property.</param>
            <param name="disposeAgent">Value indicating whether the agent should be disposed when the provider is disposed.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.Log(Inedo.Diagnostics.MessageLevel,System.String)">
            <summary>
            Writes the specified message to the Provider's log.
            </summary>
            <param name="logLevel">Log level of the message.</param>
            <param name="message">Message to log.</param>
            <remarks>
            Instead of calling <see cref="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.Log(Inedo.Diagnostics.MessageLevel,System.String)"/> directly, it is often more convenient
            to call the more specific <see cref="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.LogDebug(System.String,System.Object[])"/>,
            <see cref="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.LogError(System.String,System.Object[])"/>, <see cref="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.LogInformation(System.String,System.Object[])"/>,
            or <see cref="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.LogWarning(System.String,System.Object[])"/> method.
            </remarks>
            <seealso cref="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.LogDebug(System.String,System.Object[])"/>
            <seealso cref="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.LogInformation(System.String,System.Object[])"/>
            <seealso cref="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.LogWarning(System.String,System.Object[])"/>
            <seealso cref="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.LogError(System.String,System.Object[])"/>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.LogProcessExecution(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Writes a message to the Provider's log with a Debug log level detailing process execution information.
            </summary>
            <param name="procInfo">The proc info.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.LogDebug(System.String)">
            <summary>
            Logs the specified message to the Provider's log with a Debug log level.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.LogDebug(System.String,System.Object[])">
            <summary>
            Logs the specified message to the Provider's log with a Debug log level.
            </summary>
            <param name="messageFmt">Message to log as a composite format string.</param>
            <param name="args">Arguments for the composite format string.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.LogError(System.String)">
            <summary>
            Logs the specified message to the Provider's log with an Error log level.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.LogError(System.String,System.Object[])">
            <summary>
            Logs the specified message to the Provider's log with an Error log level.
            </summary>
            <param name="messageFmt">Message to log as a composite format string.</param>
            <param name="args">Arguments for the composite format string.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.LogInformation(System.String)">
            <summary>
            Logs the specified message to the Provider's log with an Information log level.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.LogInformation(System.String,System.Object[])">
            <summary>
            Logs the specified message to the Provider's log with an Information log level.
            </summary>
            <param name="messageFmt">Message to log as a composite format string.</param>
            <param name="args">Arguments for the composite format string.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.LogWarning(System.String)">
            <summary>
            Logs the specified message to the Provider's log with a Warning log level.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.LogWarning(System.String,System.Object[])">
            <summary>
            Logs the specified message to the Provider's log with a Warning log level.
            </summary>
            <param name="messageFmt">Message to log as a composite format string.</param>
            <param name="args">Arguments for the composite format string.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.Agent">
            <summary>
            Gets the agent responsible for executing this Provider's commands.
            </summary>
            <remarks>
            This is guaranteed to be valid when any of the provider methods are called except <see cref="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.ToString"/>.
            </remarks>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.LogCommandLineArguments">
            <summary>
            Indicates whether the <see cref="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.ExecuteCommandLine(System.String,System.String,System.String)"/> method should log the command name and arguments.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.CancellationToken">
            <summary>
            Gets the cancellation token used to check for cancellation of an action.
            </summary>
            <remarks>
            This will be null if the legacy plan action executer is used.
            </remarks>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.LogReceived">
            <summary>
            Raised when a log message has been received.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.ProcessResults">
            <summary>
            Contains information about a process.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.ProcessResults.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.ProcessResults"/> class.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.ProcessResults.ExitCode">
            <summary>
            Gets or sets the process exit code.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.ProcessResults.Output">
            <summary>
            Gets or sets the lines written to the output stream of the process.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.ProviderBase.ProcessResults.Error">
            <summary>
            Gets or sets the lines written to the error stream of the process.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackingProviderBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackingProviderBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackingProviderBase.GetIssueUrl(Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerIssue)">
            <summary>
            Returns a URL to the specified issue if the issue tracker is web-based.
            </summary>
            <param name="issue">The issue whose URL is returned.</param>
            <returns>The URL of the specified issue if applicable; otherwise null.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackingProviderBase.GetCreateIssueUrl">
            <summary>
            Returns a URL to a page that can be used to create a new issue if the issue tracker is web-based.
            </summary>
            <returns>The URL of a page for creating a new issue if applicable; otherwise null.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackingProviderBase.GetIssues(System.String)">
            <summary>
            Returns an array of <see cref="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerIssue"/> objects that are for the current
            release.
            </summary>
            <param name="releaseNumber">Release number of issues to return.</param>
            <returns>Array of issues for the specified release.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackingProviderBase.AreAllIssuesClosed(System.String)">
            <summary>
            Returns a value indicating whether all issues are closed for a given release number.
            </summary>
            <param name="releaseNumber">Release number of issues to check.</param>
            <returns>True if all issues are closed for the release; otherwise false.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackingProviderBase.IsIssueClosed(Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerIssue)">
            <summary>
            Returns a value indicating if the specified issue is closed.
            </summary>
            <param name="issue">IssueTrackerIssue to check for a closed state.</param>
            <returns>True if issue is closed; otherwise false.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase.GetDescription">
            <summary>
            Returns a friendly description of the issue tracker connection and its relevant settings.
            </summary>
            <returns>Friendly description of the issue tracker connection and its relevant settings.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase.ToString">
            <summary>
            Returns a string representation of the issue tracker.
            </summary>
            <returns>A string representation of the issue tracker.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase.GetDefaultApplicationConfiguration(System.Int32)">
            <summary>
            Returns the default instance of the issue tracker connection's <see cref="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerApplicationConfigurationBase"/> instance
            which controls how application-level filtering is performed.
            </summary>
            <param name="applicationId">The ID of the BuildMaster application in the current context.</param>
            <returns>Instace of the connection's <see cref="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerApplicationConfigurationBase"/> if applicable; otherwise null.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase.EnumerateIssues(Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionContext)">
            <summary>
            Returns a sequence of all of the issues in the specified context.
            </summary>
            <param name="context">The current issue tracker context.</param>
            <returns>All of the issues in the specified context.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase.GetIssues(System.String)">
            <summary>
            Deprecated. Do not use.
            </summary>
            <param name="releaseNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase.IsIssueClosed(Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerIssue)">
            <summary>
            Deprecated. Do not use.
            </summary>
            <param name="issue"></param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase.GetIssueUrl(Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerIssue)">
            <summary>
            Deprecated. Do not use.
            </summary>
            <param name="issue"></param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionBase.AreAllIssuesClosed(System.String)">
            <summary>
            Deprecated. Do not use.
            </summary>
            <param name="releaseNumber"></param>
            <returns></returns>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionContext">
            <summary>
            Contains context information for connecting to an issue tracker.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionContext.#ctor(Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext,Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerApplicationConfigurationBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionContext"/> class.
            </summary>
            <param name="context">The generic context to build this context from.</param>
            <param name="applicationConfiguration">The issue tracker specific application configuration.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionContext.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerApplicationConfigurationBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionContext"/> class.
            </summary>
            <param name="applicationGroupId">The current application group ID.</param>
            <param name="applicationId">The current application ID.</param>
            <param name="releaseNumber">The current release number.</param>
            <param name="workflowId">The current workflow ID.</param>
            <param name="applicationConfiguration">The issue tracker specific application configuration.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionContext.ApplicationGroupId">
            <summary>
            Gets the ID of the application group ID in the current context, or null if not applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionContext.ApplicationId">
            <summary>
            Gets the ID of the application in the current context, or null if not applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionContext.ReleaseNumber">
            <summary>
            Gets the release number in the current context, or null if not applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionContext.WorkflowId">
            <summary>
            Gets the ID of the workflow in the current context, or null if not applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.IssueTrackerConnections.IssueTrackerConnectionContext.ApplicationConfiguration">
            <summary>
            Gets the application specific configuration for the issue tracker.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementState">
            <summary>
            Indicates the current state of a promotion requirement.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementState.NotMet">
            <summary>
            The promotion requirement is not met.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementState.NotApplicable">
            <summary>
            The promotion requirement is not currently applicable.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementState.Met">
            <summary>
            The promotion requirement is met.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementStatus">
            <summary>
            Contains the current status of a promotion requirement.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementStatus.#ctor(Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementState,Inedo.BuildMaster.Extensibility.ExtensionComponentDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementStatus"/> class.
            </summary>
            <param name="state">The current state of the promotion requirement.</param>
            <param name="description">Description of the current state of the promotion requirement.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementStatus.#ctor(Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementStatus"/> class.
            </summary>
            <param name="state">The current state of the promotion requirement.</param>
            <param name="description">Description of the current state of the promotion requirement.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementStatus.ToString">
            <summary>
            Returns a description of the current state of the promotion requirement.
            </summary>
            <returns>Description of the current state of the promotion requirement.</returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementStatus.State">
            <summary>
            Gets the current state of the promotion requirement.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementStatus.Description">
            <summary>
            Gets a description of the current state of the promotion requirement.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IContextFilterable">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackingProviderBase"/> can filter issues by context.
            </summary>
            <remarks>
            When this interface is implemented, BuildMaster will use this interface to retrieve issues
            instead of using the <see cref="M:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackingProviderBase.GetIssues(System.String)"/> method on 
            <see cref="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackingProviderBase"/>
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IContextFilterable.GetIssues(Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext)">
            <summary>
            Returns an array of <see cref="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerIssue"/> objects that are for the current
            context.
            </summary>
            <param name="context">Context of issues to return.</param>
            <returns>Array of issues for the specified context.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.DistributedSourceControlProviderBase">
            <summary>
            Base class for distributed source control providers.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase">
            <summary>
            Base class for all source control providers.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase.GetLatest(System.String,System.String)">
            <summary>
            When implemented in a derived class, retrieves the latest version of
            the source code from the provider's source path into the target path.
            </summary>
            <param name="sourcePath">Provider source path.</param>
            <param name="targetPath">Target file path.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase.GetDirectoryEntryInfo(System.String)">
            <summary>
            When implemented in a derived class, returns a <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryInfo"/>
            object from the specified source path.
            </summary>
            <param name="sourcePath">Provider source path.</param>
            <returns><see cref="T:Inedo.BuildMaster.Files.DirectoryEntryInfo"/> object populated with the files in source control.</returns>
            <remarks>
            This method is not designed to be recursive.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase.GetFileContents(System.String)">
            <summary>
            When implemented in a derived class, returns the contents of the specified file.
            </summary>
            <param name="filePath">Provider file path.</param>
            <returns>Contents of the file as an array of bytes.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase.CreateSourceControlContext(System.Object)">
            <summary>
            When overridden in a derived class, creates a source control context from a specified object.
            </summary>
            <param name="contextData">Optional, arbitrary data which can be used
            to construct a source control context.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase.DirectorySeparator">
            <summary>
            Gets the <see cref="T:System.Char"/> used by the 
            provider to separate directories/files in a path string.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IMultipleRepositoryProvider">
            <summary>
            Represents a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase"/> with one or more user-defined
            <see cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceRepository"/> instance.
            </summary>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase"/>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IMultipleRepositoryProvider.DisplayEditor">
            <summary>
            Gets a value indicating whether to display the multiple repository editor.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IMultipleRepositoryProvider.LabelText">
            <summary>
            Gets the label text for the remote URL property.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IMultipleRepositoryProvider.Repositories">
            <summary>
            Gets or sets the repositories.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.ILocalWorkspaceProvider">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase"/> has a local workspace
            on the provider's assigned agent that is used to keep a persisent copy of a 
            repository for quicker source control operations.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.ILocalWorkspaceProvider.GetWorkspaceDiskPath(Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext)">
            <summary>
            Gets the workspace disk path.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.ILocalWorkspaceProvider.EnsureLocalWorkspace(Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext)">
            <summary>
            Ensures that a local workspace exists.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.ILocalWorkspaceProvider.UpdateLocalWorkspace(Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext)">
            <summary>
            Updates the local workspace to either the latest files on disk, or more commonly
            for instances of <see cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IMultipleRepositoryProvider"/>, the latest index 
            state of the remote repository.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.ILocalWorkspaceProvider.ExportFiles(Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext,System.String)">
            <summary>
            Exports the files without any index information to the specified target directory.
            </summary>
            <param name="context">The context.</param>
            <param name="targetDirectory">The target directory.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.ILocalWorkspaceProvider.DeleteWorkspace(Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext)">
            <summary>
            Deletes the local workspace associated with the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.ILabelingProvider">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase"/> supports labels.
            </summary>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase"/>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.ILabelingProvider.ApplyLabel(System.String,System.String)">
            <summary>
            When implemented in a derived class, applies the specified label to the specified
            source path.
            </summary>
            <param name="label">Label to apply.</param>
            <param name="sourcePath">Path to apply label to.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.ILabelingProvider.GetLabeled(System.String,System.String,System.String)">
            <summary>
            When implemented in a derived class, retrieves labeled
            source code from the provider's source path into the target path.
            </summary>
            <param name="label">Label of source files to get.</param>
            <param name="sourcePath">Provider source path.</param>
            <param name="targetPath">Target file path.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IRevisionProvider">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase"/> can determine the latest revision of a path in source control.
            </summary>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase"/>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IRevisionProvider.GetCurrentRevision(System.String)">
            <summary>
            Returns a fingerprint that represents the current revision on the source control repository.
            </summary>
            <param name="path">The source control path whos revision is returned.</param>
            <returns>A representation of the current revision in source control.</returns>
            <remarks>
            <para>Notes to implementers:</para>
            <para>
            The object returned by this method should implement <see cref="M:System.Object.Equals(System.Object)"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.DistributedSourceControlProviderBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.DistributedSourceControlProviderBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.DistributedSourceControlProviderBase.CreateSourceControlContext(System.Object)">
            <summary>
            When implemented in a derived class, creates a source control context from a specified object.
            </summary>
            <param name="contextData">Optional, arbitrary data which can be used
            to construct a source control context.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.DistributedSourceControlProviderBase.EnsureLocalWorkspace(Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext)">
            <summary>
            When implemented in a derived class, ensures that a local workspace exists.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.DistributedSourceControlProviderBase.UpdateLocalWorkspace(Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext)">
            <summary>
            When implemented in a derived class, updates the local workspace, typically 
            using a "clone" or "pull" operation.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.DistributedSourceControlProviderBase.DeleteWorkspace(Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext)">
            <summary>
            When implemented in a derived class, deletes a local workspace associated
            with the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.DistributedSourceControlProviderBase.ExportFiles(Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext,System.String)">
            <summary>
            When implemented in a derived class, exports the files without any 
            index information to the specified target directory.
            </summary>
            <param name="context">The context.</param>
            <param name="targetDirectory">The target directory.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.DistributedSourceControlProviderBase.ApplyLabel(System.String,Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext)">
            <summary>
            When implemented in a derived class, applies a label in source control.
            </summary>
            <param name="label">The label.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.DistributedSourceControlProviderBase.GetLabeled(System.String,Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext,System.String)">
            <summary>
            When implemented in a derived class, gets the source with the specified label.
            </summary>
            <param name="label">The label.</param>
            <param name="context">The context.</param>
            <param name="targetPath">The target path.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.DistributedSourceControlProviderBase.EnumerateBranches(Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext)">
            <summary>
            When implemented in a derived class, enumerates branches for a specified source context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.DistributedSourceControlProviderBase.EnumerateLabels(Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext)">
            <summary>
            When implemented in a derived class, enumerates labels/tags for a specified source context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.DistributedSourceControlProviderBase.GetCurrentRevision(Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext)">
            <summary>
            When implemented in a derived class, gets the current revision.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.DistributedSourceControlProviderBase.GetLatest(Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext,System.String)">
            <summary>
            When implemented in a derived class, gets the latest source code and exports the files to a specified <paramref name="targetPath"/>.
            </summary>
            <param name="context">The context.</param>
            <param name="targetPath">The target path.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.DistributedSourceControlProviderBase.GetWorkspaceDiskPath(Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext)">
            <summary>
            Gets the disk path of the current repository/workspace that will be used 
            for source control operations.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.DistributedSourceControlProviderBase.GetLatest(System.String,System.String)">
            <summary>
            When implemented in a derived class, retrieves the latest version of
            the source code from the provider's source path into the target path.
            </summary>
            <param name="sourcePath">Provider source path.</param>
            <param name="targetPath">Target file path.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.DistributedSourceControlProviderBase.DisplayEditor">
            <summary>
            Gets a value indicating whether to display the multiple repository editor.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.DistributedSourceControlProviderBase.LabelText">
            <summary>
            Gets the label text.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.DistributedSourceControlProviderBase.Repositories">
            <summary>
            Gets or sets the repositories.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext">
            <summary>
            Represents contextual information for source control operations.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext.ToLegacyPathString">
            <summary>
            Converts this instance to a pre-v4.7 string format.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext.Branch">
            <summary>
            Gets the branch that should be used by source control operations.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext.Label">
            <summary>
            Gets the label/tag that should be used by source control operations, or null
            if no label/tag is specified.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext.Repository">
            <summary>
            Gets the selected repository for multiple repository providers.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext.WorkspaceDiskPath">
            <summary>
            Gets the disk path of the current repository/workspace that will be used 
            for source control operations.
            </summary>
            <remarks>For instances of <see cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IMultipleRepositoryProvider"/>, this
            value is typically the repository's disk path.</remarks>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlContext.RepositoryRelativePath">
            <summary>
            Gets the source control path relative to the repository root.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceRepositorySerializer">
            <summary>
            Custom serializer for a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceRepository"/>
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceRepositorySerializer.Serialize(System.Object)">
            <summary>
            Returns the content an XML element which represents the current value.
            </summary>
            <param name="instance">The object to serialize.</param>
            <returns>
            Content of an XML element which represents the current value.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceRepositorySerializer.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            Reads configuration for this instance from the specified XML element.
            </summary>
            <param name="element">The XML element to read from.</param>
            <returns>
            Instance deserialized from the element.
            </returns>
        </member>
        <member name="T:Inedo.BuildMaster.Proxies.IAgentProxyFactory">
            <summary>
            Represents a factory for creating agent proxies.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Proxies.IProxyFactory">
            <summary>
            Represents a factory for creating proxies.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Proxies.IProxyFactory.Invoke(System.Guid,System.Reflection.MethodBase,System.Object[])">
            <summary>
            Invokes the specified handle.
            </summary>
            <param name="handle">The handle.</param>
            <param name="method">The method.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Proxies.IProxyFactory.ReleaseProxy(System.Guid)">
            <summary>
            Releases the proxy.
            </summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Proxies.IAgentProxyFactory.CreateProxy(Inedo.BuildMaster.Extensibility.Agents.AgentBase)">
            <summary>
            Creates the proxy.
            </summary>
            <param name="agent">The agent.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Proxies.IAgentProxyFactory.HasService(System.Guid,System.Type)">
            <summary>
            Determines whether the specified handle has service.
            </summary>
            <param name="handle">The handle.</param>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="T:Inedo.BuildMaster.Proxies.IProviderProxyFactory">
            <summary>
            Represents a factory for creating provider proxies.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Proxies.IProviderProxyFactory.CreateProxy(Inedo.BuildMaster.Extensibility.Providers.ProviderBase,Inedo.BuildMaster.Extensibility.Agents.AgentBase)">
            <summary>
            Creates the proxy.
            </summary>
            <param name="provider">The provider.</param>
            <param name="agent">The agent.</param>
            <returns></returns>
        </member>
        <member name="T:Inedo.BuildMaster.Proxies.ProxiedAgent">
            <summary>
            Represents an agent proxy useable from the web application.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Proxies.ProxiedObjectBase`1">
            <summary>
            Base class for proxied objects.
            </summary>
            <typeparam name="TFactory">The object factory type.</typeparam>
        </member>
        <member name="M:Inedo.BuildMaster.Proxies.ProxiedObjectBase`1.TryGetService``1">
            <summary>
            Tries the get service.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Proxies.ProxiedObjectBase`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Proxies.ProxiedObjectBase`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Proxies.ProxiedAgent.TryGetService``1">
            <summary>
            Tries the get service.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns></returns>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Configurers.ConfigurerBase">
            <summary>
            Responsible for storing and accessing the configuration of a component.
            </summary>
            <remarks>
            This class is used internally by BuildMaster.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Configurers.ConfigurerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Configurers.ConfigurerBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Configurers.ConfigurerBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Configurers.Extension.ExtensionConfigurerPropertiesAttribute">
            <summary>
            Marks a class as an the configurer for an extension.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Configurers.Extension.ExtensionConfigurerPropertiesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Configurers.Extension.ExtensionConfigurerPropertiesAttribute"/> class.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Configurers.Extension.ExtensionConfigurerAttribute">
            <summary>
            Specifies the <see cref="T:Inedo.BuildMaster.Extensibility.Configurers.Extension.ExtensionConfigurerBase"/> to use for an extension.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Configurers.Extension.ExtensionConfigurerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Configurers.Extension.ExtensionConfigurerAttribute"/> class.
            </summary>
            <param name="extensionConfigurerType">Type of the extension configurer.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Configurers.Extension.ExtensionConfigurerAttribute.ExtensionConfigurerType">
            <summary>
            Gets the type of the extension configurer used by the extension.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Configurers.Extension.ExtensionConfigurerBase">
            <summary>
            Contains the configuration for an extension.
            </summary>
            <remarks>
            There can only be one <see cref="T:Inedo.BuildMaster.Extensibility.Configurers.Extension.ExtensionConfigurerBase"/> per extension assembly; this is defined by the 
            <see cref="T:Inedo.BuildMaster.Extensibility.Configurers.Extension.ExtensionConfigurerAttribute"/> attribute.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Configurers.Extension.ExtensionConfigurerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Configurers.Extension.ExtensionConfigurerBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Configurers.Extension.ExtensionConfigurerBase.GetOverriddenProperties">
            <summary>
            Returns a sequence of the properties which have been overridden by this instance.
            </summary>
            <returns>The overridden property names.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.DeprecatedInBuildMasterVersionAttribute">
            <summary>
            Marks an extension or class as deprecated by a specific version of BuildMaster.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.DeprecatedInBuildMasterVersionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.DeprecatedInBuildMasterVersionAttribute"/> class.
            </summary>
            <param name="version">The version which deprecates the extension or class.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.DeprecatedInBuildMasterVersionAttribute.DeprecatedVersion">
            <summary>
            Gets the version which deprecates the extension or class.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.DeprecatedInBuildMasterVersionAttribute.ErrorIfUsed">
            <summary>
            Gets or sets a value indicating whether the use of this extension or class should be an error or a warning.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.DeprecatedInBuildMasterVersionAttribute.Message">
            <summary>
            Gets or sets a string containing additional information about what to use in place of this.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.ExtensionIconAttribute">
            <summary>
            Specifies the URL of the extension's icon.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.ExtensionIconAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.ExtensionIconAttribute"/> class.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.ExtensionIconAttribute.Url">
            <summary>
            Gets the URL of the icon.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Gadgets.GadgetBase">
            <summary>
            Represents the base class for all Gadgets.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Gadgets.GadgetBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Gadgets.GadgetBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Gadgets.GadgetBase.CreateFullSizeGadgetControl(Inedo.BuildMaster.Extensibility.Gadgets.GadgetContext)">
            <summary>
            Returns an instance of a <see cref="T:System.Web.UI.Control"/> that can be
            added to a Dashboard page.
            </summary>
            <param name="context">Context information for the gadget.</param>
            <returns><see cref="T:System.Web.UI.Control"/> that can be added to a Dashboard page.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Gadgets.GadgetBase.CreateHalfSizeGadgetControl(Inedo.BuildMaster.Extensibility.Gadgets.GadgetContext)">
            <summary>
            Returns an instance of a <see cref="T:System.Web.UI.Control"/> that can be
            added to a Dashboard page.
            </summary>
            <param name="context">Context information for the gadget.</param>
            <returns><see cref="T:System.Web.UI.Control"/> that can be added to a Dashboard page.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Gadgets.GadgetBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the Gadget.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current configuration of the Gadget.
            </returns>
            <remarks>
            This should return a user-friendly string describing what the Gadget does
            and the state of its important persistent properties.
            </remarks>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Gadgets.GadgetContext">
            <summary>
            Contains information about the context of a dashboard gadget.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Gadgets.GadgetContext.SystemContext">
            <summary>
            Gets the System-level context instance.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Gadgets.GadgetContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Gadgets.GadgetContext"/> class with System-level context.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Gadgets.GadgetContext.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Gadgets.GadgetContext"/> class with Application-level context.
            </summary>
            <param name="applicationId">The application ID.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Gadgets.GadgetContext.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Gadgets.GadgetContext"/> class with Release-level context.
            </summary>
            <param name="applicationId">The application ID.</param>
            <param name="releaseNumber">The release number.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Gadgets.GadgetContext.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Gadgets.GadgetContext"/> class with Build-level context.
            </summary>
            <param name="applicationId">The application ID.</param>
            <param name="releaseNumber">The release number.</param>
            <param name="buildNumber">The build number.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Gadgets.GadgetContext.FromApplicationGroup(System.Nullable{System.Int32})">
            <summary>
            Returns a system-level gadget context with a specific application group
            </summary>
            <param name="applicationGroupId">The application group ID.</param>
            <returns>System-level gadget context.</returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Gadgets.GadgetContext.ApplicationGroupId">
            <summary>
            Gets the application group ID.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Gadgets.GadgetContext.ApplicationId">
            <summary>
            Gets the application ID.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Gadgets.GadgetContext.ReleaseNumber">
            <summary>
            Gets the release number.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Gadgets.GadgetContext.BuildNumber">
            <summary>
            Gets the build number.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Gadgets.GadgetContext.Scope">
            <summary>
            Gets the scope.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Gadgets.GadgetPropertiesAttribute">
            <summary>
            Describes a Gadget to the end-user.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Gadgets.GadgetPropertiesAttribute.#ctor(System.String,System.String,Inedo.BuildMaster.Extensibility.Gadgets.GadgetScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Gadgets.GadgetPropertiesAttribute"/> class.
            </summary>
            <param name="name">The friendly name of the Gadget.</param>
            <param name="desc">The description of the Gadget.</param>
            <param name="scope">The scope to which this Gadget applies.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Gadgets.GadgetPropertiesAttribute.Scope">
            <summary>
            Gets the scope to which this Gadget applies.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Gadgets.GadgetScope">
            <summary>
            Specifies the dashboard scope to which a gadget may be added.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Gadgets.GadgetScope.System">
            <summary>
            The gadget may be added to a system-level dashboard.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Gadgets.GadgetScope.Application">
            <summary>
            The gadget may be added to an application-level dashboard.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Gadgets.GadgetScope.Release">
            <summary>
            The gadget may be added to a release-level dashboard.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Gadgets.GadgetScope.Build">
            <summary>
            The gadget may be added to a build-level dashboard.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.VariableExpandingField">
            <summary>
            Represents a persistent field which supports variable expansion.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.VariableExpandingField.#ctor(System.String,System.Action{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.VariableExpandingField"/> class.
            </summary>
            <param name="value">The initial field value.</param>
            <param name="setValue">Delegate which sets the field value.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.VariableExpandingField.Value">
            <summary>
            Gets the initial field value.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.VariableExpandingField.SetValue">
            <summary>
            Gets the delegate which sets the field value.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Notifiers.EventDetail">
            <summary>
            Represents a single detail about an event.
            </summary>
            <remarks>
            An event may have many individual details (for example, ApplicationId).
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Notifiers.EventDetail.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Notifiers.EventDetail"/> class.
            </summary>
            <param name="keyName">Name of the key.</param>
            <param name="value">The value of the detail.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyName"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Notifiers.EventDetail.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Notifiers.EventDetail.KeyName">
            <summary>
            Gets the name of the key.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Notifiers.EventDetail.Value">
            <summary>
            Gets the value of the detail.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Notifiers.Triggers.ITrigger">
            <summary>
            Marks a <see cref="T:Inedo.BuildMaster.Extensibility.Notifiers.NotifierBase"/> as a Trigger.
            </summary>
            <remarks>
            A "Trigger" is not designed to notify, but to perform certain actions; fundamentally, Triggers and Notifiers function the same way, 
            but they are presented to the user differently.
            </remarks>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.Notifiers.NotifierBase"/>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Notifiers.NotificationContext">
            <summary>
            Contains the context of an event notification.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Notifiers.NotificationContext.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Notifiers.NotificationContext"/> class from being created.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Notifiers.NotificationContext.#ctor(Inedo.BuildMaster.Events.EventType,System.String,Inedo.BuildMaster.Extensibility.Notifiers.EventDetail[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Notifiers.NotificationContext"/> class.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="ownerUserName">Name of the user which owns the notifier.</param>
            <param name="eventInfo">Additional details about the event.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="eventInfo"/> contains two or more events with the same key.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Notifiers.NotificationContext.GetDetail(System.String)">
            <summary>
            Returns an event detail by key name.
            </summary>
            <param name="keyName">Key of the event detail requested.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyName"/> is null or empty.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="keyName"/> does not correspond to an event detail on this instance.</exception>
            <returns>Value of the specified key.</returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Notifiers.NotificationContext.Event">
            <summary>
            Gets the event code fired.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Notifiers.NotificationContext.OwnerUserName">
            <summary>
            Gets the name of the user who subscribed to this notifier, or null if this is actually a Trigger.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Notifiers.NotificationContext.Data">
            <summary>
            Gets or sets an arbitrary object that may be used by Notifiers.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Notifiers.NotificationContext.OccurrenceDetails">
            <summary>
            Gets the occurrence details for this notification context.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Notifiers.NotifierBase">
            <summary>
            The base class for all Notifiers.
            </summary>
            <remarks>
            A Notifier runs on the BuildMaster server and performs some action in response
            to specific events. Notifiers are configurable per-user while Triggers apply system-wide.
            </remarks>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.Notifiers.Triggers.ITrigger"/>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Notifiers.NotifierBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Notifiers.NotifierBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Notifiers.NotifierBase.EventOccured(Inedo.BuildMaster.Extensibility.Notifiers.NotificationContext)">
            <summary>
            Called when one of the event codes in Inedo.BuildMaster.Events.EventCodes
            has been fired by the system.
            </summary>
            <param name="context">Current notification context which contains information about the event.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Notifiers.NotifierBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Notifiers.NotifierBase.Events">
            <summary>
            Gets the events that the notifier is listening to.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Notifiers.NotifierPropertiesAttribute">
            <summary>
            Describes a Notifier to the end-user.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Notifiers.NotifierPropertiesAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Notifiers.NotifierPropertiesAttribute"/> class.
            </summary>
            <param name="name">The friendly name of the Notifier.</param>
            <param name="desc">The description of the Notifier.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.CreatePersistentObjectEventArgs">
            <summary>
            Contains information about a persistent object that is being deserialized.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.CreatePersistentObjectEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.CreatePersistentObjectEventArgs"/> class.
            </summary>
            <param name="assemblyName">Name of hte assembly containing the type to instantiate.</param>
            <param name="typeName">Name of the type to instantiate.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.CreatePersistentObjectEventArgs.AssemblyName">
            <summary>
            Gets the name of the assembly containing the type ot instantiate.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.CreatePersistentObjectEventArgs.TypeName">
            <summary>
            Gets the name of the type to instantiate.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.CreatePersistentObjectEventArgs.Instance">
            <summary>
            Gets or sets the instantiated object.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.PromotionRequirements.ArtifactPromotionRequirementBase">
            <summary>
            Provides common functionality for artifact-based promotion requirements.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementBase">
            <summary>
            Represents a requirement that must be met before a build may be promoted.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementBase.GetStatus(Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext)">
            <summary>
            Returns the current status of the promotion requirement.
            </summary>
            <param name="context">The context of the current promotion.</param>
            <returns>The current status of the promotion requirement.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementBase.GetDescription">
            <summary>
            Returns a user-friendly description of the promotion requirement including relevant configuration.
            </summary>
            <returns>User-friendly description of the promotion requirement.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementBase.ToString(Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext)">
            <summary>
            Deprecated.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementBase.IsRequired(Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext)">
            <summary>
            Deprecated. Implement <see cref="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementBase.GetStatus(Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext)"/> instead.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementBase.IsMet(Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext)">
            <summary>
            Deprecated. Implement <see cref="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementBase.GetStatus(Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext)"/> instead.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementBase.GetRequiredAndMetText(Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext)">
            <summary>
            Deprecated.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.ArtifactPromotionRequirementBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.PromotionRequirements.ArtifactPromotionRequirementBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.ArtifactPromotionRequirementBase.GetArtifact(Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext)">
            <summary>
            Returns a stream of the raw compressed artifact data.
            </summary>
            <param name="context">Current promotion context.</param>
            <returns>Stream backed by the artifact file or null if the artifact was not found.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.ArtifactPromotionRequirementBase.GetArtifactFiles(Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext)">
            <summary>
            Returns an array of files contained in the artifact.
            </summary>
            <param name="context">Current promotion context.</param>
            <returns>Array of files contained in the artifact.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.ArtifactPromotionRequirementBase.GetArtifactFileInfo(Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext,System.String)">
            <summary>
            Returns information about a file in an artifact if the file was found; otherwise returns null.
            </summary>
            <param name="context">Current promotion context.</param>
            <param name="fileName">Name of the file in the artifact.</param>
            <returns>Information about a file in an artifact if this file was found; otherwise null.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.ArtifactPromotionRequirementBase.OpenArtifactFile(Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext,System.String)">
            <summary>
            Returns a stream backed by a file in an artifact if the file was found; otherwise returns null.
            </summary>
            <param name="context">Current promotion context.</param>
            <param name="fileName">Name of the file in the artifact.</param>
            <returns>Stream backed by a file in an artifact if the file was found; otherwise null.</returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.PromotionRequirements.ArtifactPromotionRequirementBase.ArtifactName">
            <summary>
            Gets or sets the name of the artifact.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.PromotionRequirements.ArtifactPromotionRequirementBase.DeployableId">
            <summary>
            Gets or sets the artifact's deployable ID.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.PromotionRequirements.ArtifactPromotionRequirementBase.ArtifactsBasePath">
            <summary>
            Gets the Artifacts Base Path on the BuildMaster Server.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.PromotionRequirements.ArtifactPromotionRequirementBase.ArtifactFileStream">
            <summary>
            Wraps a Zip file stream and ensures that the artifact file gets closed when the stream is disposed.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.ArtifactPromotionRequirementBase.ArtifactFileStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.ZipFile,System.IO.Stream,ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.PromotionRequirements.ArtifactPromotionRequirementBase.ArtifactFileStream"/> class.
            </summary>
            <param name="fileStream">The file stream.</param>
            <param name="zipFile">The zip file.</param>
            <param name="zipFileStream">The zip file stream.</param>
            <param name="zipEntry">The zip entry.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext">
            <summary>
            Provides important information about a promotion.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext"/> class from being created.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext.#ctor(System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext"/> class.
            </summary>
            <param name="applicationId">The application ID.</param>
            <param name="releaseNumber">The release number.</param>
            <param name="buildNumber">The build number.</param>
            <param name="currentEnvironmentId">The ID of the environment being promoted from.</param>
            <param name="environmentId">The ID of the target environment.</param>
            <param name="workflowId">The ID of the workflow.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext.ApplicationId">
            <summary>
            Gets the current application ID.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext.ReleaseNumber">
            <summary>
            Gets the current release number.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext.BuildNumber">
            <summary>
            Gets the current build number.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext.CurrentEnvironmentId">
            <summary>
            Gets the ID of the environment being promoted from.
            </summary>
            <remarks>
            This may be null for the first environment.
            </remarks>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext.TargetEnvironmentId">
            <summary>
            Gets the ID of the environment being promoted to.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionContext.WorkflowId">
            <summary>
            Gets the ID of the workflow.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementsPropertiesAttribute">
            <summary>
            Describes a Promotion Requirement to the user.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementsPropertiesAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.PromotionRequirements.PromotionRequirementsPropertiesAttribute"/> class.
            </summary>
            <param name="name">The friendly name of the Promotion Requirement.</param>
            <param name="description">The description of the Promotion Requirement.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.Database.IBackupProvider">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.Database.DatabaseProviderBase"/> can create a backup of a database.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.Database.IBackupProvider.BackupDatabase(System.String,System.String)">
            <summary>
            When implemented by a derived class, backs up the specified database to the specified path.
            </summary>
            <param name="databaseName">The name of the database to be backed up.</param>
            <param name="destinationPath">
            The path that the database will be backed up to. This may either be a file or a directory
            depending on the database provider.
            </param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.Database.IChangeScriptProvider">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.Database.DatabaseProviderBase"/> can maintain change script execution history.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.Database.IChangeScriptProvider.InitializeDatabase">
            <summary>
            When implemented by a derived class, initializes the database by installing metadata tables
            for tracking change scripts and version numbers.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.Database.IChangeScriptProvider.IsDatabaseInitialized">
            <summary>
            When implemented by a derived class, indicates whether the database has been initialized.
            </summary>
            <returns>Value indicating whether the database has been initialized.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.Database.IChangeScriptProvider.GetChangeHistory">
            <summary>
            When implemented by a derived class, retrieves the changes that occurred in the database 
            </summary>
            <returns>Changes that occurred in the database.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.Database.IChangeScriptProvider.GetSchemaVersion">
            <summary>
            When implemented in a derived class, retrieves the numeric release number of the 
            database.
            </summary>
            <returns>The numeric release number of the database.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.Database.IChangeScriptProvider.ExecuteChangeScript(System.Int64,System.Int32,System.String,System.String)">
            <summary>
            When implemented by a derived class, executes the specified script provided that the
            specified script has not already been executed, and returns a Boolean indicating whether
            the script was skipped as a result of being executed.
            </summary>
            <param name="numericReleaseNumber">Release number for the specified script name.</param>
            <param name="scriptId">BuildMaster's script identifier to be executed.</param>
            <param name="scriptName">Name of the script to be executed.</param>
            <param name="scriptText">Script text to be run.</param>
            <returns>Value indicating whether the script was skipped.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.Database.IRestoreProvider">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.Database.DatabaseProviderBase"/> can restore a backup of a database.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.Database.IRestoreProvider.RestoreDatabase(System.String,System.String)">
            <summary>
            When implemented by a derived class, restores the specified database from the specified path.
            </summary>
            <param name="databaseName">The name of the database to restore</param>
            <param name="sourcePath">
            The path that the database will be restored from. This may either be a file or a directory
            depending on the database provider.
            </param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IClientCommandOutputProvider">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase"/> supports execution of specific commands
            and storing the output in a file.
            </summary>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase"/>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IClientCommandProvider">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase"/> supports execution of specific commands.
            </summary>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase"/>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IClientCommandProvider.GetAvailableCommands">
            <summary>
            Returns a collection of commands that may be executed against the provider.
            </summary>
            <returns>Collection of commands that may be executed against the provider.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IClientCommandProvider.ExecuteClientCommand(System.String,System.String)">
            <summary>
            Executes the specified client command with the specified arguments.
            </summary>
            <param name="commandName">The client command.</param>
            <param name="arguments">Optional arguments to pass with the command.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandName"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IClientCommandProvider.GetClientCommandHelp(System.String)">
            <summary>
            Returns documentation for a specific client command.
            </summary>
            <param name="commandName">The client command to return documentation for.</param>
            <returns>Documentation for the client command if it is available.</returns>
            <remarks>This method is only called if <see cref="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IClientCommandProvider.SupportsCommandHelp"/> returns true.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandName"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IClientCommandProvider.GetClientCommandPreview">
            <summary>
            Returns a string containing the command to be passed to the tool.
            </summary>
            <returns>String containing the command to be passed to the tool.</returns>
            <remarks>This will typically be displayed to the user, so passwords should be obscured.</remarks>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IClientCommandProvider.SupportsCommandHelp">
            <summary>
            Gets a value indicating whether commands have detailed help available.
            </summary>
            <remarks>
            Generally, command help will only be retrieved if the user explicitly asks for it, so it is
            acceptable to invoke a command-line tool to retrieve it or to just store it in the extension.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IClientCommandOutputProvider.ExecuteClientCommand(System.String,System.String,System.String)">
            <summary>
            Executes the specified client command with the specified arguments.
            </summary>
            <param name="commandName">The client command.</param>
            <param name="arguments">Optional arguments to pass with the command.</param>
            <param name="outputFileName">Name of the file which will contain the tool output. If null, output is not written to a file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandName"/> is null.</exception>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserDirectoryProviderBase">
            <summary>
            A provider for directories.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserDirectoryProviderBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserDirectoryProviderBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserDirectoryProviderBase.GetUser(System.String)">
            <summary>
            Gets the user.
            </summary>
            <param name="userName">Name of the user.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserDirectoryProviderBase.GetUser(System.String,System.String)">
            <summary>
            Gets the user.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserDirectoryProviderBase.GetGroup(System.String)">
            <summary>
            Gets the group.
            </summary>
            <param name="groupName">Name of the group.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserDirectoryProviderBase.FindUsers(System.String)">
            <summary>
            Finds the users.
            </summary>
            <param name="searchText">The search text.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserDirectoryProviderBase.FindGroups(System.String)">
            <summary>
            Finds the groups.
            </summary>
            <param name="searchText">The search text.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserDirectoryProviderBase.GetUsersInGroup(System.String)">
            <summary>
            Gets the users in group.
            </summary>
            <param name="groupName">Name of the group.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserDirectoryProviderBase.GetPrincipal(System.String)">
            <summary>
            Gets the principal.
            </summary>
            <param name="principalName">Name of the principal.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserDirectoryProviderBase.FindUsersAndGroups(System.String)">
            <summary>
            Finds the users and groups.
            </summary>
            <param name="searchText">The search text.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserDirectoryProviderBase.IsAvailable">
            <summary>
            When implemented in a derived class, indicates whether the provider
            is installed and available for use in the current execution context.
            </summary>
            <returns>
            Value indicating whether the provider is available in the current context.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserDirectoryProviderBase.ValidateConnection">
            <summary>
            When implemented in a derived class, attempts to connect with the
            current configuration and throws an exception if unsuccessful.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserDirectoryProviderBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.GroupInfo">
            <summary>
            Contains information about a group in a directory.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.IPrincipalInfo">
            <summary>
            Represents basic information about a user or group from a directory
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.IPrincipalInfo.Name">
            <summary>
            Gets the name of the principal.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.IPrincipalInfo.DisplayName">
            <summary>
            Gets the display name of the principal.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.GroupInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.GroupInfo"/> class.
            </summary>
            <param name="groupName">Name of the group.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.GroupInfo.op_Equality(Inedo.BuildMaster.Extensibility.Providers.UserDirectory.GroupInfo,Inedo.BuildMaster.Extensibility.Providers.UserDirectory.GroupInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="group1">The group1.</param>
            <param name="group2">The group2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.GroupInfo.op_Inequality(Inedo.BuildMaster.Extensibility.Providers.UserDirectory.GroupInfo,Inedo.BuildMaster.Extensibility.Providers.UserDirectory.GroupInfo)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="group1">The group1.</param>
            <param name="group2">The group2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.GroupInfo.Equals(Inedo.BuildMaster.Extensibility.Providers.UserDirectory.GroupInfo)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.GroupInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.GroupInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.GroupInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.GroupInfo.GroupName">
            <summary>
            Gets the name of the group.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo">
            <summary>
            Contains information about a user in a directory.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo.EmptyGroups">
            <summary>
            An empty collection of groups.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo"/> class.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="displayName">The user's display name.</param>
            <param name="emailAddress">The email address of the user.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo.op_Equality(Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo,Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="user1">The user1.</param>
            <param name="user2">The user2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo.op_Inequality(Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo,Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="user1">The user1.</param>
            <param name="user2">The user2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo.System#IEquatable{Inedo#BuildMaster#Extensibility#Providers#UserDirectory#IPrincipalInfo}#Equals(Inedo.BuildMaster.Extensibility.Providers.UserDirectory.IPrincipalInfo)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo.Equals(Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            True if the current object is equal to the <paramref name="other"/> parameter; otherwise false.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo.UserName">
            <summary>
            Gets the name of the user.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo.DisplayName">
            <summary>
            Gets the display-friendly name of the user.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo.EmailAddress">
            <summary>
            Gets the email address of the user.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo.Groups">
            <summary>
            Gets the groups to which the user belongs.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo.Inedo#BuildMaster#Extensibility#Providers#UserDirectory#IPrincipalInfo#Name">
            <summary>
            Gets the name of the principal.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo.Inedo#BuildMaster#Extensibility#Providers#UserDirectory#IPrincipalInfo#DisplayName">
            <summary>
            Gets the display name of the principal.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.ClientCommand">
            <summary>
            A command executed against a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IClientCommandProvider"/>.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.ClientCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.ClientCommand"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.ClientCommand.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.ClientCommand"/> class.
            </summary>
            <param name="commandName">The name of the command that will be executed.</param>
            <param name="commandDescription">A user-friendly description of the command.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.ClientCommand.CommandName">
            <summary>
            Gets the name of the command that will be executed.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.ClientCommand.CommandDescription">
            <summary>
            Gets the a user-friendly description of the command.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceRepository">
            <summary>
            Represents a source repository for a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IMultipleRepositoryProvider"/>
            </summary>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase"/>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceRepository.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceRepository"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceRepository.GetDiskPath(Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter)">
            <summary>
            Gets the full disk path for this repository.
            </summary>
            <param name="agent">The agent.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceRepository.IsBuildMasterManaged">
            <summary>
            Gets a value indicating whether this repository is automatically managed by BuildMaster.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceRepository.Name">
            <summary>
            Gets or sets the repository name.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceRepository.CustomDiskPath">
            <summary>
            Gets or sets the local repository path where the repository lives. If this value is null or empty, 
            then BuildMaster will automatically manage the local repository path.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceRepository.RemoteUrl">
            <summary>
            Gets or sets the repository's remote URL. This value may be relative to a repository root for some providers.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IDatabaseProviderRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> uses a database Provider.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IDatabaseProviderRecipe.DatabaseProviderId">
            <summary>
            Gets or sets the database provider id.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IConfigurationFileRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> is relevant to a Configuration File.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IConfigurationFileRecipe.ConfigurationFileId">
            <summary>
            Gets or sets the ID of the relevant Configuration File.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IDatabaseChangeScriptRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> is relevant to a Database Change Script.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IDatabaseChangeScriptRecipe.DatabaseChangeScriptId">
            <summary>
            Gets or sets the ID of the relevant Database Change Script.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IChangeControlRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> is relevant to a Change Control.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IChangeControlRecipe.ChangeControlId">
            <summary>
            Gets or sets the ID of the relevant Change Control.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IActionRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> is related to an action
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IActionGroupRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> is relevant to an action group.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IApplicationRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> is relevant to an application.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IApplicationRecipe.ApplicationId">
            <summary>
            Gets or sets the ID of the relevant application.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IActionGroupRecipe.ActionGroupId">
            <summary>
            Gets or sets the id of the relevant action group id.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IActionRecipe.ActionSequence">
            <summary>
            Gets or sets the sequence of the related action
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IApplicationGroupRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> is relevant to an ApplicationGroup.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IApplicationGroupRecipe.ApplicationGroupId">
            <summary>
            Gets or sets the ID of the relevant ApplicationGroup.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IDeployableCreatingRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> creates deployables when an application is created.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IApplicationCreatingRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> creates an application.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IApplicationCreatingRecipe.ApplicationName">
            <summary>
            Gets or sets the name of the application to be created.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IApplicationCreatingRecipe.ApplicationGroup">
            <summary>
            Gets or sets the group name of the application to be create.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IDeployableCreatingRecipe.Deployables">
            <summary>
            Gets or sets the collection of deployable IDs mapped to deployable names
            that are created when the application is created.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IExecutionRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> is relevant to an Execution.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IExecutionRecipe.ExecutionId">
            <summary>
            Gets or sets the Execution id of the relevant Execution.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IBuildPromotionRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> is relevant to a build promotion.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IBuildRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> is relevant to a build.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IReleaseRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> is relevant to a release.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IReleaseRecipe.ReleaseNumber">
            <summary>
            Gets or sets the relevant release number.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IBuildRecipe.BuildNumber">
            <summary>
            Gets or sets the relavent build number.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IEnvironmentRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> is relevant to an environment.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IEnvironmentRecipe.EnvironmentId">
            <summary>
            Gets or sets the environment id of the relevant environment.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IExtendedApplicationCreatingRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> creates an application with certain release and build numbering scheme.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IExtendedApplicationCreatingRecipe.ReleaseNumberScheme">
            <summary>
            Gets or sets the release number scheme. 
            </summary>
            <remarks>
            This must be one of the string values within <see cref="T:Inedo.BuildMaster.Data.Domains.ReleaseNumberSchemes"/>.
            </remarks>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IExtendedApplicationCreatingRecipe.BuildNumberScheme">
            <summary>
            Gets or sets the build number scheme.
            </summary>
            <remarks>
            This must be one of the string values within <see cref="T:Inedo.BuildMaster.Data.Domains.BuildNumberSchemes"/>.
            </remarks>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IIssueTrackingProviderRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> uses an IssueTrackerIssue Tracking Provider.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IIssueTrackingProviderRecipe.IssueTrackingProviderId">
            <summary>
            Gets or sets the issue tracking provider id.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IServerRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> is relevant to a Server.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IServerRecipe.ServerId">
            <summary>
            Gets or sets the Server id of the relevant Server.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IWorkflowStepRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> is related to a workflow step.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IWorkflowRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> is related to a workflow.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IWorkflowRecipe.WorkflowId">
            <summary>
            Gets or sets the ID of the related workflow.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IWorkflowStepRecipe.StepSequence">
            <summary>
            Gets or sets the sequence of the related workflow step.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IDashboardCreatingRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> can create custom dashboards.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Recipes.IDashboardCreatingRecipe.CreateDashboards">
            <summary>
            Invoked when the recipe should create its custom dashboards.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IDeploymentPlanRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> is relevant to a Deployment Plan.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes">
            <summary>
            Identifies the scope of a recipe.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.None">
            <summary>
            The recipe is not displayed in the UI and requires a hardcoded URL to access it.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.ActionGroup">
            <summary>
            The recipe applies to action groups.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.Action">
            <summary>
            The recipe applies to actions.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.ApplicationGroup">
            <summary>
            The recipe applies to application groups.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.Application">
            <summary>
            The recipe applies to applications.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.BuildPromotion">
            <summary>
            The recipe applies to build promotions.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.Build">
            <summary>
            The recipe applies to builds.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.ChangeControl">
            <summary>
            The recipe applies to change controls.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.ConfigurationFile">
            <summary>
            The recipe applies to configuration files.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.DatabaseChangeScript">
            <summary>
            The recipe applies to database change scripts.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.DatabaseProvider">
            <summary>
            The recipe applies to database providers.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.DeploymentPlan">
            <summary>
            The recipe applies to deployment plans.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.Environment">
            <summary>
            The recipe applies to environments.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.Example">
            <summary>
            The recipe is an example.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.Execution">
            <summary>
            The recipe applies to executions.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.IssueTrackingProvider">
            <summary>
            The recipe applies to issue tracking providers.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.Release">
            <summary>
            The recipe applies to releases.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.SourceControlProvider">
            <summary>
            The recipe applies to source control providers.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.Server">
            <summary>
            The recipe applies to servers.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.Workflow">
            <summary>
            The recipe applies to workflows.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.WorkflowStep">
            <summary>
            The recipe applies to workflow steps.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.System">
            <summary>
            The recipe applies to the whole system.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes.NewApplication">
            <summary>
            The recipe is used as a new application wizard.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.WorkflowCreatingRequirementsAttribute">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> requires one or more environments.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Recipes.WorkflowCreatingRequirementsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.WorkflowCreatingRequirementsAttribute"/> class.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.WorkflowCreatingRequirementsAttribute.MinimumEnvironmentCount">
            <summary>
            Gets the minimum number of environments required for the recipe.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.WorkflowCreatingRequirementsAttribute.MaximumEnvironmentCount">
            <summary>
            Gets the maximum number of environments supported by the recipe.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IScmCreatingRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.IScmRecipe"/> creates a Source Control Provider.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IScmRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> uses a Source Control Provider.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IScmRecipe.ScmProviderId">
            <summary>
            Gets or sets the ID of the Source Control Provider used by the <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/>.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IScmRecipe.ScmPath">
            <summary>
            Gets or sets the source control path used by the <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/>.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Recipes.IScmCreatingRecipe.InstantiateSourceControlProvider">
            <summary>
            Returns a new instance of the Source Control Provider.
            </summary>
            <returns>Instance of the Source Control Provider.</returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IScmCreatingRecipe.SourceControlProviderName">
            <summary>
            Gets or sets the name of the Source Control Provider to create.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.IWorkflowCreatingRecipe">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> creates a workflow.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IWorkflowCreatingRecipe.WorkflowName">
            <summary>
            Gets or sets the name of the workflow to be created.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.IWorkflowCreatingRecipe.WorkflowSteps">
            <summary>
            Gets or sets an ordered array of Environment Ids to be created as part of the workflow.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase">
            <summary>
            Base class for all recipes.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase.Execute">
            <summary>
            Executes the recipe.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase.RedirectUrl">
            <summary>
            Gets the URL to redirect to after recipe execution.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Recipes.RecipePropertiesAttribute">
            <summary>
            Describes a <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipeBase"/> to the user.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Recipes.RecipePropertiesAttribute.#ctor(System.String,System.String,Inedo.BuildMaster.Extensibility.Recipes.RecipeScopes)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Recipes.RecipePropertiesAttribute"/> class.
            </summary>
            <param name="name">The friendly name of the recipe.</param>
            <param name="desc">The description of the recipe.</param>
            <param name="scope">The scope.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Recipes.RecipePropertiesAttribute.RecipeScope">
            <summary>
            Gets the scope of the recipe.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.RequiredBuildMasterVersionAttribute">
            <summary>
            Marks an extension or class as requiring a specific minimum version of BuildMaster.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.RequiredBuildMasterVersionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.RequiredBuildMasterVersionAttribute"/> class.
            </summary>
            <param name="minimumVersion">The minimum version.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.RequiredBuildMasterVersionAttribute.MinimumVersion">
            <summary>
            Gets the minimum required BuildMaster version.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Scripting.ActiveScriptBase">
            <summary>
            Base class for a standard implementation of <see cref="T:Inedo.BuildMaster.Extensibility.Scripting.IActiveScript"/>.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Scripting.IActiveScript">
            <summary>
            Represents a running or completed script.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.IActiveScript.Start">
            <summary>
            Begins executing the script.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.IActiveScript.Cancel">
            <summary>
            Attempts to cancel a running script.
            </summary>
            <returns>True if script was canceled, false if script could not be canceled, or null if script was not running.</returns>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.Scripting.IActiveScript.LogReceived">
            <summary>
            Occurs when a log message has been received.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.IActiveScript.WaitHandle">
            <summary>
            Gets a <see cref="P:Inedo.BuildMaster.Extensibility.Scripting.IActiveScript.WaitHandle"/> to use to wait for the script to complete.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.IActiveScript.IsRunning">
            <summary>
            Gets a value indicating whether the script is still running.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.IActiveScript.Succeeded">
            <summary>
            Gets a value indicating whether the script was successful.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.IActiveScript.Result">
            <summary>
            Gets the result generated by the script.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ActiveScriptBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Scripting.ActiveScriptBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ActiveScriptBase.Start">
            <summary>
            Begins executing the script.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ActiveScriptBase.Cancel">
            <summary>
            Attempts to cancel a running script.
            </summary>
            <returns>
            True if script was canceled, false if script could not be canceled, or null if script was not running.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ActiveScriptBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ActiveScriptBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ActiveScriptBase.OnLogReceived(Inedo.BuildMaster.Extensibility.Actions.LogReceivedEventArgs)">
            <summary>
            Raises the <see cref="E:LogReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:Inedo.BuildMaster.Extensibility.Actions.LogReceivedEventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ActiveScriptBase.ScriptCompleted(System.Boolean,System.String)">
            <summary>
            Records the result of the script and sets the wait handle.
            </summary>
            <param name="succeeded">Value indicating whether the script succeeded.</param>
            <param name="result">Optional output of the script.</param>
        </member>
        <member name="E:Inedo.BuildMaster.Extensibility.Scripting.ActiveScriptBase.LogReceived">
            <summary>
            Occurs when a log message has been received.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ActiveScriptBase.WaitHandle">
            <summary>
            Gets a <see cref="P:Inedo.BuildMaster.Extensibility.Scripting.ActiveScriptBase.WaitHandle"/> to use to wait for the script to complete.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ActiveScriptBase.IsRunning">
            <summary>
            Gets a value indicating whether the script is still running.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ActiveScriptBase.Succeeded">
            <summary>
            Gets a value indicating whether the script was successful.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ActiveScriptBase.Result">
            <summary>
            Gets the result generated by the script.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Scripting.IScriptMetadataReader">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Scripting.ScriptTypeBase"/> can read metadata from a script.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.IScriptMetadataReader.GetScriptMetadata(System.IO.TextReader)">
            <summary>
            Returns metadata parsed from the specified script.
            </summary>
            <param name="scriptText">The script to parse for metadata.</param>
            <returns>Metadata parsed from the script; may return null if nothing was parsed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scriptText"/> is null.</exception>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Scripting.ScriptExecutionContext">
            <summary>
            Contains a script and additional context information.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ScriptExecutionContext.#ctor(System.Byte[],System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Scripting.ScriptExecutionContext"/> class.
            </summary>
            <param name="rawScriptData">The raw script data.</param>
            <param name="variables">The variables.</param>
            <param name="arguments">The arguments.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rawScriptData"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ScriptExecutionContext.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Scripting.ScriptExecutionContext"/> class.
            </summary>
            <param name="scriptFileName">Name of the script file.</param>
            <param name="variables">The variables.</param>
            <param name="arguments">The arguments.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="scriptFileName"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ScriptExecutionContext.GetTextReader">
            <summary>
            Returns a <see cref="T:System.IO.TextReader"/> for reading the script.
            </summary>
            <returns>A <see cref="T:System.IO.TextReader"/> for reading the script.</returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ScriptExecutionContext.Variables">
            <summary>
            Gets the variables to expose to the script.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ScriptExecutionContext.Arguments">
            <summary>
            Gets the arguments to pass to the script.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ScriptExecutionContext.FileName">
            <summary>
            Gets the script file name if applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ScriptExecutionContext.WorkingDirectory">
            <summary>
            Gets the working directory to run the script.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ScriptExecutionContext.TempDirectory">
            <summary>
            Gets the temporary directory which may be used for writing a script file.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ScriptExecutionContext.Agent">
            <summary>
            Gets the agent used to execute the script.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Scripting.ScriptMetadata">
            <summary>
            Contains metadata about a script.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ScriptMetadata.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Inedo.BuildMaster.Extensibility.Scripting.ScriptParameterMetadata})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Scripting.ScriptMetadata"/> class.
            </summary>
            <param name="name">The name of the script.</param>
            <param name="description">The description of the script.</param>
            <param name="parameters">The parameters for the script.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ScriptMetadata.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ScriptMetadata.Equals(Inedo.BuildMaster.Extensibility.Scripting.ScriptMetadata)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            True if the current object is equal to the <paramref name="other" /> parameter; otherwise false.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ScriptMetadata.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise false.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ScriptMetadata.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ScriptMetadata.CompareTo(Inedo.BuildMaster.Extensibility.Scripting.ScriptMetadata)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ScriptMetadata.Name">
            <summary>
            Gets the script name.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ScriptMetadata.Description">
            <summary>
            Gets the script description if it is available; otherwise null.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ScriptMetadata.Parameters">
            <summary>
            Gets the script parameters if they are available; otherwise null.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Scripting.ScriptParameterMetadata">
            <summary>
            Contains metadata about a script parameter.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ScriptParameterMetadata.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Scripting.ScriptParameterMetadata"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="description">The description of the parameter.</param>
            <param name="defaultValue">The default value of the parameter.</param>
            <param name="inputTypeCode">The input type code most appropriate for the parameter. See <see cref="T:Inedo.BuildMaster.Data.Domains.ScriptParameterTypes"/> for valid values.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="inputTypeCode"/> is not one of the values in <see cref="T:Inedo.BuildMaster.Data.Domains.ScriptParameterTypes"/>.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ScriptParameterMetadata.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ScriptParameterMetadata.Equals(Inedo.BuildMaster.Extensibility.Scripting.ScriptParameterMetadata)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            True if the current object is equal to the <paramref name="other" /> parameter; otherwise false.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ScriptParameterMetadata.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise false.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ScriptParameterMetadata.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ScriptParameterMetadata.CompareTo(Inedo.BuildMaster.Extensibility.Scripting.ScriptParameterMetadata)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ScriptParameterMetadata.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ScriptParameterMetadata.Description">
            <summary>
            Gets the parameter description if it is available; otherwise null.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ScriptParameterMetadata.DefaultValue">
            <summary>
            Gets the default value of the parameter if it is available; otherwise null.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ScriptParameterMetadata.InputTypeCode">
            <summary>
            Gets the input type of the parameter if it is available; otherwise null.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Scripting.ScriptTypeBase">
            <summary>
            Base class for script types.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ScriptTypeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Scripting.ScriptTypeBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ScriptTypeBase.ExecuteScript(Inedo.BuildMaster.Extensibility.Scripting.ScriptExecutionContext)">
            <summary>
            Executes the specified script using the specified arguments.
            </summary>
            <param name="context">Information about the script to execute.</param>
            <returns>
            An object which can be used to monitor the progress of the script.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null.</exception>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ScriptTypeBase.ScriptTypeCode">
            <summary>
            Gets the code for the script type.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ScriptTypeBase.TrueValue">
            <summary>
            Gets the true value for checkbox parameters.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ScriptTypeBase.FalseValue">
            <summary>
            Gets the false value for checkbox parameters.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Scripting.ScriptTypePropertiesAttribute">
            <summary>
            Describes a script type and specifies its type code.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Scripting.ScriptTypePropertiesAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Scripting.ScriptTypePropertiesAttribute"/> class.
            </summary>
            <param name="name">The friendly name of the script type.</param>
            <param name="description">The description of the script type.</param>
            <param name="typeCode">The script type code which is used internally to identify this type of script.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ScriptTypePropertiesAttribute.ScriptTypeCode">
            <summary>
            Gets the script type code which identifies this type of script.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Scripting.ScriptTypePropertiesAttribute.RequiresProxy">
            <summary>
            Gets or sets a value indicating whether the script must be executed using a proxy. The default value is true.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.TranslatePersistentTypeEventArgs">
            <summary>
            Contains information about a persistent object that is about to be serialized.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.TranslatePersistentTypeEventArgs.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.TranslatePersistentTypeEventArgs"/> class.
            </summary>
            <param name="type">Type to translate.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.TranslatePersistentTypeEventArgs.OriginalType">
            <summary>
            Gets the type to translate.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.TranslatePersistentTypeEventArgs.AssemblyName">
            <summary>
            Gets or sets the translated assembly name.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.TranslatePersistentTypeEventArgs.TypeName">
            <summary>
            Gets or sets the translated type name.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.VariableFunctions.VariableFunctionBase">
            <summary>
            Base class for all variable functions.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.VariableFunctions.VariableFunctionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.VariableFunctions.VariableFunctionBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.VariableFunctions.VariableFunctionBase.Evaluate(Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext,System.String[])">
            <summary>
            Evaluates the function and returns the result.
            </summary>
            <param name="context">The current execution context if applicable.</param>
            <param name="args">The arguments passed to the function.</param>
            <returns>Result of the function.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.VariableFunctions.ParameterDescriptionAttribute">
            <summary>
            Provides information about expected function parameters.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.VariableFunctions.ParameterDescriptionAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.VariableFunctions.ParameterDescriptionAttribute"/> class.
            </summary>
            <param name="index">The zero-based index of the parameter.</param>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.VariableFunctions.ParameterDescriptionAttribute.Index">
            <summary>
            Gets the index of the parameter.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.VariableFunctions.ParameterDescriptionAttribute.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.VariableFunctions.ParameterDescriptionAttribute.Summary">
            <summary>
            Gets the summary of the parameter.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.VariableFunctions.ParameterDescriptionAttribute.IsRequired">
            <summary>
            Gets or sets a value indicating whether the parameter is required.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.VariableFunctions.VariableFunctionPropertiesAttribute">
            <summary>
            Describes a variable function.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.VariableFunctions.VariableFunctionPropertiesAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.VariableFunctions.VariableFunctionPropertiesAttribute"/> class.
            </summary>
            <param name="name">The name of the function.</param>
            <param name="description">The description of the function.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.VariableFunctions.VariableFunctionPropertiesAttribute.LegacyAlias">
            <summary>
            Gets or sets the alias for the function if it is accessible as a legacy variable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.VariableFunctions.VariableFunctionPropertiesAttribute.Scope">
            <summary>
            Gets or sets the scope in which the function is designed to be used.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.VariableFunctions.VariableFunctionPropertiesAttribute.Category">
            <summary>
            Gets or sets the category of the function.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.VariableFunctions.VariableFunctionScope">
            <summary>
            Specifies the scope a function is designed to be used in.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.VariableFunctions.VariableFunctionScope.Global">
            <summary>
            The function should be accessible from any scope.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.VariableFunctions.VariableFunctionScope.ApplicationGroup">
            <summary>
            The function should be accessible when an application group is in scope.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.VariableFunctions.VariableFunctionScope.Application">
            <summary>
            The function should be accessible when an application is in scope.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.VariableFunctions.VariableFunctionScope.Release">
            <summary>
            The function should be accessible when a release is in scope.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.VariableFunctions.VariableFunctionScope.Build">
            <summary>
            The function should be accessible when a build is in scope.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.VariableFunctions.VariableFunctionScope.Environment">
            <summary>
            The function should be accessible when an environment is in scope.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.VariableFunctions.VariableFunctionScope.Execution">
            <summary>
            The function should be accessible when an execution is in scope.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.VariableFunctions.VariableFunctionScope.Deployable">
            <summary>
            The function should be accessible when a deployable is in scope.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.VariableFunctions.VariableFunctionScope.Server">
            <summary>
            The function should be accessible when a server is in scope.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.VariableFunctions.VariableFunctionScope.AgentBasedAction">
            <summary>
            The function should be accessible during agent-based action execution.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Variables.ExpressionBase">
            <summary>
            Represents a variable expression.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.ExpressionBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Variables.FunctionExpression">
            <summary>
            Represents a variable function.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.FunctionExpression.#ctor(System.String,System.Collections.Generic.IEnumerable{Inedo.BuildMaster.Extensibility.Variables.ExpressionBase})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Variables.FunctionExpression"/> class.
            </summary>
            <param name="functionName">Name of the function.</param>
            <param name="args">The function arguments.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="functionName"/> is null or empty or <paramref name="args"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.FunctionExpression.#ctor(System.String,Inedo.BuildMaster.Extensibility.Variables.ExpressionBase[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Variables.FunctionExpression"/> class.
            </summary>
            <param name="functionName">Name of the function.</param>
            <param name="args">The function arguments.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="functionName"/> is null or empty or <paramref name="args"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.FunctionExpression.Equals(Inedo.BuildMaster.Extensibility.Variables.FunctionExpression)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.FunctionExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.FunctionExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.FunctionExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Variables.FunctionExpression.FunctionName">
            <summary>
            Gets the name of the function.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Variables.FunctionExpression.Arguments">
            <summary>
            Gets the function arguments.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Variables.LegacyVariableOrFunctionExpression">
            <summary>
            Represents a legacy variable or a parameterless function legacy alias.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.LegacyVariableOrFunctionExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Variables.LegacyVariableOrFunctionExpression"/> class.
            </summary>
            <param name="variableOrFunctionName">Name of the variable or function alias.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="variableOrFunctionName"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.LegacyVariableOrFunctionExpression.Equals(Inedo.BuildMaster.Extensibility.Variables.LegacyVariableOrFunctionExpression)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.LegacyVariableOrFunctionExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.LegacyVariableOrFunctionExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.LegacyVariableOrFunctionExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Variables.LegacyVariableOrFunctionExpression.VariableOrFunctionName">
            <summary>
            Gets the name of the variable or function alias.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Variables.TextExpression">
            <summary>
            Represents a literal string of text.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.TextExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Variables.TextExpression"/> class.
            </summary>
            <param name="text">The text.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.TextExpression.Equals(Inedo.BuildMaster.Extensibility.Variables.TextExpression)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.TextExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.TextExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.TextExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Variables.TextExpression.Text">
            <summary>
            Gets the text.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Variables.VariableOrFunctionExpression">
            <summary>
            Represents a variable or a parameterless function.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.VariableOrFunctionExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Variables.VariableOrFunctionExpression"/> class.
            </summary>
            <param name="variableOrFunctionName">Name of the variable or function.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="variableOrFunctionName"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.VariableOrFunctionExpression.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Variables.VariableOrFunctionExpression"/> class.
            </summary>
            <param name="variableOrFunctionName">Name of the variable or function.</param>
            <param name="isExplicit">Value indicating whether the variable was used with explicit notation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="variableOrFunctionName"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.VariableOrFunctionExpression.Equals(Inedo.BuildMaster.Extensibility.Variables.VariableOrFunctionExpression)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.VariableOrFunctionExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.VariableOrFunctionExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.VariableOrFunctionExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Variables.VariableOrFunctionExpression.VariableOrFunctionName">
            <summary>
            Gets the name of the variable or function.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Variables.VariableExpressionTree">
            <summary>
            Represents a parsed string that can contain variables.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.VariableExpressionTree.#ctor(System.Collections.Generic.IEnumerable{Inedo.BuildMaster.Extensibility.Variables.ExpressionBase})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Variables.VariableExpressionTree"/> class.
            </summary>
            <param name="rootExpressions">The root expressions.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rootExpressions"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.VariableExpressionTree.#ctor(Inedo.BuildMaster.Extensibility.Variables.ExpressionBase[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Variables.VariableExpressionTree"/> class.
            </summary>
            <param name="rootExpressions">The root expressions.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rootExpressions"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.VariableExpressionTree.Evaluate(Inedo.BuildMaster.Extensibility.Variables.IVariableEvaluationContext)">
            <summary>
            Evaluates the expression tree and returns the result.
            </summary>
            <param name="context">The current context.</param>
            <returns>Result of the evaluated tree.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The context has no generic context set.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.VariableExpressionTree.Parse(System.String,System.String)">
            <summary>
            Parses a string into an expression tree.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="variableSupportCode">The type of variable support to use.</param>
            <returns>Parsed expression tree.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is null or <paramref name="variableSupportCode"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="variableSupportCode"/> is not a valid value.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.VariableExpressionTree.FormatVariableName(System.String,System.String)">
            <summary>
            Returns a minimally-escaped formatted variable name.
            </summary>
            <param name="variableName">The name of the variable.</param>
            <param name="variableSupportCode">The type of variable support to use.</param>
            <returns>The formatted variable name.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="variableName"/> is null or empty or <paramref name="variableSupportCode"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="variableName"/> has invalid characters or <paramref name="variableSupportCode"/> is not a valid value.</exception>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Variables.VariableExpressionTree.RootExpressions">
            <summary>
            Gets the root expressions.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Files.DiffMatchPatch.Operation">
            -
            The data structure representing a diff is a List of Diff objects:
            {Diff(Operation.DELETE, "Hello"), Diff(Operation.INSERT, "Goodbye"),
             Diff(Operation.EQUAL, " world.")}
            which means: delete "Hello", add "Goodbye" and keep " world."
        </member>
        <member name="T:Inedo.BuildMaster.Files.DiffMatchPatch.Diff">
            Class representing one diff operation.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.Diff.#ctor(Inedo.BuildMaster.Files.DiffMatchPatch.Operation,System.String)">
            Constructor.  Initializes the diff with the provided values.
            @param operation One of INSERT, DELETE or EQUAL.
            @param text The text being applied.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.Diff.ToString">
            Display a human-readable version of this Diff.
            @return text version.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.Diff.Equals(System.Object)">
            Is this Diff equivalent to another Diff?
            @param d Another Diff to compare against.
            @return true or false.
        </member>
        <member name="T:Inedo.BuildMaster.Files.DiffMatchPatch.Patch">
            Class representing one patch operation.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.Patch.ToString">
            Emmulate GNU diff's format.
            Header: @@ -382,8 +481,9 @@
            Indicies are printed as 1-based, not 0-based.
            @return The GNU diff string.
        </member>
        <member name="T:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch">
            Class containing the diff, match and patch methods.
            Also Contains the behaviour settings.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_main(System.String,System.String)">
            Find the differences between two texts.
            Run a faster, slightly less optimal diff.
            This method allows the 'checklines' of diff_main() to be optional.
            Most of the time checklines is wanted, so default to true.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @return List of Diff objects.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_main(System.String,System.String,System.Boolean)">
            Find the differences between two texts.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @param checklines Speedup flag.  If false, then don't run a
                line-level diff first to identify the changed areas.
                If true, then run a faster slightly less optimal diff.
            @return List of Diff objects.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_main(System.String,System.String,System.Boolean,System.DateTime)">
            Find the differences between two texts.  Simplifies the problem by
            stripping any common prefix or suffix off the texts before diffing.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @param checklines Speedup flag.  If false, then don't run a
                line-level diff first to identify the changed areas.
                If true, then run a faster slightly less optimal diff.
            @param deadline Time when the diff should be complete by.  Used
                internally for recursive calls.  Users should set DiffTimeout
                instead.
            @return List of Diff objects.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_compute(System.String,System.String,System.Boolean,System.DateTime)">
            Find the differences between two texts.  Assumes that the texts do not
            have any common prefix or suffix.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @param checklines Speedup flag.  If false, then don't run a
                line-level diff first to identify the changed areas.
                If true, then run a faster slightly less optimal diff.
            @param deadline Time when the diff should be complete by.
            @return List of Diff objects.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_lineMode(System.String,System.String,System.DateTime)">
            Do a quick line-level diff on both strings, then rediff the parts for
            greater accuracy.
            This speedup can produce non-minimal diffs.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @param deadline Time when the diff should be complete by.
            @return List of Diff objects.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_bisect(System.String,System.String,System.DateTime)">
            Find the 'middle snake' of a diff, split the problem in two
            and return the recursively constructed diff.
            See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @param deadline Time at which to bail if not yet complete.
            @return List of Diff objects.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_bisectSplit(System.String,System.String,System.Int32,System.Int32,System.DateTime)">
            Given the location of the 'middle snake', split the diff in two parts
            and recurse.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @param x Index of split point in text1.
            @param y Index of split point in text2.
            @param deadline Time at which to bail if not yet complete.
            @return LinkedList of Diff objects.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_linesToChars(System.String,System.String)">
            Split two texts into a list of strings.  Reduce the texts to a string of
            hashes where each Unicode character represents one line.
            @param text1 First string.
            @param text2 Second string.
            @return Three element Object array, containing the encoded text1, the
                encoded text2 and the List of unique strings.  The zeroth element
                of the List of unique strings is intentionally blank.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_linesToCharsMunge(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Int32})">
            Split a text into a list of strings.  Reduce the texts to a string of
            hashes where each Unicode character represents one line.
            @param text String to encode.
            @param lineArray List of unique strings.
            @param lineHash Map of strings to indices.
            @return Encoded string.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_charsToLines(System.Collections.Generic.ICollection{Inedo.BuildMaster.Files.DiffMatchPatch.Diff},System.Collections.Generic.List{System.String})">
            Rehydrate the text in a diff from a string of line hashes to real lines
            of text.
            @param diffs List of Diff objects.
            @param lineArray List of unique strings.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_commonPrefix(System.String,System.String)">
            Determine the common prefix of two strings.
            @param text1 First string.
            @param text2 Second string.
            @return The number of characters common to the start of each string.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_commonSuffix(System.String,System.String)">
            Determine the common suffix of two strings.
            @param text1 First string.
            @param text2 Second string.
            @return The number of characters common to the end of each string.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_commonOverlap(System.String,System.String)">
            Determine if the suffix of one string is the prefix of another.
            @param text1 First string.
            @param text2 Second string.
            @return The number of characters common to the end of the first
                string and the start of the second string.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_halfMatch(System.String,System.String)">
            Do the two texts share a Substring which is at least half the length of
            the longer text?
            This speedup can produce non-minimal diffs.
            @param text1 First string.
            @param text2 Second string.
            @return Five element String array, containing the prefix of text1, the
                suffix of text1, the prefix of text2, the suffix of text2 and the
                common middle.  Or null if there was no match.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_halfMatchI(System.String,System.String,System.Int32)">
            Does a Substring of shorttext exist within longtext such that the
            Substring is at least half the length of longtext?
            @param longtext Longer string.
            @param shorttext Shorter string.
            @param i Start index of quarter length Substring within longtext.
            @return Five element string array, containing the prefix of longtext, the
                suffix of longtext, the prefix of shorttext, the suffix of shorttext
                and the common middle.  Or null if there was no match.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_cleanupSemantic(System.Collections.Generic.List{Inedo.BuildMaster.Files.DiffMatchPatch.Diff})">
            Reduce the number of edits by eliminating semantically trivial
            equalities.
            @param diffs List of Diff objects.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_cleanupSemanticLossless(System.Collections.Generic.List{Inedo.BuildMaster.Files.DiffMatchPatch.Diff})">
            Look for single edits surrounded on both sides by equalities
            which can be shifted sideways to align the edit to a word boundary.
            e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.
            @param diffs List of Diff objects.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_cleanupSemanticScore(System.String,System.String)">
            Given two strings, comAdde a score representing whether the internal
            boundary falls on logical boundaries.
            Scores range from 6 (best) to 0 (worst).
            @param one First string.
            @param two Second string.
            @return The score.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_cleanupEfficiency(System.Collections.Generic.List{Inedo.BuildMaster.Files.DiffMatchPatch.Diff})">
            Reduce the number of edits by eliminating operationally trivial
            equalities.
            @param diffs List of Diff objects.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_cleanupMerge(System.Collections.Generic.List{Inedo.BuildMaster.Files.DiffMatchPatch.Diff})">
            Reorder and merge like edit sections.  Merge equalities.
            Any edit section can move as long as it doesn't cross an equality.
            @param diffs List of Diff objects.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_xIndex(System.Collections.Generic.List{Inedo.BuildMaster.Files.DiffMatchPatch.Diff},System.Int32)">
            loc is a location in text1, comAdde and return the equivalent location in
            text2.
            e.g. "The cat" vs "The big cat", 1->1, 5->8
            @param diffs List of Diff objects.
            @param loc Location within text1.
            @return Location within text2.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_prettyHtml(System.Collections.Generic.List{Inedo.BuildMaster.Files.DiffMatchPatch.Diff})">
            Convert a Diff list into a pretty HTML report.
            @param diffs List of Diff objects.
            @return HTML representation.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_text1(System.Collections.Generic.List{Inedo.BuildMaster.Files.DiffMatchPatch.Diff})">
            Compute and return the source text (all equalities and deletions).
            @param diffs List of Diff objects.
            @return Source text.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_text2(System.Collections.Generic.List{Inedo.BuildMaster.Files.DiffMatchPatch.Diff})">
            Compute and return the destination text (all equalities and insertions).
            @param diffs List of Diff objects.
            @return Destination text.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_levenshtein(System.Collections.Generic.List{Inedo.BuildMaster.Files.DiffMatchPatch.Diff})">
            Compute the Levenshtein distance; the number of inserted, deleted or
            substituted characters.
            @param diffs List of Diff objects.
            @return Number of changes.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_toDelta(System.Collections.Generic.List{Inedo.BuildMaster.Files.DiffMatchPatch.Diff})">
            Crush the diff into an encoded string which describes the operations
            required to transform text1 into text2.
            E.g. =3\t-2\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.
            Operations are tab-separated.  Inserted text is escaped using %xx
            notation.
            @param diffs Array of Diff objects.
            @return Delta text.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.diff_fromDelta(System.String,System.String)">
            Given the original text1, and an encoded string which describes the
            operations required to transform text1 into text2, comAdde the full diff.
            @param text1 Source string for the diff.
            @param delta Delta text.
            @return Array of Diff objects or null if invalid.
            @throws ArgumentException If invalid input.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.match_main(System.String,System.String,System.Int32)">
            Locate the best instance of 'pattern' in 'text' near 'loc'.
            Returns -1 if no match found.
            @param text The text to search.
            @param pattern The pattern to search for.
            @param loc The location to search around.
            @return Best match index or -1.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.match_bitap(System.String,System.String,System.Int32)">
            Locate the best instance of 'pattern' in 'text' near 'loc' using the
            Bitap algorithm.  Returns -1 if no match found.
            @param text The text to search.
            @param pattern The pattern to search for.
            @param loc The location to search around.
            @return Best match index or -1.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.match_bitapScore(System.Int32,System.Int32,System.Int32,System.String)">
            Compute and return the score for a match with e errors and x location.
            @param e Number of errors in match.
            @param x Location of match.
            @param loc Expected location of match.
            @param pattern Pattern being sought.
            @return Overall score for match (0.0 = good, 1.0 = bad).
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.match_alphabet(System.String)">
            Initialise the alphabet for the Bitap algorithm.
            @param pattern The text to encode.
            @return Hash of character locations.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.patch_addContext(Inedo.BuildMaster.Files.DiffMatchPatch.Patch,System.String)">
            Increase the context until it is unique,
            but don't let the pattern expand beyond Match_MaxBits.
            @param patch The patch to grow.
            @param text Source text.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.patch_make(System.String,System.String)">
            Compute a list of patches to turn text1 into text2.
            A set of diffs will be computed.
            @param text1 Old text.
            @param text2 New text.
            @return List of Patch objects.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.patch_make(System.Collections.Generic.List{Inedo.BuildMaster.Files.DiffMatchPatch.Diff})">
            Compute a list of patches to turn text1 into text2.
            text1 will be derived from the provided diffs.
            @param diffs Array of Diff objects for text1 to text2.
            @return List of Patch objects.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.patch_make(System.String,System.String,System.Collections.Generic.List{Inedo.BuildMaster.Files.DiffMatchPatch.Diff})">
            Compute a list of patches to turn text1 into text2.
            text2 is ignored, diffs are the delta between text1 and text2.
            @param text1 Old text
            @param text2 Ignored.
            @param diffs Array of Diff objects for text1 to text2.
            @return List of Patch objects.
            @deprecated Prefer patch_make(string text1, List diffs).
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.patch_make(System.String,System.Collections.Generic.List{Inedo.BuildMaster.Files.DiffMatchPatch.Diff})">
            Compute a list of patches to turn text1 into text2.
            text2 is not provided, diffs are the delta between text1 and text2.
            @param text1 Old text.
            @param diffs Array of Diff objects for text1 to text2.
            @return List of Patch objects.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.patch_deepCopy(System.Collections.Generic.List{Inedo.BuildMaster.Files.DiffMatchPatch.Patch})">
            Given an array of patches, return another array that is identical.
            @param patches Array of Patch objects.
            @return Array of Patch objects.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.patch_apply(System.Collections.Generic.List{Inedo.BuildMaster.Files.DiffMatchPatch.Patch},System.String)">
            Merge a set of patches onto the text.  Return a patched text, as well
            as an array of true/false values indicating which patches were applied.
            @param patches Array of Patch objects
            @param text Old text.
            @return Two element Object array, containing the new text and an array of
                 bool values.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.patch_addPadding(System.Collections.Generic.List{Inedo.BuildMaster.Files.DiffMatchPatch.Patch})">
            Add some padding on text start and end so that edges can match something.
            Intended to be called only from within patch_apply.
            @param patches Array of Patch objects.
            @return The padding string added to each side.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.patch_splitMax(System.Collections.Generic.List{Inedo.BuildMaster.Files.DiffMatchPatch.Patch})">
            Look through the patches and break up any which are longer than the
            maximum limit of the match algorithm.
            Intended to be called only from within patch_apply.
            @param patches List of Patch objects.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.patch_toText(System.Collections.Generic.List{Inedo.BuildMaster.Files.DiffMatchPatch.Patch})">
            Take a list of patches and return a textual representation.
            @param patches List of Patch objects.
            @return Text representation of patches.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.patch_fromText(System.String)">
            Parse a textual representation of patches and return a List of Patch
            objects.
            @param textline Text representation of patches.
            @return List of Patch objects.
            @throws ArgumentException If invalid input.
        </member>
        <member name="M:Inedo.BuildMaster.Files.DiffMatchPatch.diff_match_patch.unescapeForEncodeUriCompatability(System.String)">
             Unescape selected chars for compatability with JavaScript's encodeURI.
             In speed critical applications this could be dropped since the
             receiving application will certainly decode these fine.
             Note that this function is case-sensitive.  Thus "%3F" would not be
             unescaped.  But this is ok because it is only called with the output of
             HttpUtility.UrlEncode which returns lowercase hex.
            
             Example: "%3f" -> "?", "%24" -> "$", etc.
            
             @param str The string to escape.
             @return The escaped string.
        </member>
        <member name="T:Inedo.BuildMaster.Files.DirectoryEntryBuilder">
            <summary>
            Helper for constructing <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryInfo"/> trees.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryBuilder"/> class.
            </summary>
            <param name="name">The name of the entry.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.GetPath(System.String)">
            <summary>
            Returns the path of the entry.
            </summary>
            <param name="separator">Separator to place between path elements.</param>
            <returns>Path of the entry.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.GetPath(System.String,System.Boolean)">
            <summary>
            Returns the path of the entry.
            </summary>
            <param name="separator">Separator to place between path elements.</param>
            <param name="omitEmptyNames">Indicates whether empty directory names should be included in the path.</param>
            <returns>Path of the entry.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.AddFile(System.String)">
            <summary>
            Adds a new file.
            </summary>
            <param name="name">The name of the file to add.</param>
            <returns>The newly-added file.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.AddFile(System.String,System.Int64,System.DateTime,System.IO.FileAttributes)">
            <summary>
            Adds a new file.
            </summary>
            <param name="name">The name of the file to add.</param>
            <param name="size">The size of the file.</param>
            <param name="modified">The timestamp when the file was last modified.</param>
            <param name="fileAttributes">The attributes of the file.</param>
            <returns>The newly-added file.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.ToDirectoryEntryInfo(System.String)">
            <summary>
            Returns a <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryInfo"/> instance constructed from this <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryBuilder"/>.
            </summary>
            <param name="pathSeparator">The path separator.</param>
            <returns><see cref="T:Inedo.BuildMaster.Files.DirectoryEntryInfo"/> instance constructed from this <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryBuilder"/>.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.ToDirectoryEntryInfo(System.String,System.String)">
            <summary>
            Returns a <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryInfo"/> instance constructed from this <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryBuilder"/>.
            </summary>
            <param name="pathSeparator">The path separator.</param>
            <param name="prependPath">Path string to prepend to the DirectoryEntryInfo's path property.</param>
            <returns><see cref="T:Inedo.BuildMaster.Files.DirectoryEntryInfo"/> instance constructed from this <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryBuilder"/>.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.ToDirectoryEntryInfo(System.String,System.String,System.Boolean)">
            <summary>
            Returns a <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryInfo"/> instance constructed from this <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryBuilder"/>.
            </summary>
            <param name="pathSeparator">The path separator.</param>
            <param name="prependPath">Path string to prepend to the DirectoryEntryInfo's path property.</param>
            <param name="omitEmptyNames">Indicates whether empty directory names should be part of the path.</param>
            <returns><see cref="T:Inedo.BuildMaster.Files.DirectoryEntryInfo"/> instance constructed from this <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryBuilder"/>.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.Select(System.String,System.String)">
            <summary>
            Selects an entry with the specified path.
            </summary>
            <param name="path">The path of the entry to select relative to the current node.</param>
            <param name="separator">The path separator.</param>
            <returns>Entry with matching path if found; otherwise null.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.SafePathCombine(System.String,System.String,System.String)">
            <summary>
            Returns a combination of two paths.
            </summary>
            <param name="pathSeparator">Path separator character.</param>
            <param name="pathA">First path.</param>
            <param name="pathB">Second path.</param>
            <returns>Combined path.</returns>
        </member>
        <member name="P:Inedo.BuildMaster.Files.DirectoryEntryBuilder.Name">
            <summary>
            Gets or sets the name of the entry.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Files.DirectoryEntryBuilder.Parent">
            <summary>
            Gets the parent entry.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Files.DirectoryEntryBuilder.Directories">
            <summary>
            Gets the children of the entry.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Files.DirectoryEntryBuilder.Files">
            <summary>
            Gets the files contained in this directory.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Files.DirectoryEntryBuilder.Path">
            <summary>
            Gets the path of the entry using / as the separator.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Files.DirectoryEntryBuilder.DirectoryEntryBuilderList">
            <summary>
            Contains DirectoryEntryBuilder instance which represent subdirectories.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.DirectoryEntryBuilderList.#ctor(Inedo.BuildMaster.Files.DirectoryEntryBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryBuilder.DirectoryEntryBuilderList"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.DirectoryEntryBuilderList.IndexOf(Inedo.BuildMaster.Files.DirectoryEntryBuilder)">
            <summary>
            Returns the index of a subdirectory.
            </summary>
            <param name="item">Subdirectory whose index is returned.</param>
            <returns>Index of the specified subdirectory if it is contained in this list; otherwise -1.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.DirectoryEntryBuilderList.Insert(System.Int32,Inedo.BuildMaster.Files.DirectoryEntryBuilder)">
            <summary>
            Inserts a subdirectory into this list.
            </summary>
            <param name="index">Index where subdirectory will be inserted.</param>
            <param name="item">Subdirectory to insert.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.DirectoryEntryBuilderList.RemoveAt(System.Int32)">
            <summary>
            Removes a subdirectory at a specified index.
            </summary>
            <param name="index">Index of subdirectory to remove.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.DirectoryEntryBuilderList.Add(Inedo.BuildMaster.Files.DirectoryEntryBuilder)">
            <summary>
            Adds a subdirectory to the list.
            </summary>
            <param name="item">Subdirectory to add.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.DirectoryEntryBuilderList.Add(System.String)">
            <summary>
            Adds a new subdirectory to the list.
            </summary>
            <param name="name">Name of new subdirectory to add.</param>
            <returns>The newly-added subdirectory.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.DirectoryEntryBuilderList.Clear">
            <summary>
            Removes all subdirectories from the list.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.DirectoryEntryBuilderList.Contains(Inedo.BuildMaster.Files.DirectoryEntryBuilder)">
            <summary>
            Returns a value indicating whether a subdirectory is contained in the list.
            </summary>
            <param name="item">Subdirectory to search for.</param>
            <returns>True if subdirectory is in this list; otherwise false.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.DirectoryEntryBuilderList.System#Collections#Generic#ICollection{Inedo#BuildMaster#Files#DirectoryEntryBuilder}#CopyTo(Inedo.BuildMaster.Files.DirectoryEntryBuilder[],System.Int32)">
            <summary>
            Copies the subdirectory list to an array.
            </summary>
            <param name="array">Array into which subdirectories are copied.</param>
            <param name="arrayIndex">Index in array to start writing.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.DirectoryEntryBuilderList.Remove(Inedo.BuildMaster.Files.DirectoryEntryBuilder)">
            <summary>
            Removes a subdirectory from the list.
            </summary>
            <param name="item">Subdirectory to remove.</param>
            <returns>True if subdirectory was removed; false if it was not initially in the list.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.DirectoryEntryBuilderList.GetEnumerator">
            <summary>
            Returns an enumerator for the subdirectory list.
            </summary>
            <returns>Enumerator for the subdirectory list.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryBuilder.DirectoryEntryBuilderList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the subdirectory list.
            </summary>
            <returns>Enumerator for the subdirectory list.</returns>
        </member>
        <member name="P:Inedo.BuildMaster.Files.DirectoryEntryBuilder.DirectoryEntryBuilderList.Count">
            <summary>
            Gets the number of directories in the list.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Files.DirectoryEntryBuilder.DirectoryEntryBuilderList.System#Collections#Generic#ICollection{Inedo#BuildMaster#Files#DirectoryEntryBuilder}#IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Files.DirectoryEntryBuilder.DirectoryEntryBuilderList.Item(System.Int32)">
            <summary>
            Gets or sets a subdirectory.
            </summary>
            <param name="index">Index of subdirectory.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Files.TextDifference">
            <summary>
            Represents a block of text that is part of a difference report between two files.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Files.TextDifference.Equals(Inedo.BuildMaster.Files.TextDifference)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.TextDifference.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.TextDifference.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.TextDifference.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Files.TextDifference.DifferenceType">
            <summary>
            Gets the type of difference this block of text represents.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Files.TextDifference.Text">
            <summary>
            Gets the text contained in this block.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Files.TextDifferenceType">
            <summary>
            Specifies what type of difference the block of text in a <see cref="T:Inedo.BuildMaster.Files.TextDifference"/>
            instance refers to.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Files.TextDifferenceType.Delete">
            <summary>
            The block of text has been deleted in this version.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Files.TextDifferenceType.Insert">
            <summary>
            The block of text has been inserted in this version.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Files.TextDifferenceType.Equal">
            <summary>
            The block of text has not changed.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Files.GetDirectoryEntryCommand">
            <summary>
            Contains parameters for controlling the behavior of <see cref="M:Inedo.BuildMaster.Util.Files.GetDirectoryEntry(Inedo.BuildMaster.Files.GetDirectoryEntryCommand)"/>.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Files.GetDirectoryEntryCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Files.GetDirectoryEntryCommand"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Files.GetDirectoryEntryCommand.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Files.GetDirectoryEntryCommand.Path">
            <summary>
            Gets or sets the root path to enumerate.
            </summary>
            <remarks>
            If this value is null or empty, file system enumeration will start with
            drives returned by the <see cref="M:System.IO.DriveInfo.GetDrives"/> method.
            </remarks>
        </member>
        <member name="P:Inedo.BuildMaster.Files.GetDirectoryEntryCommand.Recurse">
            <summary>
            Gets or sets a value indicating whether to recursively enumerate
            subdirectories below the root path.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Files.GetDirectoryEntryCommand.IncludeRootPath">
            <summary>
            Gets or sets a value indicating whether the root path should be
            included in the resulting FileSystemEntryInfos.
            </summary>
            <remarks>
            If this property is false, all of the Path properties
            on returned entries will be relative to the root path
            from which enumeration started.
            </remarks>
        </member>
        <member name="T:Inedo.BuildMaster.Files.GetDirectoryEntryResult">
            <summary>
            Contains the results of a call to the <see cref="M:Inedo.BuildMaster.Util.Files.GetDirectoryEntry(Inedo.BuildMaster.Files.GetDirectoryEntryCommand)"/> method.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Files.GetDirectoryEntryResult.#ctor(Inedo.BuildMaster.Files.DirectoryEntryInfo,System.Exception[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Files.GetDirectoryEntryResult"/> class.
            </summary>
            <param name="entry">The resulting root <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryInfo"/>.</param>
            <param name="exceptions">Any exceptions encountered during enumeration.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Files.GetDirectoryEntryResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Files.GetDirectoryEntryResult.Entry">
            <summary>
            Gets the root <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryInfo"/> containing all enumerated files and subdirectories.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Files.GetDirectoryEntryResult.Exceptions">
            <summary>
            Gets an array of any exceptions which were encountered during enumeration.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Predicates.GroupPredicateBase">
            <summary>
            Base class for all group Predicates.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Predicates.PredicateBase">
            <summary>
            Base class for all BuildMaster Predicates.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Predicates.PredicateBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Predicates.PredicateBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Predicates.PredicateBase.Evaluate(Inedo.BuildMaster.Extensibility.Actions.IActionExecutionContext)">
            <summary>
            Evaluates the Predicate, returning the resulting value.
            </summary>
            <param name="context">Context in which the Predicate is evaluated.</param>
            <returns>Resulting value of the evaluated Predicate.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Predicates.PredicateBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Predicates.GroupPredicateBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Predicates.GroupPredicateBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Predicates.GroupPredicateBase.ToString(System.Boolean)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="recurse">Value indicating whether contained predicates should be included.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Predicates.GroupPredicateBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Predicates.GroupPredicateBase.Predicates">
            <summary>
            Gets or sets the predicates contained within the group.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Predicates.PredicatePropertiesAttribute">
            <summary>
            Describes a Predicate to the end-user.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Predicates.PredicatePropertiesAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Predicates.PredicatePropertiesAttribute"/> class.
            </summary>
            <param name="name">The friendly name of the Predicate.</param>
            <param name="desc">The description of the Predicate.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.Database.ExecutionResult">
            <summary>
            Contains information about the result of a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.Database.ChangeScript"/> execution.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.Database.ExecutionResult.#ctor(Inedo.BuildMaster.Extensibility.Providers.Database.ExecutionResult.Results,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.Database.ExecutionResult"/> class.
            </summary>
            <param name="result">The result of the script execution.</param>
            <param name="log">A log of any output generated during script execution.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.Database.ExecutionResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.Database.ExecutionResult.Log">
            <summary>
            Gets a log of the output generated during script execution.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.Database.ExecutionResult.Result">
            <summary>
            Gets the resulting state of the script execution.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.Database.ExecutionResult.Results">
            <summary>
            Describes the resulting state of a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.Database.ChangeScript"/> execution.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Providers.Database.ExecutionResult.Results.Success">
            <summary>
            The <see cref="T:Inedo.BuildMaster.Extensibility.Providers.Database.ChangeScript"/> executed successfully.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Providers.Database.ExecutionResult.Results.Failed">
            <summary>
            The <see cref="T:Inedo.BuildMaster.Extensibility.Providers.Database.ChangeScript"/> execution failed.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Providers.Database.ExecutionResult.Results.Skipped">
            <summary>
            The <see cref="T:Inedo.BuildMaster.Extensibility.Providers.Database.ChangeScript"/> was not executed.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IBranchingProvider">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase"/> supports branching.
            </summary>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase"/>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IBranchingProvider.Branch(System.String,System.String,System.String)">
            <summary>
            Copies the specified sourcePath to the specified toPath and leaves the specified comment
            if the comment is not null.
            </summary>
            <param name="sourcePath">Path to copy from.</param>
            <param name="toPath">Path to copy to.</param>
            <param name="comment">Comment for the copy operation; may be null if <see cref="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IBranchingProvider.RequiresComment"/> returns false.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourcePath"/> or <paramref name="toPath"/> is null.</exception>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.SourceControl.IBranchingProvider.RequiresComment">
            <summary>
            Gets a value indicating whether the comment parameter of the <see cref="M:Branch"/> method is required.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.InvalidScPathException">
            <summary>
            Exception that is thrown when an invalid path string is used
            with a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase"/>.
            </summary>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.SourceControlProviderBase"/>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.ProviderException">
            <summary>
            Exception thrown by a provider.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.ProviderException"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.ProviderException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.ProviderException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.ProviderException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.InvalidScPathException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.InvalidScPathException"/> class.
            </summary>
            <param name="scPath">The source control path.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.SourceControl.InvalidScPathException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.SourceControl.InvalidScPathException"/> class.
            </summary>
            <param name="scPath">The source control path.</param>
            <param name="inner">The exception which caused the error.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.MasksTypeAttribute">
            <summary>
            When applied to an <see cref="T:Inedo.BuildMaster.Extensibility.IExtensible"/>, allows transparent replacement
            of all instances of a type with this type.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.MasksTypeAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.MasksTypeAttribute"/> class.
            </summary>
            <param name="maskedTypeName">The assembly-qualified-name of the type to replace.</param>
            <param name="version">The replacement version string. See remarks.</param>
            <remarks>
            The version string must specify at a minimum a version number and may be
            prefixed with an inequality operator.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.MasksTypeAttribute.IsMasked(System.Version)">
            <summary>
            Returns a value indicating whether the masking should be applied to a given version.
            </summary>
            <param name="currentVersion">Version to test for masking.</param>
            <returns>True if masking should be applied; otherwise false.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.MasksTypeAttribute.IsVersionInRange(System.Version,System.String)">
            <summary>
            Returns a value indicating whether a version is in range.
            </summary>
            <param name="currentVersion">The version to test.</param>
            <param name="range">The version range string.</param>
            <returns>Value indicating whether the version is in range.</returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.MasksTypeAttribute.MaskedTypeName">
            <summary>
            Gets the assembly-qualified-name of the type to replace.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.MasksTypeAttribute.Version">
            <summary>
            Gets the version replacement string.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Files.SystemEntryInfoComparer">
            <summary>
            Represents a comparison operation for <see cref="T:Inedo.BuildMaster.Files.SystemEntryInfo"/> instances.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Files.SystemEntryInfoComparer.NamePathOrdinal">
            <summary>
            A <see cref="T:Inedo.BuildMaster.Files.SystemEntryInfoComparer"/> that tests the name and path strings for ordinal equality.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Files.SystemEntryInfoComparer.NameOrdinal">
            <summary>
            A <see cref="T:Inedo.BuildMaster.Files.SystemEntryInfoComparer"/> that tests the name string for ordinal equality.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Files.SystemEntryInfoComparer.NameOrdinalExtended">
            <summary>
            A <see cref="T:Inedo.BuildMaster.Files.SystemEntryInfoComparer"/> that tests the name string for ordinal equality and also tests the properies
            of <see cref="T:Inedo.BuildMaster.Files.IExtendedFileEntry"/> if available.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Files.SystemEntryInfoComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Files.SystemEntryInfoComparer"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Files.SystemEntryInfoComparer.Equals(Inedo.BuildMaster.Files.SystemEntryInfo,Inedo.BuildMaster.Files.SystemEntryInfo)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.SystemEntryInfoComparer.GetHashCode(Inedo.BuildMaster.Files.SystemEntryInfo)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The obj.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Inedo.BuildMaster.Proxies.ProxiedProvider">
            <summary>
            Represents a provider proxy useable from the web application.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Proxies.ProxiedProvider.TryGetService``1">
            <summary>
            Tries the get service.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns></returns>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.SimpleBuildMasterContext">
            <summary>
            A simple implementation of <see cref="T:Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext"/>.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.SimpleBuildMasterContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.SimpleBuildMasterContext"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.SimpleBuildMasterContext.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.SimpleBuildMasterContext"/> class.
            </summary>
            <param name="applicationGroupId">The application group identifier.</param>
            <param name="applicationId">The application identifier.</param>
            <param name="releaseNumber">The release number.</param>
            <param name="buildNumber">The build number.</param>
            <param name="deployableId">The deployable identifier.</param>
            <param name="executionId">The execution identifier.</param>
            <param name="environmentId">The environment identifier.</param>
            <param name="serverId">The server identifier.</param>
            <param name="workflowId">The workflow identifier.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.SimpleBuildMasterContext.#ctor(Inedo.BuildMaster.Extensibility.Actions.IActionExecutionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.SimpleBuildMasterContext"/> class.
            </summary>
            <param name="actionExecutionContext">The action execution context.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.SimpleBuildMasterContext.#ctor(Inedo.BuildMaster.Extensibility.Actions.IAgentBasedActionExecutionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.SimpleBuildMasterContext"/> class.
            </summary>
            <param name="agentBasedActionExecutionContext">The agent based action execution context.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.SimpleBuildMasterContext.ApplicationGroupId">
            <summary>
            Gets the ID of the application group ID in the current context, or null if not applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.SimpleBuildMasterContext.ApplicationId">
            <summary>
            Gets the ID of the application in the current context, or null if not applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.SimpleBuildMasterContext.ReleaseNumber">
            <summary>
            Gets the release number in the current context, or null if not applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.SimpleBuildMasterContext.BuildNumber">
            <summary>
            Gets the build number in the current context, or null if not applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.SimpleBuildMasterContext.DeployableId">
            <summary>
            Gets the ID of the deployable in the current context, or null if not applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.SimpleBuildMasterContext.ExecutionId">
            <summary>
            Gets the ID of the execution in the current context, or null if not applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.SimpleBuildMasterContext.EnvironmentId">
            <summary>
            Gets the ID of the environment in the current context, or null if not applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.SimpleBuildMasterContext.ServerId">
            <summary>
            Gets the ID of the server in the current context, or null if not applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.SimpleBuildMasterContext.WorkflowId">
            <summary>
            Gets the workflow ID if applicable.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.TagAttribute">
            <summary>
            Specifies a tag to associate with a page.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.TagAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.TagAttribute"/> class.
            </summary>
            <param name="tag">The tag.</param>
        </member>
        <member name="P:Inedo.BuildMaster.TagAttribute.Tag">
            <summary>
            Gets the tag associated with the page.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Templating.BlockTemplateFragment">
            <summary>
            Represents a fragment that contains another fragment
            </summary>
            <remarks>
            A block is defined with the following format:
            <![CDATA[
               <typ>{[exp])<tmpl>##
            
            typ refers to the block type, as defined in <see cref="TemplateFragment"/>:
              ? - <see cref="ConditionalFragment"/>
              @ - <see cref="EnumeratingFragment"/>
              & - <see cref="EncodingFragement"/>
              + - <see cref="MathExpressionFragment"/>
            
            exp is the the Block Expression that is understood by the block
            
            tmpl is a sub-template
            ]]>
            </remarks>
            <example>
            <![CDATA[?(1==2)This will never show since one can't equal 2##
            @( %MyDataSet.MyTable% ) %Column1% | %Column2% ##]]>
            </example>
        </member>
        <member name="T:Inedo.BuildMaster.Templating.TemplateFragment">
            <summary>
            Represents a portion of a template that may be extracted against a given <see cref="T:Inedo.BuildMaster.Templating.DataContext"/>.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.TemplateFragment.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Templating.TemplateFragment"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.TemplateFragment.ParseChildren">
            <summary>
            Parses the fragment's text and creates children fragments
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.TemplateFragment.ExtractContents(Inedo.BuildMaster.Templating.DataContext,System.IO.TextWriter)">
            <summary>
            Processes the fragment against the specified dataset
            </summary>
            <param name="context"></param>
            <param name="writer"></param>
        </member>
        <member name="P:Inedo.BuildMaster.Templating.TemplateFragment.Text">
            <summary>
            Gets the string that represents the template.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Templating.TemplateFragment.StartIndex">
            <summary>
            Gets the index that this fragment starts at.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Templating.TemplateFragment.Length">
            <summary>
            Gets the length of this fragment.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.BlockTemplateFragment.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new instance of
            </summary>
            <param name="text"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
            <param name="blockExpression"></param>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.BlockTemplateFragment.ParseChildren">
            <summary>
            Parses the fragment's text and creates children fragments.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Inedo.BuildMaster.Templating.BlockTemplateFragment.BlockExpression">
            <summary>
            Gets the expression used to create the block
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Templating.ConditionalFragment">
            <summary>
            Represents a fragment that can conditionally display its contents.
            </summary>
            <remarks>
            The Conditional Block Fragment comes in the following form: ?(
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.ConditionalFragment.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            creats a new instance
            </summary>
            <param name="text"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
            <param name="conditionalExpression"></param>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.ConditionalFragment.ExtractContents(Inedo.BuildMaster.Templating.DataContext,System.IO.TextWriter)">
            <summary>
            Processes the fragment against the specified dataset.
            </summary>
            <param name="context"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Inedo.BuildMaster.Templating.DataContext">
            <summary>
            Represents the data context for a given template replacement
            </summary>
            <remarks>
            A DataContext is collection of DataSets with "bookmarks" that point to
            a specific DataSet within the collection, a Table within that DataSet,
            and an index to the Row within that Table
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.DataContext.#ctor(System.Data.DataSet[])">
            <summary>
            Creates a new instance with the specified DataSets
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.DataContext.#ctor(Inedo.BuildMaster.Templating.DataContext)">
            <summary>
            Creates a new instance based on another context
            </summary>
            <param name="fromContext">context to base this off of</param>
            <remarks>
            The created instance represents a shallow copy, with the exception of
            <see cref="P:Inedo.BuildMaster.Templating.DataContext.DataSets"/>, which is a sepearate <see cref="T:Inedo.BuildMaster.Templating.DataContext.DataSetCollection"/>
            </remarks>
        </member>
        <member name="P:Inedo.BuildMaster.Templating.DataContext.DataSets">
            <summary>
            Gets the DataSetCollection associated with the context
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Templating.DataContext.DataSetName">
            <summary>
            Gets or sets the bookmarked data set
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Templating.DataContext.TableName">
            <summary>
            Gets or sets the bookmarked table
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Templating.DataContext.DataRowIndex">
            <summary>
            Gets or sets the bookmarked index
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Templating.DataContext.CurrentDataSet">
            <summary>
            Gets the current <see cref="T:System.Data.DataSet"/>, which is either the bookmarked one or the first
            in the collection. When there are no datasets, null is returned.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Templating.DataContext.CurrentDataTable">
            <summary>
            Gets the current <see cref="T:System.Data.DataTable"/>, which is either the bookmarked one in the
            <see cref="T:System.Data.DataSet"/> or the first that dataset's table collection. When there are no 
            tables or the dataset is null, null is returned.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Templating.DataContext.CurrentDataRow">
            <summary>
            Gets the current <see cref="P:Inedo.BuildMaster.Templating.DataContext.CurrentDataRow"/>, which is either the bookmarked one in the
            <see cref="P:Inedo.BuildMaster.Templating.DataContext.CurrentDataTable"/> or the first row in that table's collection. When there are no 
            rows or the table is null, null is returned.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Templating.DataContext.DataSetCollection">
            <summary>
            Represents a simple list of datasets
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.DataContext.DataSetCollection.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.DataContext.DataSetCollection.#ctor(System.Collections.Generic.IEnumerable{System.Data.DataSet})">
            <summary>
            Creates a new instance with the specified collection
            </summary>
            <param name="collection">collection to start with</param>
        </member>
        <member name="P:Inedo.BuildMaster.Templating.DataContext.DataSetCollection.Item(System.String)">
            <summary>
            Gets the dataset with the specified name or null if the dataset is not found
            </summary>
            <param name="dataSetName"></param>
            <returns></returns>
        </member>
        <member name="T:Inedo.BuildMaster.Templating.EncodingFragment">
            <summary>
            Represents a fragment that can encode its contents
            </summary>
            <remarks>
            An encoding block expression is either H or U. 
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.EncodingFragment.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Templating.EncodingFragment"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <param name="encodingOptions">The encoding options.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.EncodingFragment.ExtractContents(Inedo.BuildMaster.Templating.DataContext,System.IO.TextWriter)">
            <summary>
            Processes the fragment against the specified dataset
            </summary>
            <param name="context"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Inedo.BuildMaster.Templating.EnumeratingFragment">
            <summary>
            Represents a fragment that extracts itself mutliple times over a expression
            </summary>
            <remarks>
            <![CDATA[The Block Expression represents how the iteration should occur, relative to the DataContext.
            
              [DataSetName.]TableName
              
            There is no way to iterate over tables or datasets; only the rows within a table]]>
            </remarks>
            <example>
            <![CDATA[@(DataSet2.Table3) This will get repeated a bunch of times for each row in Table3 ##
            
            @(Tab1) This is Tab1 in the current dataset ##]]>
            </example>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.EnumeratingFragment.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="text"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
            <param name="enumerationExpression"></param>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.EnumeratingFragment.ExtractContents(Inedo.BuildMaster.Templating.DataContext,System.IO.TextWriter)">
            <summary>
            Processes the fragment against the specified dataset.
            </summary>
            <param name="context"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Inedo.BuildMaster.Templating.LiteralFragment">
            <summary>
            Represents a fragment that does no processing.
            </summary>
            <remarks>
            Literal fragments are inferred when no markup is used, but may also be forced with a "!" block expression.
            </remarks>
            <example>
            <![CDATA[!{}
               Whatever is within this block is literal content.
               %SOMETHING% will appear as is, with both percentages
               &{U}%@#$?## will show the outer markup, and the non-URL encoded markup
             ##]]>
            </example>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.LiteralFragment.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new instance
            </summary>
            <param name="text"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.LiteralFragment.ParseChildren">
            <summary>
            Parses the fragment's text and creates children fragments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.LiteralFragment.ExtractContents(Inedo.BuildMaster.Templating.DataContext,System.IO.TextWriter)">
            <summary>
            Processes the fragment against the specified dataset.
            </summary>
            <param name="context"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Inedo.BuildMaster.Templating.MathExpressionFragment">
            <summary>
            Represents a fragment that can evaluate an expression.
            </summary>
            <remarks>
            Operators: + - * /
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.MathExpressionFragment.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Templating.MathExpressionFragment"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <param name="conditionalExpression">The conditional expression.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.MathExpressionFragment.ExtractContents(Inedo.BuildMaster.Templating.DataContext,System.IO.TextWriter)">
            <summary>
            Processes the fragment against the specified dataset.
            </summary>
            <param name="context"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Inedo.BuildMaster.Templating.ReplacingFragment">
            <summary>
            Represents a class that replaces values against the current data row.
            </summary>
            <remarks>
            <![CDATA[Data expressions are identified by being surrounded by percents, e.g. %data_exp%
            
            A data expression is formatted as follows.
            
             [[DataSet_Name.]Table_Name.]Column_Name[:FormatString][&EncodingOptions]
             
            EncodingOptions can be either H or U, for HtmlEncoding or UrlEncoding, respectively
            When DataSet_Name and/or Table_Name are excluded, they refer to the current dataset and/or row.]]>
            </remarks>
            <example><![CDATA[%MyDataSet.MyTable.Col1%
             %MyOtherTable.Col2%
             %Build_Date:d%
             %Application_Name&H%]]>
            </example>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.ReplacingFragment.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Templating.ReplacingFragment"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.ReplacingFragment.ParseChildren">
            <summary>
            Parses the fragment's text and creates children fragments
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.ReplacingFragment.ExtractContents(Inedo.BuildMaster.Templating.DataContext,System.IO.TextWriter)">
            <summary>
            Processes the fragment against the specified dataset
            </summary>
            <param name="context"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.ReplacingFragment.HandleCustomUtcDateFormatting(System.Object,System.String)">
            <summary>
            Handle custom format for UTC time, applying a special rule where a letter "Z" as the first character 
            of the format string will format the date using UTC, instead of the default local time. Any instance, even
            one that is not a DateTime, will have the specified format string applied.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Templating.Template">
            <summary>
            Represents a template that can be executed against a data context
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.Template.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Templating.Template"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Templating.Template.Process(Inedo.BuildMaster.Templating.DataContext,System.IO.TextWriter)">
            <summary>
            Processes the specified context against the specified writer
            </summary>
            <param name="context"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Inedo.BuildMaster.Templating.VariableNames">
            <summary>
            Contains all of the built-in BuildMaster variable names.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.RELNO">
            <summary>
            The current release number.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.BLDNO">
            <summary>
            The current build number.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.EXECUSER">
            <summary>
            The user which created the current execution.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.PREVRELNO">
            <summary>
            The previous release number.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.PREVBLDNO">
            <summary>
            The previous build number.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.LASTBLDNO">
            <summary>
            The last build number.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.DATE1">
            <summary>
            The current date.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.DATE2">
            <summary>
            The current date.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.DATE">
            <summary>
            The current date.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.REFRELNO">
            <summary>
            The referenced release number.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.REFBLDNO">
            <summary>
            The referenced build number.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.REFRELNAME">
            <summary>
            The referenced release number.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.REFAPPNAME">
            <summary>
            The referenced application name.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.REFAPPID">
            <summary>
            The referenced application ID.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.APPID">
            <summary>
            The current application ID.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.APPNAME">
            <summary>
            The current application name.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.APPDESC">
            <summary>
            The current application description.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.RELNAME">
            <summary>
            The current release name.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.ENVID">
            <summary>
            The current environment ID.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.ENVNAME">
            <summary>
            The current environment name.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.DEPID">
            <summary>
            The current deployable ID.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.DEPNAME">
            <summary>
            The current deployable name.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.SRCDIR">
            <summary>
            The action source directory.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.TRGTDIR">
            <summary>
            The action target directory.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.WRKDIR">
            <summary>
            The action working directory.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.APPDIR">
            <summary>
            The action application-level working directory.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Templating.VariableNames.ROOTDIR">
            <summary>
            The root directory.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Util">
            <summary>
            A collection of static utility methods.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.NullIf(System.Object,System.Object)">
            <summary>
            Returns a null reference if the two specified parameters are equal (or if either are null or DBNull.Value); otherwise, returns the first parameter.
            </summary>
            <param name="a">The first parameter.</param>
            <param name="b">The second parameter.</param>
            <returns>Null reference if the two specified parameters are equal (or if either are null or DBNull.Value); otherwise, the first parameter.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.NullIf(System.String,System.String)">
            <summary>
            Returns a null reference if the two specified parameters are equal (or if either are null); otherwise, returns the first parameter.
            </summary>
            <param name="a">The first parameter.</param>
            <param name="b">The second parameter.</param>
            <returns>Null reference if the two specified parameters are equal (or if either are null); otherwise, the first parameter.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.NullIf``1(System.Nullable{``0},System.Nullable{``0})">
            <summary>
            Returns a null reference if the two specified parameters are equal (or if either are null); otherwise, returns the first parameter.
            </summary>
            <param name="a">The first parameter.</param>
            <param name="b">The second parameter.</param>
            <typeparam name="T">The type of parameter to compare.</typeparam>
            <returns>Null reference if the two specified parameters are equal (or if either are null); otherwise, the first parameter.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.NullIf``1(``0,System.Nullable{``0})">
            <summary>
            Returns a null reference if the two specified parameters are equal (or if either are null); otherwise, returns the first parameter.
            </summary>
            <param name="a">The first parameter.</param>
            <param name="b">The second parameter.</param>
            <typeparam name="T">The type of parameter to compare.</typeparam>
            <returns>Null reference if the two specified parameters are equal (or if either are null); otherwise, the first parameter.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Coalesce(System.Object[])">
            <summary>
            Returns the first non-null or non-DBNull.Value expression among its arguments.
            </summary>
            <param name="args">Objects to test for null.</param>
            <returns>First non-null or non-DBNull.Value value.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Coalesce``2(``0,``1)">
            <summary>
            Returns the first non-null or non-DBNull.Value expression among its arguments.
            </summary>
            <typeparam name="T1">First argument type.</typeparam>
            <typeparam name="T2">Second argument type.</typeparam>
            <param name="arg1">First object to test for null.</param>
            <param name="arg2">Second object to test for null.</param>
            <returns>First non-null or non-DBNull.Value value.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.CoalesceStr(System.Object[])">
            <summary>
            Returns the first non-null and non-string.Empty expression among its arguments.
            </summary>
            <param name="args">Objects to convert to strings and test for null or empty.</param>
            <returns>First non-null and non-string.Empty value.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.CoalesceStr``2(``0,``1)">
            <summary>
            Returns the first non-null and non string.Empty expression among the specified arguments.
            </summary>
            <typeparam name="T1">First argument type.</typeparam>
            <typeparam name="T2">Second argument type.</typeparam>
            <param name="arg1">First argument.</param>
            <param name="arg2">Second argument.</param>
            <returns>First non-null and non-string.Empty value.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Decode``1(System.Object,System.Object[])">
            <summary>
            Decodes an object mapping in a similar fashion to the PLSQL Decode function.
            </summary>
            <typeparam name="TRet">Type of value to return.</typeparam>
            <param name="value">The value to compare.</param>
            <param name="args">See remarks.</param>
            <remarks>
            The syntax for the Decode function is:
              Decode( value, search, result [, search, result]... [, default] )
              expression is the value to compare.
              search is the value that is compared against expression.
              result is the value returned, if expression is equal to search.
              default is optional. If no matches are found, the decode will return default. If default is omitted, then the decode statement will return null (if no matches are found)
            </remarks>
            <returns>First matching result. See remarks for details.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Decode``2(``1,System.Object[])">
            <summary>
            Decodes an object mapping in a similar fashion to the PLSQL Decode function.
            </summary>
            <typeparam name="TRet">Type of value to return.</typeparam>
            <typeparam name="TCode">Type of value to compare.</typeparam>
            <param name="value">The value to compare.</param>
            <param name="args">See remarks.</param>
            <remarks>
            The syntax for the Decode function is:
              Decode( value, search, result [, search, result]... [, default] )
              expression is the value to compare.
              search is the value that is compared against expression.
              result is the value returned, if expression is equal to search.
              default is optional. If no matches are found, the decode will return default. If default is omitted, then the decode statement will return null (if no matches are found)
            </remarks>
            <returns>First matching result. See remarks for details.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.ConcatN(System.Object[])">
            <summary>
            Returns String.Empty when one of the arguments is null or DBNull.Value; otherwise, returns a concatenation of the arguments.
            </summary>
            <param name="args">Arguments to concatenate.</param>
            <returns>Concatenated string or String.Empty if an argument is null or DBNull.Value.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.ConcatNE(System.Object[])">
            <summary>
            Returns String.Empty when one of the arguments is null, DBNull.Value, or String.Empty; otherwise, returns a concatenation of the arguments.
            </summary>
            <param name="args">Arguments to concatenate.</param>
            <returns>Concatenated string or String.Empty if an argument is null, DBNull.Value, or String.Empty.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Agents">
            <summary>
            Contains methods for working with agents.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Agents.CreateAgentFromId(System.Nullable{System.Int32})">
            <summary>
            Returns the agent with the specified ID.
            </summary>
            <param name="agentId">The agent ID.</param>
            <returns>The agent with the specified ID.</returns>
            <remarks>
            A value of null will cause this method to return a local agent.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Agents.CreateLocalAgent">
            <summary>
            Creates an agent for the local system.
            </summary>
            <returns>Local agent.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Artifacts">
            <summary>
            Contains methods for working with artifacts.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Artifacts.GetArtifactPath(System.Int32,System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns the relative path to an artifact file from the Artifact Base Path.
            </summary>
            <param name="applicationId">ID of the application which owns the artifact.</param>
            <param name="releaseNumber">Release number in which the artifact was created.</param>
            <param name="buildNumber">Build number in which the artifact was created.</param>
            <param name="deployableId">ID of the deployable which owns the artifact.</param>
            <param name="artifactName">Name of the artifact.</param>
            <returns>Path to the artifact file relative to the artifact base path.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Artifacts.GetFullArtifactPath(System.String,System.Int32,System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns the absolute path to an artifact file.
            </summary>
            <param name="artifactBasePath">Absolute path of the artifact library.</param>
            <param name="applicationId">ID of the application which owns the artifact.</param>
            <param name="releaseNumber">Release number in which the artifact was created.</param>
            <param name="buildNumber">Build number in which the artifact was created.</param>
            <param name="deployableId">ID of the deployable which owns the artifact.</param>
            <param name="artifactName">Name of the artifact.</param>
            <returns>Path to the artifact file.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Artifacts.GetFullArtifactPath(System.String,Inedo.BuildMaster.Data.Tables.BuildArtifacts_Extended)">
            <summary>
            Returns the absolute path to an artifact file.
            </summary>
            <param name="artifactBasePath">The artifact base path.</param>
            <param name="artifact">The artifact.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Artifacts.GetFullArtifactPath(System.String,Inedo.BuildMaster.Artifacts.ArtifactIdentifier)">
            <summary>
            Returns the absolute path to an artifact file.
            </summary>
            <param name="artifactBasePath">The artifact base path.</param>
            <param name="artifact">The artifact identifier.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Artifacts.PurgeBuildArtifact(System.String,Inedo.BuildMaster.Artifacts.ArtifactIdentifier)">
            <summary>
            Purges the build artifact from the system and deletes the artifact zip file.
            </summary>
            <param name="artifactBasePath">The artifact base path.</param>
            <param name="artifact">The artifact.</param>
            <exception cref="T:System.ArgumentNullException">
            artifactBasePath
            or
            artifact
            </exception>
            <exception cref="T:System.ArgumentException">Artifact does not exist</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Artifacts.CreateBuildArtifact(Inedo.BuildMaster.Extensibility.Actions.IAgentBasedActionExecutionContext,System.String,Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator,System.Action)">
            <summary>
            Creates a build artifact and stores it in the artifact library.
            </summary>
            <param name="context">The context.</param>
            <param name="artifactName">Name of the artifact.</param>
            <param name="logger">The logger.</param>
            <param name="throwIfCanceledOrTimeoutExpired">The throw if canceled or timeout expired.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null or
            <paramref name="logger"/> is null or
            <paramref name="artifactName"/> is null/whitespace or
            <paramref name="throwIfCanceledOrTimeoutExpired"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="artifactName"/> contains invalid path characters.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Artifacts.DeployBuildArtifact(Inedo.BuildMaster.Extensibility.Actions.IAgentBasedActionExecutionContext,Inedo.BuildMaster.Artifacts.DeployArtifactOptions,Inedo.BuildMaster.Extensibility.Actions.ActionLogMessageDelegator,System.Action)">
            <summary>
            Deploys a BuildMaster build artifact using the specified agent-based action execution context and deployment options.
            </summary>
            <param name="context">The agent-based action execution context.</param>
            <param name="options">The artifact deployment options.</param>
            <param name="logger">The logger.</param>
            <param name="throwIfCanceledOrTimeoutExpired">A delegate that should only call an action's ThrowIfCanceledOrTimeoutExpired method.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null or <paramref name="options"/> is null
            or <paramref name="logger"/> is null or <paramref name="throwIfCanceledOrTimeoutExpired"/> is null.</exception>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Deployables">
            <summary>
            Contains utility methods for working with deployables.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Deployables.GetReleaseDeployablesXml(System.Collections.Generic.IEnumerable{Inedo.BuildMaster.Data.Tables.ReleaseDeployables_Extended})">
            <summary>
            Returns release deployables XML that is suitable for use with the <see cref="M:StoredProcs.Releases_CreateOrUpdateRelease"/> method.
            </summary>
            <param name="releaseDeployables">Release deployables to generate XML for.</param>
            <returns>String containing release deployables XML.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Util.JavaScript">
            <summary>
            Contains JavaScript-related utility methods.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.JavaScript.WriteJson(System.IO.TextWriter,System.Object)">
            <summary>
            Writes an object as JSON-serialized data to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> used to write the JSON data.</param>
            <param name="obj">The object to serialize.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.JavaScript.ToJson(System.Object)">
            <summary>
            Returns a JSON-format string of a serialized object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>JSON-formatted string representation of the object.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.JavaScript.JsonEncode(System.String,System.Boolean)">
            <summary>
            Escapes characters necessary to encode the string in JSON format.
            </summary>
            <param name="s">String to encode.</param>
            <param name="escapeSingleQuotes">Value indicating whether to escape single quotes or double quotes.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Path2">
            <summary>
            Contains static path-related utility methods.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Path2.GetDirectoryName(System.String)">
            <summary>
            Same as <see cref="M:System.IO.Path.GetDirectoryName(System.String)"/>, but preserves the directory separator character.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>
            A System.String containing directory information for path, or null if path
            denotes a root directory, is the empty string (""), or is null.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Path2.GetFileName(System.String)">
            <summary>
            Same as <see cref="M:System.IO.Path.GetFileName(System.String)"/>, but preserves the directory separator character.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>
            A System.String consisting of the characters after the last directory character in path.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Path2.Combine(System.String,System.String)">
            <summary>
            Same as <see cref="M:System.IO.Path.Combine(System.String,System.String)"/>, but attempts to preserve the directory separator character.
            </summary>
            <param name="path1">The first path.</param>
            <param name="path2">The second path.</param>
            <returns>
            A string containing the combined paths. If one of the specified paths is
            a zero-length string, this method returns the other path. If path2 contains
            an absolute path, this method returns path2.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Path2.Combine(System.Char,System.String,System.String)">
            <summary>
            Same as <see cref="M:System.IO.Path.Combine(System.String,System.String)"/>, but specifying the directory separator character.
            </summary>
            <param name="separator">The directory separator character.</param>
            <param name="path1">The first path.</param>
            <param name="path2">The second path.</param>
            <returns>
            A string containing the combined paths. If one of the specified paths is
            a zero-length string, this method returns the other path. If path2 contains
            an absolute path, this method returns path2.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Path2.IsPathRooted(System.String)">
            <summary>
            Returns a value indicating whether the specified path is rooted.
            </summary>
            <param name="path">The path.</param>
            <returns>True if the path is rooted; otherwise false.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Path2.DetectDirectorySeparator(System.String)">
            <summary>
            Returns the best guess for the canonical directory separator in a path.
            </summary>
            <param name="path">The path.</param>
            <returns>Best guess for the path's directory separator.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Plans">
            <summary>
            Contains methods for working with deployment plans.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Plans.CopyActionGroup(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Copies an action group from one deployment plan to another.
            </summary>
            <param name="deploymentPlanActionGroupId">The deployment plan action group identifier.</param>
            <param name="targetDeploymentPlanId">The target deployment plan identifier.</param>
            <returns>The ID of the new deployment plan action group.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Plans.LinkActionGroup(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates an action group link.
            </summary>
            <param name="deploymentPlanActionGroupId">The deployment plan action group identifier.</param>
            <param name="targetDeploymentPlanId">The target deployment plan identifier.</param>
            <returns>The ID of the new deployment plan action group.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Plans.ExportToXml(System.Int32,System.Xml.XmlWriter)">
            <summary>
            Exports a deployment plan to an XML file.
            </summary>
            <param name="deploymentPlanId">The ID of the deployment plan to export.</param>
            <param name="xmlWriter">A <see cref="T:System.Xml.XmlWriter"/> to write the deployment plan to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="xmlWriter"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Plans.ValidateXml(System.IO.TextReader)">
            <summary>
            Validates an exported deployment plan and returns any appropriate errors and warnings.
            </summary>
            <param name="textReader">A <see cref="T:System.IO.TextReader"/> containing the plan to validate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="textReader"/> is null.</exception>
            <returns>
            A collection of validation errors and warnings. 
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Plans.ValidateXml(System.IO.Stream)">
            <summary>
            Validates an exported deployment plan and returns any appropriate errors and warnings.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> containing the plan to validate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <returns>
            A collection of validation errors and warnings. 
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Plans.ImportFromXml(System.Int32,System.Int32,System.IO.TextReader)">
            <summary>
            Imports a deployment plan from an XML file.
            </summary>
            <param name="workflowId">The workflow into which the plan will be imported.</param>
            <param name="environmentId">The environment into which the plan will be imported.</param>
            <param name="textReader">A <see cref="T:System.IO.TextReader"/> containing the plan to import.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="textReader"/> is null.</exception>
            <exception cref="T:System.AggregateException">A validation error occurred.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Plans.ImportFromXml(System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            Imports a deployment plan from an XML file.
            </summary>
            <param name="workflowId">The workflow into which the plan will be imported.</param>
            <param name="environmentId">The environment into which the plan will be imported.</param>
            <param name="stream">A <see cref="T:System.IO.Stream"/> containing the plan to import.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <exception cref="T:System.AggregateException">A validation error occurred.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Plans.ImportFromXml(System.Int32,System.Int32,System.Xml.XmlReader)">
            <summary>
            Imports a deployment plan from an XML file.
            </summary>
            <param name="workflowId">The workflow into which the plan will be imported.</param>
            <param name="environmentId">The environment into which the plan will be imported.</param>
            <param name="xmlReader">A <see cref="T:System.Xml.XmlReader"/> containing the plan to import.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="xmlReader"/> is null.</exception>
            <exception cref="T:System.AggregateException">A validation error occurred.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Plans.ImportFromXml(System.Int32,System.IO.Stream)">
            <summary>
            Imports a deployment plan from an XML file.
            </summary>
            <param name="deploymentPlanId">The deployment plan into which the plan will be imported.</param>
            <param name="stream">A <see cref="T:System.IO.Stream"/> containing the plan to import.</param>
            /// <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <exception cref="T:System.AggregateException">A validation error occurred.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Plans.ImportFromXml(System.Int32,System.Xml.XmlReader)">
            <summary>
            Imports a deployment plan from an XML file.
            </summary>
            <param name="deploymentPlanId">The deployment plan into which the plan will be imported.</param>
            <param name="xmlReader">A <see cref="T:System.Xml.XmlReader"/> containing the plan to import.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="xmlReader"/> is null.</exception>
            <exception cref="T:System.AggregateException">A validation error occurred.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Plans.ImportFromXml(System.Xml.XmlReader)">
            <summary>
            Imports a deployment plan from an XML file.
            </summary>
            <param name="xmlReader">A <see cref="T:System.Xml.XmlReader"/> containing the plan to import.</param>
            <returns>ID of the new deployment plan.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="xmlReader"/> is null.</exception>
            <exception cref="T:System.AggregateException">A validation error occurred.</exception>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Plans.ValidationLevel">
            <summary>
            Specifies the severity of a validation message.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Util.Plans.ValidationLevel.Warning">
            <summary>
            Indicates a likely problem, but will not prevent importing.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Util.Plans.ValidationLevel.Error">
            <summary>
            Indicates a problem which prevents importing.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Plans.ValidationMessage">
            <summary>
            Describes a validation error or warning.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Plans.ValidationMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Util.Plans.ValidationMessage.Level">
            <summary>
            Gets the severity of the message.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Util.Plans.ValidationMessage.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Proxy">
            <summary>
            Contains methods for working with proxied objects.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Proxy.Initialize(Inedo.BuildMaster.Proxies.IAgentProxyFactory,Inedo.BuildMaster.Proxies.IProviderProxyFactory)">
            <summary>
            Initializes the specified agent proxy factory.
            </summary>
            <param name="agentProxyFactory">The agent proxy factory.</param>
            <param name="providerProxyFactory">The provider proxy factory.</param>
            <exception cref="T:System.InvalidOperationException">Proxying has already been initialized.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Proxy.CreateProviderProxy(System.Int32,System.Int32)">
            <summary>
            Creates the provider proxy.
            </summary>
            <param name="providerId">The provider identifier.</param>
            <param name="serverId">The server identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Proxy.CreateProviderProxy(Inedo.BuildMaster.Extensibility.Providers.ProviderBase,System.Int32)">
            <summary>
            Creates the provider proxy.
            </summary>
            <param name="provider">The provider.</param>
            <param name="serverId">The server identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Proxy.CreateProviderProxy(Inedo.BuildMaster.Extensibility.Providers.ProviderBase,Inedo.BuildMaster.Extensibility.Agents.AgentBase)">
            <summary>
            Creates the provider proxy.
            </summary>
            <param name="provider">The provider.</param>
            <param name="agent">The agent.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Proxy.CreateProviderProxy(Inedo.BuildMaster.Extensibility.Providers.ProviderBase)">
            <summary>
            Creates the provider proxy.
            </summary>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Proxy.CreateProviderProxy(System.Int32)">
            <summary>
            Creates the provider proxy.
            </summary>
            <param name="providerId">The provider identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Proxy.CreateAgentProxy(Inedo.BuildMaster.Extensibility.Agents.AgentBase)">
            <summary>
            Creates the agent proxy.
            </summary>
            <param name="agent">The agent.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Proxy.CreateAgentProxy(System.Int32)">
            <summary>
            Creates the agent proxy.
            </summary>
            <param name="serverId">The server identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Recipes">
            <summary>
            Contains static utility methods used by recipes for easier application setup and creation of deployment plans.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.CreateConfigurationFile(System.Int32,System.String)">
            <summary>
            Creates a configuration file whose name is represented by the <paramref name="filePath"/> argument.
            </summary>
            <param name="deployableId">The deployable id.</param>
            <param name="filePath">The file path.</param>
            <returns>The ID of the created configuration file.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.CreateConfigurationFileInstance(System.Int32,System.String,System.Int32)">
            <summary>
            Creates a configuration file instance and associates it with an environment..
            </summary>
            <param name="configFileId">The config file id.</param>
            <param name="instanceName">Name of the instance.</param>
            <param name="environmentId">The environment id.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.CreateConfigurationFileVersions(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.String},System.Byte[])">
            <summary>
            Creates a configuration file version for each instance name provided and associates them with the specified configuration file.
            </summary>
            <param name="configFileId">The config file id.</param>
            <param name="releaseNumber">The release number.</param>
            <param name="instanceNames">The instance names.</param>
            <param name="fileBytes">The file bytes.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.CreateDeploymentPlanActionGroup(System.Int32,System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Creates a deployment plan action group in the specified deployment plan and returns the base action group ID.
            </summary>
            <param name="deploymentPlanId">The ID of the deployment plan which will contain the group.</param>
            <param name="deployableId">The ID of the action group deployable.</param>
            <param name="deployableName">The name of the action group deployable (only used if <paramref name="deployableId"/>) is null.</param>
            <param name="name">The name of the action group.</param>
            <param name="description">The description of the action group.</param>
            <returns>The action group ID associated with the newly created deployment plan action group.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.AddAction(System.Int32,Inedo.BuildMaster.Extensibility.Actions.ActionBase)">
            <summary>
            Adds an action that runs locally if it's a remote action, or does not specify a server.
            </summary>
            <param name="actionGroupId">The plan id.</param>
            <param name="action">The action.</param>
            <returns>The action sequence of the created action.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.AddAction(System.Int32,System.Nullable{System.Int32},Inedo.BuildMaster.Extensibility.Actions.ActionBase)">
            <summary>
            Adds an action to be run on a remote server.
            </summary>
            <param name="actionGroupId">The plan id.</param>
            <param name="serverId">The server id.</param>
            <param name="action">The action.</param>
            <returns>The action sequence of the created action.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.AddAction(System.Int32,System.Nullable{System.Int32},Inedo.BuildMaster.Extensibility.Actions.ActionBase,System.String)">
            <summary>
            Adds an action with a custom description.
            </summary>
            <param name="actionGroupId">The action group id.</param>
            <param name="serverId">The server id.</param>
            <param name="action">The action.</param>
            <param name="description">The description.</param>
            <returns>The action sequence of the created action.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.CreateDeployable(System.Int32,System.String)">
            <summary>
            Creates a deployable.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="deployableName">Name of the deployable.</param>
            <returns>The ID of the created deployable.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.AddDummyAction(System.Int32,System.String)">
            <summary>
            Adds a sleep action with a custom description.
            </summary>
            <param name="planId">The plan id.</param>
            <param name="description">The description.</param>
            <returns>The action sequence of the created action.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.CreateRelease(System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a release and includes a single deployable with a specified <see cref="T:Inedo.BuildMaster.Data.Domains.DeployableInclusionTypes"/>.
            </summary>
            <param name="releaseNumber">The release number.</param>
            <param name="applicationId">The application id.</param>
            <param name="deployableId">The deployable id.</param>
            <param name="workflowId">The workflow id.</param>
            <param name="deployableInclusionTypeCode">The deployable type code.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.CreateRelease(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Creates a release and includes multiple deployables with that release.
            </summary>
            <param name="releaseNumber">The release number.</param>
            <param name="applicationId">The application id.</param>
            <param name="deployableIds">The deployable ids.</param>
            <param name="workflowId">The workflow id.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.CreateSetupRelease(System.Int32,System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Creates a setup release.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="releaseNumberScheme">The release number scheme.</param>
            <param name="workflowId">The workflow id.</param>
            <param name="includedDeployableIds">The included deployable ids.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.BuildDeployablesXml(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Builds a deployables XML string suitable for the Releases_CreateOrUpdateRelease procedure that includes 
            the specified deployables in the release.
            </summary>
            <param name="deployableIds">The deployable ids.</param>
            <returns>A string for use in the Releases_CreateOrUpdateRelease stored procedure.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.CreateNewApplicationGroup(System.String)">
            <summary>
            Creates a new application group.
            </summary>
            <param name="applicationGroupName">Name of the application group.</param>
            <returns>The ID of the created application group.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.CreateNewApplication(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Creates a new application.
            </summary>
            <param name="applicationName">Name of the application.</param>
            <param name="releaseNumberScheme">The release number scheme.</param>
            <param name="buildNumberScheme">The build number scheme.</param>
            <param name="autoIncrementReleaseNumber">if set to <c>true</c> [auto increment release number].</param>
            <param name="applicationGroupId">The application group id.</param>
            <returns>The ID of the created application.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.CreateWorkflow(System.Int32)">
            <summary>
            Creates the workflow.
            </summary>
            <param name="applicationId">The application id.</param>
            <returns>The ID of the created workflow.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.CreateWorkflow(System.Int32,System.String)">
            <summary>
            Creates a workflow.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="workflowName">Name of the workflow.</param>
            <returns>The ID of the created workflow.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.CreateWorkflowStep(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates a workflow step.
            </summary>
            <param name="workflowId">The workflow id.</param>
            <param name="environmentId">The environment id.</param>
            <param name="deploymentPlanId">The deployment plan identifier.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.CreateDeploymentPlan(System.String)">
            <summary>
            Creates the deployment plan.
            </summary>
            <param name="name">The name.</param>
            <returns>The ID of the deployment plan.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.CreateDeploymentPlanForWorkflowStep(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates an anonymous deployment plan and assigns it to the specified workflow step.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="stepSequence">The workflow step sequence.</param>
            <param name="autoPromote">if set to <c>true</c>, automatically promote eligible builds to the specified workflow step.</param>
            <returns>The ID of the deployment plan.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.CreateBuildStep(System.Int32)">
            <summary>
            Creates a deployment plan and assigns it as the build step for the specified workflow.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <returns>The ID of the deployment plan.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.CreateBuildStepBuildImporter(System.Int32,Inedo.BuildMaster.Extensibility.BuildImporters.BuildImporterTemplateBase)">
            <summary>
            Creates a build step for a workflow using the specified build importer template configuration.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="buildImporterTemplateConfiguration">The build importer template configuration.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Recipes.Munging">
            <summary>
            Contains static utility methods used primarily to create instances of extensible types whose
            property values are set to match those of an anonymous type.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.Munging.InvokeMethod(System.String,System.String,System.Object[])">
            <summary>
            Invokes a method on the specified type.
            </summary>
            <param name="assemblyQualifiedTypeName">Name of the assembly qualified type.</param>
            <param name="methodName">Name of the method.</param>
            <param name="args">Arguments to the method.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.Munging.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the value of a property on the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.Munging.MungeInstance(System.String,System.Object)">
            <summary>
            Creates an instance of the specified assembly-qualified type name with matching property values
            to the anonymous argument <paramref name="objToMunge"/>.
            </summary>
            <param name="assemblyQualifiedTypeName">Name of the assembly qualified type.</param>
            <param name="objToMunge">The obj to munge.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.Munging.MungeCoreExAction(System.String,System.Object)">
            <summary>
            Creates an instance of an <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionBase"/>
            with matching property values to the anonymous argument <paramref name="objToMunge"/>.
            </summary>
            <param name="partialTypeName">Partial name of the type of the action relative to the 
            Inedo.BuildMaster.Extensibility.Actions namespace.</param>
            <param name="objToMunge">The object whose property values will be set on the action.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.Munging.MungeCoreExVariable(System.String,System.Object)">
            <summary>
            Creates an instance of a <see cref="T:Inedo.BuildMaster.Extensibility.Variables.VariableBase"/>
            with matching property values to the anonymous argument <paramref name="objToMunge"/>.
            </summary>
            <param name="partialTypeName">Partial name of the type of the variable relative to the 
            Inedo.BuildMaster.Extensibility.Variables namespace.</param>
            <param name="objToMunge">The object whose property values will be set on the variable.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Recipes.Munging.MungeCoreExPredicate(System.String,System.Object)">
            <summary>
            Creates an instance of a <see cref="T:Inedo.BuildMaster.Extensibility.Predicates.PredicateBase"/>
            with matching property values to the anonymous argument <paramref name="objToMunge"/>.
            </summary>
            <param name="partialTypeName">Partial name of the type of the predicate relative to the 
            Inedo.BuildMaster.Extensibility.Predicates namespace.</param>
            <param name="objToMunge">The object whose property values will be set on the predicate.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Reflection">
            <summary>
            A collection of static utility methods to perform reflection related tasks.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Reflection.GetGenericArgumentsFromAncestor(System.Type,System.Type)">
            <summary>
            Returns the generic arguments from an ancestor with the specified generic type definition from the specified type, or an empty type array if the 
            type's ancestors do not implement the specified generic type definition.
            </summary>
            <param name="type">Type to inspect.</param>
            <param name="genericTypeDefinition">A generic type definition.</param>
            <returns>A type arguments array or an empty array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null or <paramref name="genericTypeDefinition"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="genericTypeDefinition"/> is not a generic type definition.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Reflection.ImplementsInterface(System.Type,System.Type)">
            <summary>
            Returns a value indicating whether a type implements an interface.
            </summary>
            <param name="toCheck">The type to check.</param>
            <param name="iface">The interface to search for.</param>
            <returns>True if the type implements the interface; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">An argument is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="iface"/> parameter is not an interface type.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Reflection.GetCustomAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Returns an attribute (typed <typeparamref name="T"/>) if it is present on a member.
            </summary>
            <typeparam name="T">Type of attribute to return.</typeparam>
            <param name="member">Member to search for the attribute on.</param>
            <returns>Attribute if it was found; otherwise null.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Reflection.GetCustomAttributes``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Returns all instances of an attribute type if it is present on a member.
            </summary>
            <typeparam name="T">Type fo the attribute to return.</typeparam>
            <param name="member">Member to search for the attributes on.</param>
            <returns>Attributes that were found.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Reflection.GetBaseTypes(System.Type)">
            <summary>
            Returns an enumeration of the specified type and all its base types.
            </summary>
            <param name="type">The type to enumerate.</param>
            <returns>The specified type and all its base types.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Reflection.GetMethodWithSignature(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Returns the first matching method with a signature compatible to the specified argument types.
            </summary>
            <param name="type">The object type which contains the method.</param>
            <param name="methodName">The name of the method.</param>
            <param name="argTypes">The types of the arguments supplied to the method.</param>
            <returns>First matching <see cref="T:System.Reflection.MethodInfo"/> or null if no matching method was found.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Providers">
            <summary>
            A static class of utility methods to assist with managing <see cref="T:Inedo.BuildMaster.Extensibility.Providers.ProviderBase"/> classes.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Providers.CreateProviderFromId``1(System.Int32,Inedo.BuildMaster.Extensibility.Agents.AgentBase,System.Boolean)">
            <summary>
            Creates a provider from its ID.
            </summary>
            <typeparam name="TProviderBase">The base type of the provider.</typeparam>
            <param name="providerId">The provider ID.</param>
            <param name="agent">The agent which the provider will use.</param>
            <param name="disposeAgent">Value indicating whether the provider should dispose of the agent when the provider is disposed.</param>
            <returns>Provider created from the specified ID.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Providers.CreateProviderFromId``1(System.Int32,Inedo.BuildMaster.Extensibility.Agents.AgentBase)">
            <summary>
            Creates a provider from its ID.
            </summary>
            <typeparam name="TProviderBase">The base type of the provider.</typeparam>
            <param name="providerId">The provider ID.</param>
            <param name="agent">The agent which the provider will use.</param>
            <returns>Provider created from the specified ID.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Providers.CreateProviderFromId``1(System.Int32,System.Int32)">
            <summary>
            Creates a provider from its ID.
            </summary>
            <typeparam name="TProviderBase">The base type of the provider.</typeparam>
            <param name="providerId">The provider ID.</param>
            <param name="serverId">The server ID.</param>
            <returns>Provider created from the specified ID.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Providers.CreateProviderFromId``1(System.Int32)">
            <summary>
            Creates a provider from its ID.
            </summary>
            <typeparam name="TProviderBase">The base type of the provider.</typeparam>
            <param name="providerId">The provider ID.</param>
            <returns>Provider created from the specified ID.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Providers.InitializeProvider(Inedo.BuildMaster.Extensibility.Providers.ProviderBase,System.Int32)">
            <summary>
            Initializes an already-created provider.
            </summary>
            <param name="provider">The provider to initialize.</param>
            <param name="serverId">The server ID of the provider.</param>
            <returns>Initialized provider.</returns>
            <remarks>
            This method should only be used for testing a provider configuration.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Providers.GetProviderTypeCode(System.Type)">
            <summary>
            Returns a provider created based on its <see cref="T:System.Type"/>.
            </summary>
            <param name="providerType">The type of the provider.</param>
            <returns>Newly-created provider.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Providers.GetProviderTypeCode(System.Type,System.Boolean)">
            <summary>
            Returns a provider created based on its <see cref="T:System.Type"/>.
            </summary>
            <param name="providerType">The type of the provider.</param>
            <param name="throwException">Value indicating whether an exception should be thrown if the provider cannot be created.</param>
            <returns>Newly-created provider.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Providers.GetRequiredProviderInterfaces(System.Type)">
            <summary>
            Returns a collection of the interfaces that a provider must implement.
            </summary>
            <param name="type">Interface types which the action requires.</param>
            <returns>Collection of the interface types which the action requires.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Files">
            <summary>
            A set of static utility methods used to load and compare files.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.GetFileEntry(System.String)">
            <summary>
            Returns an <see cref="T:Inedo.BuildMaster.Files.ExtendedFileEntryInfo"/> item for a file at the specified path.
            </summary>
            <param name="path">Path to the file.</param>
            <returns><see cref="T:Inedo.BuildMaster.Files.ExtendedFileEntryInfo"/> of the specified file.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.GetDirectoryEntry(System.String,System.Exception[]@,System.Boolean)">
            <summary>
            Deprecated.
            </summary>
            <param name="path"></param>
            <param name="loadExceptions"></param>
            <param name="recurse"></param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.GetDirectoryEntry(System.String,System.String,System.Exception[]@,System.Boolean)">
            <summary>
            Deprecated.
            </summary>
            <param name="rootPathToTrim"></param>
            <param name="path"></param>
            <param name="loadExceptions"></param>
            <param name="recurse"></param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.GetDirectoryEntry(System.String,System.String,System.Exception[]@,System.Boolean,System.Boolean)">
            <summary>
            Deprecated.
            </summary>
            <param name="rootPathToTrim"></param>
            <param name="path"></param>
            <param name="loadExceptions"></param>
            <param name="recurse"></param>
            <param name="buildFileHashes"></param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.GetDirectoryEntry(Inedo.BuildMaster.Files.GetDirectoryEntryCommand)">
            <summary>
            Returns the contents of a file system directory.
            </summary>
            <param name="command">Specifies information about the type of file system enumeration to perform.</param>
            <returns>Contents of the specified directory and any exceptions thrown during enumeration.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets attributes on the specified file.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="attributes">The attributes to set on the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the last write time of the specified file.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="date">The last write time to set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.ClearFolder(System.String)">
            <summary>
            Deletes all files and subfolders in a folder (but not the folder itself).
            </summary>
            <param name="path">The path of the folder to empty.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.ClearFolder(System.String,System.Boolean)">
            <summary>
            Deletes all files in a folder (but not the folder itself).
            </summary>
            <param name="path">The path of the folder to empty.</param>
            <param name="recurse">Value indicating whether subfolders should also be deleted.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.DeleteFile(System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="path">The path of the file.</param>
            <remarks>
            This method will delete a file even if it is marked as hidden or read-only.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.DeleteFolder(System.String)">
            <summary>
            Deletes all files in a folder and the folder itself.
            </summary>
            <param name="path">The path of the folder to delete.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.CreateFolder(System.String)">
            <summary>
            Creates a directory if it does not already exist.
            </summary>
            <param name="path">The path of the directory to create.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.FileExists(System.String)">
            <summary>
            Returns a value indicating whether a file exists.
            </summary>
            <param name="path">The path of the file to check.</param>
            <returns>True if the file exists; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.FolderExists(System.String)">
            <summary>
            Returns a value indicating whether a directory exists.
            </summary>
            <param name="path">The path of the directory to check.</param>
            <returns>True if the directory exists; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="targetFileName">The name and path of the file to copy to.</param>
            <param name="overwrite">Value indicating whether to overwrite the target file if it already exists.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceFileName"/> is null or empty or <paramref name="targetFileName"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.TransferFile(Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter,System.String,Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter,System.String)">
            <summary>
            Transfers a file from a source server to a target server.
            </summary>
            <param name="sourceAgent">An instance which implements <see cref="T:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter"/> to transfer from.</param>
            <param name="sourceFilePath">The file path on the source server to transfer from.</param>
            <param name="targetAgent">An instance which implements <see cref="T:Inedo.BuildMaster.Extensibility.Agents.IFileOperationsExecuter"/> to transfer to.</param>
            <param name="targetFilePath">The file path on the target server to transfer to.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Returns a stream backed by a file on disk.
            </summary>
            <param name="fileName">The full path of the file to open.</param>
            <param name="fileMode">The file mode.</param>
            <param name="fileAccess">The file access.</param>
            <param name="fileShare">The file share.</param>
            <returns>Stream backed by the specified file.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.GetShortFileSize(System.String)">
            <summary>
            Gets a short file size (e.g. 72 MB) in string format for the specified file.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.GetZipEntryInfo(System.String)">
            <summary>
            Gets a <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryInfo"/> object containing the files within the specified zip file on disk.
            </summary>
            <param name="zipFilePath">The zip file path.</param>
            <exception cref="T:System.ArgumentNullException">filePath</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.ExtractZipFile(System.String,System.String,System.Boolean)">
            <summary>
            Extracts the zip file.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="targetPath">The target path.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Files.Comparison">
            <summary>
            A set of static methods for file/directory comparison.
            </summary>
            <remarks>
            <para>
            File masks are almost always sent in as a string array. Our file masks
            work mostly like DOS, in that:
            </para>
            <list type="table">
            <item>
                <term>*</term>
                <description>Matches zero or more characters</description>
            </item>
            <item>
                <term>?</term>
                <description>Matches exactly one character</description>
            </item>
            </list>
            <para>
            So, Build*.dll will match BuildMaster.dll, BuildMaster2.dll, but not BUildMaster.pdb
            </para>
            <para>
            When a mask starts with a !, anything that doesn't match that wildcard is matched. When
            used in a set, ! masks take precedence over matches. For example, the masks
             * AND !* will match nothing
             *.dll AND !BuildMaster*.dll will match all .dll files that don't start with BuildMaster
            is matched.
            </para>
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.Comparison.GetMatches(System.String,Inedo.BuildMaster.Files.SystemEntryInfo,System.String[])">
            <summary>
            Returns an array of <see cref="T:Inedo.BuildMaster.Files.SystemEntryInfo"/> items which match the specified search masks.
            </summary>
            <param name="pathRoot">Root path in which to search for matches.</param>
            <param name="entry">Top-level entry containing sub-entries to mask.</param>
            <param name="masks">Masks used to filter sub-entries.</param>
            <returns>Matching <see cref="T:Inedo.BuildMaster.Files.SystemEntryInfo"/> items.</returns>
            <remarks>
            For a description of file masking, see <see cref="T:Inedo.BuildMaster.Util.Files.Comparison"/>.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.Comparison.GetNonMatches(System.String,Inedo.BuildMaster.Files.SystemEntryInfo,System.String[])">
            <summary>
            Returns an array of <see cref="T:Inedo.BuildMaster.Files.SystemEntryInfo"/> items which do not match the specified search masks.
            </summary>
            <param name="pathRoot">Root path in which to search for non-matches.</param>
            <param name="entry">Top-level entry containing sub-entries to mask.</param>
            <param name="masks">Masks used to filter sub-entries.</param>
            <returns>Non-matching <see cref="T:Inedo.BuildMaster.Files.SystemEntryInfo"/> items.</returns>
            <remarks>
            For a description of file masking, see <see cref="T:Inedo.BuildMaster.Util.Files.Comparison"/>.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.Comparison.GetMatches(System.String,System.String[],System.String[])">
            <summary>
            Returns an array of items which match the specified search masks.
            </summary>
            <param name="pathRoot">Root path in which to search for matches.</param>
            <param name="paths">Sub-entries to mask.</param>
            <param name="masks">Masks used to filter sub-entries.</param>
            <returns>Matching items.</returns>
            <remarks>
            For a description of file masking, see <see cref="T:Inedo.BuildMaster.Util.Files.Comparison"/>.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.Comparison.GetNonMatches(System.String,System.String[],System.String[])">
            <summary>
            Returns an array of items which do not match the specified search masks.
            </summary>
            <param name="pathRoot">Root path in which to search for non-matches.</param>
            <param name="paths">Sub-entries to mask.</param>
            <param name="masks">Masks used to filter sub-entries.</param>
            <returns>Non-matching items.</returns>
            <remarks>
            For a description of file masking, see <see cref="T:Inedo.BuildMaster.Util.Files.Comparison"/>.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.Comparison.CompareDirectories(Inedo.BuildMaster.Files.DirectoryEntryInfo,Inedo.BuildMaster.Files.DirectoryEntryInfo,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Detects differences between a source and target directory.
            </summary>
            <param name="sourceDirectory">The source directory.</param>
            <param name="targetDirectory">The target directory.</param>
            <param name="filesToCopy">Files present in the source but not in the target.</param>
            <param name="foldersToCopy">Folders present in the source but not in the target.</param>
            <param name="filesToDelete">Files present in the target but not in the source.</param>
            <param name="foldersToDelete">Folders present in the target but not in the source.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.Comparison.CompareDirectories(Inedo.BuildMaster.Files.DirectoryEntryInfo,Inedo.BuildMaster.Files.DirectoryEntryInfo)">
            <summary>
            Detects differences between a source and target directory.
            </summary>
            <param name="sourceDirectory">The source directory.</param>
            <param name="targetDirectory">The target directory.</param>
            <returns>Instance of <see cref="T:Inedo.BuildMaster.Util.Files.Comparison.DirectoryDifferences"/> which contains a report of the differences.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectory"/> is null or <paramref name="targetDirectory"/> is null.</exception>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Files.Comparison.ISystemEntryInfoPair`1">
            <summary>
            Represents a pair of matched file system items.
            </summary>
            <typeparam name="TEntry">Type of the file system entry.</typeparam>
        </member>
        <member name="P:Inedo.BuildMaster.Util.Files.Comparison.ISystemEntryInfoPair`1.Source">
            <summary>
            Gets the source item.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Util.Files.Comparison.ISystemEntryInfoPair`1.Target">
            <summary>
            Gets the target item.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Files.Comparison.DirectoryDifferences">
            <summary>
            Contains a difference report for two directory trees.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.Comparison.DirectoryDifferences.Refine(System.Func{Inedo.BuildMaster.Util.Files.Comparison.ISystemEntryInfoPair{Inedo.BuildMaster.Files.FileEntryInfo},System.Nullable{System.Boolean}})">
            <summary>
            Returns a new <see cref="T:Inedo.BuildMaster.Util.Files.Comparison.DirectoryDifferences"/> instance that has been further refined using a user-defined method.
            </summary>
            <param name="areFilesDifferent">Delegate which is invoked to determine if files are actually different.</param>
            <returns>New <see cref="T:Inedo.BuildMaster.Util.Files.Comparison.DirectoryDifferences"/> instance with refined results.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="areFilesDifferent"/> is null.</exception>
        </member>
        <member name="P:Inedo.BuildMaster.Util.Files.Comparison.DirectoryDifferences.SourceOnly">
            <summary>
            Gets a flattened collection of files and directories that are present only in the source.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Util.Files.Comparison.DirectoryDifferences.TargetOnly">
            <summary>
            Gets a flattened collection of files and directories that are present only in the target.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Util.Files.Comparison.DirectoryDifferences.Identical">
            <summary>
            Gets a flattened collection of files and directories that are the same in the source and the target.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Util.Files.Comparison.DirectoryDifferences.Different">
            <summary>
            Gets a flattened collection of files that are different.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Files.Diff">
            <summary>
            A set of static methods for text file comparison.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Files.Diff.FindDifferences(System.String,System.String)">
            <summary>
            Returns a collection of all of the differences between two strings.
            </summary>
            <param name="text1">The first string.</param>
            <param name="text2">The second string.</param>
            <returns>Collection of all of the differences between the supplied strings.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="text1"/> is null or <paramref name="text2"/> is null.</exception>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Persistence">
            <summary>
            Contains static utility methods for working with BuildMaster's persistence model.
            </summary>
            <seealso cref="T:Inedo.BuildMaster.PersistentAttribute"/>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Persistence.GetPersistentProperties(System.Type,System.Boolean)">
            <summary>
            Inspects the specified type and, optionally, its interfaces, and returns properties with <see cref="T:Inedo.BuildMaster.PersistentAttribute"/>.
            </summary>
            <param name="type">The type to inspect.</param>
            <param name="inspectInterfaces">Value indicating whether to inspect properties on interfaces as well.</param>
            <returns>Enumeration of persistent properties.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Persistence.SerializeToPersistedObjectXml(System.Object)">
            <summary>
            Serializes the specified object by retrieving only properties with the
            Persisted attribute
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Persistence.DeserializeFromPersistedObjectXml(System.String)">
            <summary>
            Des the serialize from persisted object XML.
            </summary>
            <param name="objXml">The obj XML.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Persistence.SerializeToBase64String(System.Object)">
            <summary>
            Returns a string representing the Base-64 Converted output of the
            Binary Formmater
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Persistence.DeserializeFromBase64String(System.String)">
            <summary>
            De-serialize from base64 string.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Persistence.SerializeStringArray(System.String[])">
            <summary>
            Serializes the string array.
            </summary>
            <param name="strings">The strings.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Persistence.DeserializeToStringArray(System.String)">
            <summary>
            De-serialize to string array.
            </summary>
            <param name="serialized">The serialized.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Persistence.CreateDynamicInstance(System.String,System.String)">
            <summary>
            Returns a new instance of a persistable type as a dynamic object.
            </summary>
            <param name="typeName">The type of the persisted object.</param>
            <param name="assemblyName">The assembly containing the type of the persisted object.</param>
            <returns>New instance of the specified type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="typeName"/> is null or empty or <paramref name="assemblyName"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="typeName"/> contains white space.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Persistence.CreateDynamicInstanceFromXml(System.String)">
            <summary>
            Returns a dynamic instance of a persisted object.
            </summary>
            <param name="objectXml">The persisted object XML.</param>
            <returns>Dynamic instance of the persisted object.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="objectXml"/> does not contain valid persisted object XML.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Persistence.CreateInstance(System.String,System.String)">
            <summary>
            Returns a new instance of a persistent object type.
            </summary>
            <param name="assemblyName">Name of the assembly containing the type.</param>
            <param name="typeName">Name of the type.</param>
            <returns>New instance of the specified type.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Persistence.OnCreatePersistentObject(Inedo.BuildMaster.Extensibility.CreatePersistentObjectEventArgs)">
            <summary>
            Raises the <see cref="E:CreatePersistentObject"/> event.
            </summary>
            <param name="e">The <see cref="T:Inedo.BuildMaster.Extensibility.CreatePersistentObjectEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Persistence.OnTranslatePersistentType(Inedo.BuildMaster.Extensibility.TranslatePersistentTypeEventArgs)">
            <summary>
            Raises the <see cref="E:TranslatePersistentType"/> event.
            </summary>
            <param name="e">The <see cref="T:Inedo.BuildMaster.Extensibility.TranslatePersistentTypeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Inedo.BuildMaster.Util.Persistence.CreatePersistentObject">
            <summary>
            Occurs when a persistent object needs to be constructed.
            </summary>
        </member>
        <member name="E:Inedo.BuildMaster.Util.Persistence.TranslatePersistentType">
            <summary>
            Occurs when a persistent object is about to be serialized.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Bool">
            <summary>
            A collection of static <see cref="T:System.Boolean"/> related utility methods.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Bool.ParseN(System.String)">
            <summary>
            Converts the specified string representation of an integer to its <see cref="T:System.Boolean"/> equivalent
            using <see cref="M:System.Boolean.TryParse(System.String,System.Boolean@)"/>. If the string is not a valid bool, null is returned.
            </summary>
            <param name="boolString">String to try to parse.</param>
            <returns>Resulting <see cref="T:System.Boolean"/> value if parsing was successful; otherwise null.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Bool.ParseF(System.String)">
            <summary>
            Converts the specified string representation of an integer to its <see cref="T:System.Boolean"/> equivalent
            using <see cref="M:System.Boolean.TryParse(System.String,System.Boolean@)"/>. If the string is not a valid bool, false is returned.
            </summary>
            <param name="boolString">String to try to parse.</param>
            <returns>Resulting <see cref="T:System.Boolean"/> value if parsing was successful; otherwise false.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Int">
            <summary>
            A collection of static <see cref="T:System.Int32"/> related utility methods.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Int.ParseN(System.String)">
            <summary>
            Converts the specified string representation of an integer to its <see cref="T:System.Int32"/> equivalent
            using <see cref="M:System.Int32.TryParse(System.String,System.Int32@)"/>. If the string is not a valid integer, null is returned.
            </summary>
            <param name="intString">String to try to parse.</param>
            <returns>Resulting <see cref="T:System.Int32"/> value if parsing was successful; otherwise null.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Int.ParseZ(System.String)">
            <summary>
            Converts the specified string representation of an integer to its <see cref="T:System.Int32"/> equivalent
            using <see cref="M:System.Int32.TryParse(System.String,System.Int32@)"/>. If the string is not a valid integer, 0 is returned.
            </summary>
            <param name="intString">String to try to parse.</param>
            <returns>Resulting <see cref="T:System.Int32"/> value if parsing was successful; otherwise 0.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Util.DateTime">
            <summary>
            A collection of static <see cref="T:System.DateTime"/> related utility methods.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.DateTime.ParseN(System.String)">
            <summary>
            Converts the specified string representation of a date and time to its <see cref="T:System.DateTime"/> equivalent
            using <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)"/>; if the string is not a valid date time, null is returned
            </summary>
            <param name="dateTimeString">String to try to parse.</param>
            <returns>Resulting <see cref="T:System.DateTime"/> value if parsing was successful; otherwise null.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.DateTime.RelativeDate(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Calculates the relative time from the specified dates
            </summary>
            <param name="referenceFromDate">The reference <see cref="T:System.DateTime"/> used to calculate relative time. Typically, this is <see cref="P:System.DateTime.Now"/>.</param>
            <param name="toDate">The <see cref="T:System.DateTime"/> with which the reference value will be compared.</param>
            <returns><see cref="T:System.String"/> containing relative time if dates are valid, otherwise an empty string.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Util.TimeSpan">
            <summary>
            A collection of static <see cref="T:System.TimeSpan"/> related utility methods.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.TimeSpan.GetTimeSpanHtml(System.TimeSpan)">
            <summary>
            Returns an HTML string displaying a <see cref="T:System.TimeSpan"/> in a common format.
            </summary>
            <param name="timeSpan"><see cref="T:System.TimeSpan"/> to format as HTML.</param>
            <returns>HTML-formatted <see cref="T:System.TimeSpan"/> as a string.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.TimeSpan.GetTimeSpanHtml(System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Returns an HTML string displaying a time range in a common format.
            </summary>
            <param name="start">Initial (starting) time.</param>
            <param name="end">Ending time; null indicates an unbounded range.</param>
            <returns>HTML-formatted time range.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.TimeSpan.GetTimeSpanText(System.TimeSpan)">
            <summary>
            Returns a string displaying a <see cref="T:System.TimeSpan"/> in a common format.
            </summary>
            <param name="timeSpan"><see cref="T:System.TimeSpan"/> to format as a string.</param>
            <returns><see cref="T:System.TimeSpan"/> formatted as a string.</returns>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Variables">
            <summary>
            Contains methods for working with BuildMaster variables.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Variables.InferScope(Inedo.BuildMaster.Data.Tables.VariableDefinitions_Extended)">
            <summary>
            Returns the inferred scope of a variable using the specified context information.
            </summary>
            <param name="variable">The variable definition.</param>
            <returns>The inferred scope of the variable which will be one of the constants defined in <see cref="T:Domains.VariableScope"/>.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Variables.InferScope(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Returns the inferred scope of a variable using the specified context information.
            </summary>
            <param name="environmentId">The environment ID.</param>
            <param name="serverId">The server ID.</param>
            <param name="applicationGroupId">The application group ID.</param>
            <param name="applicationId">The application ID.</param>
            <param name="deployableId">The deployable ID.</param>
            <param name="releaseNumber">The release number.</param>
            <param name="buildNumber">The build number.</param>
            <param name="executionId">The execution ID.</param>
            <returns>The inferred scope of the variable which will be one of the constants defined in <see cref="T:Domains.VariableScope"/>.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Variables.EnumerateVariables(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Enumerates BuildMaster variables that apply to the specified scope.
            </summary>
            <param name="environmentId">The environment ID.</param>
            <param name="serverId">The server ID.</param>
            <param name="applicationGroupId">The application group ID.</param>
            <param name="applicationId">The application ID.</param>
            <param name="deployableId">The deployable ID.</param>
            <param name="releaseNumber">The release number.</param>
            <param name="buildNumber">The build number.</param>
            <param name="executionId">The execution ID.</param>
            <returns>BuildMaster variables that are accessible from the specified scope.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Variables.CreateStandardContext(Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Returns an instance of the standard variable evaluation context.
            </summary>
            <param name="context">The generic BuildMaster context.</param>
            <param name="variables">Initial variable values. May be null to retrieve automatically.</param>
            <returns>Standard variable evaluation context.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The standard context is currently unavailable.</exception>
            <remarks>
            This method should only be called on the BuildMaster server.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Variables.CreateStandardContext(Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext)">
            <summary>
            Returns an instance of the standard variable evaluation context.
            </summary>
            <param name="context">The generic BuildMaster context.</param>
            <returns>Standard variable evaluation context.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The standard context is currently unavailable.</exception>
            <remarks>
            This method should only be called on the BuildMaster server.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Variables.Evaluate(System.String,Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext,System.String)">
            <summary>
            Evaluates and substitutes all variables and functions in the supplied text and returns the resulting text.
            </summary>
            <param name="text">String containing variables to evaluate.</param>
            <param name="context">Current BuildMaster context for variable evaluation.</param>
            <param name="variableSupportCode">One of the values in <see cref="T:Inedo.BuildMaster.Data.Domains.VariableSupportCodes"/>.</param>
            <returns>Resulting text of evaluated expression.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Variables.Evaluate(System.String,Inedo.BuildMaster.Extensibility.IGenericBuildMasterContext)">
            <summary>
            Evaluates and substitutes all variables and functions in the supplied text and returns the resulting text.
            </summary>
            <param name="text">String containing variables to evaluate.</param>
            <param name="context">Current BuildMaster context for variable evaluation.</param>
            <returns>Resulting text of evaluated expression.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Variables.ApplyVariableReplacementsToPersistentProperties(Inedo.BuildMaster.Extensibility.IExtensible,Inedo.BuildMaster.Extensibility.Variables.IVariableEvaluationContext,System.String)">
            <summary>
            Applies variable replacements to action properties.
            </summary>
            <param name="obj">The extensible class instance.</param>
            <param name="context">The context.</param>
            <param name="variableSupportCode">The variable support code.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Variables.ApplyVariableReplacementsToPersistentProperties(Inedo.BuildMaster.Extensibility.IExtensible,Inedo.BuildMaster.Extensibility.Variables.IVariableEvaluationContext)">
            <summary>
            Applies variable replacements to action properties.
            </summary>
            <param name="obj">The extensible class instance.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Util.Variables.VariableInfo">
            <summary>
            Represents a BuildMaster variable.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Variables.VariableInfo.#ctor(Inedo.BuildMaster.Data.Tables.VariableDeclarations)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Util.Variables.VariableInfo"/> class.
            </summary>
            <param name="declaration">The variable declaration.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Variables.VariableInfo.#ctor(Inedo.BuildMaster.Data.Tables.VariableDeclarations,Inedo.BuildMaster.Data.Tables.VariableDefinitions_Extended)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Util.Variables.VariableInfo"/> class.
            </summary>
            <param name="declaration">The variable declaration.</param>
            <param name="definition">The variable definition.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Util.Variables.VariableInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Util.Variables.VariableInfo.Declaration">
            <summary>
            Gets the variable declaration.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Util.Variables.VariableInfo.Definition">
            <summary>
            Gets the variable definition.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Util.Variables.VariableInfo.Name">
            <summary>
            Gets the name of the variable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Util.Variables.VariableInfo.Value">
            <summary>
            Gets the value of the variable.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Util.ExtensionConfigurers">
            <summary>
            Contains utility methods for working with extension configurers.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Util.ExtensionConfigurers.GetExtensionConfigurer(Inedo.BuildMaster.Extensibility.IExtensible)">
            <summary>
            Returns the configurer for the extension of the specified component.
            </summary>
            <returns>Configurer for the component extension if one is available; otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="component"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Util.ExtensionConfigurers.GetExtensionConfigurer(System.Int32)">
            <summary>
            Returns the configurer with the specified configurer ID.
            </summary>
            <returns>Configurer with the ID specified in <paramref name="extensionConfigurerId"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="extensionConfigurerId"/> is not the ID of a valid configuration profile.</exception>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.BuildMasterAssemblyAttribute">
            <summary>
            Marks an assembly as a BuildMaster Extension assembly.
            </summary>
            <remarks>
            This attribute is required for all BuildMaster Extensions.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.BuildMasterAssemblyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.BuildMasterAssemblyAttribute"/> class.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Files.DirectoryEntryInfo">
            <summary>
            Represents a directory in a file system.
            </summary>
            <remarks>
            This class is immutable. For a modifiable version
            that can be used to build directory trees, see <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryBuilder"/>.
            </remarks>
            <seealso cref="T:Inedo.BuildMaster.Files.DirectoryEntryBuilder"/>
        </member>
        <member name="T:Inedo.BuildMaster.Files.SystemEntryInfo">
            <summary>
            Represents an entry in a file system.
            </summary>
            <remarks>
            This class may represent anything with a name and a path, but is typically
            a file or directory on a disk.
            </remarks>
            <seealso cref="T:Inedo.BuildMaster.Files.FileEntryInfo"/>
            <seealso cref="T:Inedo.BuildMaster.Files.DirectoryEntryInfo"/>
        </member>
        <member name="M:Inedo.BuildMaster.Files.SystemEntryInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Files.SystemEntryInfo"/> class.
            </summary>
            <param name="name">The name of the entry.</param>
            <param name="path">The path of the entry.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Files.SystemEntryInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Files.SystemEntryInfo"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Files.SystemEntryInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.SystemEntryInfo.System#IComparable{Inedo#BuildMaster#Files#SystemEntryInfo}#CompareTo(Inedo.BuildMaster.Files.SystemEntryInfo)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.SystemEntryInfo.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether
            the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.SystemEntryInfo.Equals(Inedo.BuildMaster.Files.SystemEntryInfo)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.SystemEntryInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.SystemEntryInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.SystemEntryInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Files.SystemEntryInfo.Name">
            <summary>
            Gets the name of the entry.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Files.SystemEntryInfo.Path">
            <summary>
            Gets the path of the entry.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryInfo"/> class.
            </summary>
            <param name="name">The name of the directory.</param>
            <param name="path">The path of the directory.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryInfo.#ctor(System.String,System.String,Inedo.BuildMaster.Files.DirectoryEntryInfo[],Inedo.BuildMaster.Files.FileEntryInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryInfo"/> class.
            </summary>
            <param name="name">The name of the directory.</param>
            <param name="path">The path of the directory.</param>
            <param name="subdirs">The subdirectories inside the directory.</param>
            <param name="files">The files inside the directory.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryInfo.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Inedo.BuildMaster.Files.DirectoryEntryInfo},System.Collections.Generic.IEnumerable{Inedo.BuildMaster.Files.FileEntryInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryInfo"/> class.
            </summary>
            <param name="name">The name of the directory.</param>
            <param name="path">The path of the directory.</param>
            <param name="subdirectories">The subdirectories inside the directory.</param>
            <param name="files">The files inside the directory.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryInfo.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Inedo.BuildMaster.Files.SystemEntryInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryInfo"/> class.
            </summary>
            <param name="name">The name of the directory.</param>
            <param name="path">The path of the directory.</param>
            <param name="items">The files and subdirectories inside the directory.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryInfo"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryInfo.Flatten">
            <summary>
            Returns a flattened collection of this directory entry and all directories below it.
            </summary>
            <returns>Flattened collection of directory entries.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryInfo.FlattenWithFiles">
            <summary>
            Returns a flattened collection of this directory entry, all directories below it, and all files in all directories.
            </summary>
            <returns>Flattened collection of directory and file entries.</returns>
            <remarks>
            Files and subdirectory listings on returned <see cref="T:Inedo.BuildMaster.Files.DirectoryEntryInfo"/> instances are not included.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Files.DirectoryEntryInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Files.DirectoryEntryInfo.SubDirectories">
            <summary>
            Gets the subdirectories contained within the directory.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Files.DirectoryEntryInfo.Files">
            <summary>
            Gets the files contained within the directory.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Files.ExtendedFileEntryInfo">
            <summary>
            Represents a file with extended information.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Files.FileEntryInfo">
            <summary>
            Represents a file in a file system.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Files.FileEntryInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Files.FileEntryInfo"/> class.
            </summary>
            <param name="name">The name of the file.</param>
            <param name="path">The path of the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null or empty or <paramref name="path"/> is null or empty.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Files.FileEntryInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Files.FileEntryInfo"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Files.IExtendedFileEntry">
            <summary>
            Represents a <see cref="T:Inedo.BuildMaster.Files.FileEntryInfo"/> with extended information.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Files.IExtendedFileEntry.Size">
            <summary>
            Gets the size of the file in bytes.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Files.IExtendedFileEntry.LastModifiedDate">
            <summary>
            Gets the date (UTC) the file was last modified.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Files.ExtendedFileEntryInfo.#ctor(System.String,System.String,System.Int64,System.DateTime,System.IO.FileAttributes)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Files.ExtendedFileEntryInfo"/> class.
            </summary>
            <param name="name">The name of the file.</param>
            <param name="path">The path of the file.</param>
            <param name="size">The size of the file.</param>
            <param name="lastModified">The last modified date (UTC) of the file.</param>
            <param name="fileAttributes">The attributes of the file.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Files.ExtendedFileEntryInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Files.ExtendedFileEntryInfo"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Files.ExtendedFileEntryInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Files.ExtendedFileEntryInfo.Size">
            <summary>
            Gets the size of the file in bytes.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Files.ExtendedFileEntryInfo.LastModifiedDate">
            <summary>
            Gets the date (UTC) the file was last modified.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Files.ExtendedFileEntryInfo.Attributes">
            <summary>
            Gets the attributes of the file.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.PersistentAttribute">
            <summary>
            Marks a property as persistent. A persistent property is stored in BuildMaster's
            database as part of the object's configuration. Persistent properties are also
            serialized to remote agents prior to execution.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.PersistentAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.PersistentAttribute"/> class.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.PersistentAttribute.CustomSerializer">
            <summary>
            Gets or sets the type of custom serializer to use for the property.
            </summary>
            <remarks>
            This type should implement <see cref="T:Inedo.BuildMaster.Extensibility.ICustomPersistentSerializer"/>.
            </remarks>
        </member>
        <member name="P:Inedo.BuildMaster.PersistentAttribute.CustomVariableReplacer">
            <summary>
            Gets or sets the type of custom variable replacer to use for the property.
            </summary>
            <remarks>
            This type should implement <see cref="T:Inedo.BuildMaster.Extensibility.ICustomVariableReplacer"/>.
            </remarks>
        </member>
        <member name="P:Inedo.BuildMaster.PersistentAttribute.Encrypted">
            <summary>
            Gets or sets a value indicating whether the property value should be protected
            using DPAPI before being persisted in the database.
            </summary>
            <remarks>
            This is only applicable to string properties.
            </remarks>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.NotAvailableException">
            <summary>
            Exception thrown when a provider is not available.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.NotAvailableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.NotAvailableException"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.NotAvailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.NotAvailableException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.NotAvailableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.NotAvailableException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.NotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.NotAvailableException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.ConnectionException">
            <summary>
            Exception thrown when a provider cannot connect to its source.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ConnectionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.ConnectionException"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ConnectionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.ConnectionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.ConnectionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.ConnectionException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.ProviderPropertiesAttribute">
            <summary>
            Describes a provider to the user.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.ProviderPropertiesAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.ProviderPropertiesAttribute"/> class.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="desc">The description of the provider.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.ProviderPropertiesAttribute.RequiresTransparentProxy">
            <summary>
            Gets or sets a value indicating whether the provider should be transparently proxied.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.Database.ChangeScript">
            <summary>
            Represents a change script that has been executed against a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.Database.DatabaseProviderBase"/>.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.Database.ChangeScript.#ctor(System.Int64,System.Int32,System.String,System.DateTime,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.Database.ChangeScript"/> class.
            </summary>
            <param name="numericReleaseNumber">The numeric release number.</param>
            <param name="scriptId">The script ID.</param>
            <param name="name">The script name.</param>
            <param name="executionDate">The execution date.</param>
            <param name="successfullyExecuted">Value indicating whether the script was successfully executed.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.Database.ChangeScript.NumericReleaseNumber">
            <summary>
            Gets the numeric release number.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.Database.ChangeScript.ScriptId">
            <summary>
            Gets the script's ID.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.Database.ChangeScript.Name">
            <summary>
            Gets the script name.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.Database.ChangeScript.ExecutionDate">
            <summary>
            Gets the date and time the script was executed.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.Database.ChangeScript.SuccessfullyExecuted">
            <summary>
            Gets a value indicating whether the script was executed successfully.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.Database.DatabaseProviderBase">
            <summary>
            Represents a provider that can be used to manage database change operations.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.Database.DatabaseProviderBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.Database.DatabaseProviderBase"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.Database.DatabaseProviderBase.ExecuteQueries(System.String[])">
            <summary>
            When implemented by a derived class, runs each query in the provided array.
            </summary>
            <param name="queries">An array of query text.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.Database.DatabaseProviderBase.ExecuteQuery(System.String)">
            <summary>
            When implemented by a derived class, runs the specified query.
            </summary>
            <param name="query">The database query to execute.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.Database.DatabaseProviderBase.OpenConnection">
            <summary>
            May be called to explicitly open a connection that all subsequent queries will use.
            </summary>
            <remarks>
            This is a performance optimization only. Providers do not have to implement this
            method, but calling it on providers that do not support sharing a connection
            will not fail. Regardless, when the queries are completed, <see cref="M:Inedo.BuildMaster.Extensibility.Providers.Database.DatabaseProviderBase.CloseConnection"/>
            should be called explicitly.
            </remarks>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.Database.DatabaseProviderBase.CloseConnection">
            <summary>
            May be called to explicitly close a connection opened with <see cref="M:Inedo.BuildMaster.Extensibility.Providers.Database.DatabaseProviderBase.OpenConnection"/>.
            </summary>
            <remarks>
            This is a performance optimization only. See <see cref="M:Inedo.BuildMaster.Extensibility.Providers.Database.DatabaseProviderBase.OpenConnection"/>.
            </remarks>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.Database.DatabaseProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string required to connect to the database.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerCategory">
            <summary>
            Represents a categorization of issues in an issue tracking system.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerCategory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerCategory"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerCategory.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerCategory"/> class.
            </summary>
            <param name="categoryId">The category ID.</param>
            <param name="categoryName">The friendly name of the category.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerCategory.#ctor(System.String,System.String,Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerCategory[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerCategory"/> class.
            </summary>
            <param name="categoryId">The category ID.</param>
            <param name="categoryName">The friendly name of the category.</param>
            <param name="subcategories">Categories contained within the category; may be null.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerCategory.CategoryId">
            <summary>
            Gets a string that uniquely identifies the category.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerCategory.CategoryName">
            <summary>
            Gets a string that is displayed to the user as the category name.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerCategory.Subcategories">
            <summary>
            Gets subcategories that are part of this category.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.ICategorizedIssue">
            <summary>
            Indicates that an issue is in one or more hierarchical category.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.ICategorizedIssue.Categories">
            <summary>
            Gets the hierarchical list of categories that an issue is contained in.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.ICategoryFilterable">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackingProviderBase"/> can filter issues by category.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.ICategoryFilterable.GetCategories">
            <summary>
            Returns an array of all appropriate categories defined within the provider.
            </summary>
            <remarks>
            The nesting level (i.e. <see cref="P:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerCategory.Subcategories"/>) can never be less than
            the length of <see cref="P:CategoryTypeNames"/>.
            </remarks>
            <returns>Categories defined within the provider.</returns>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.ICategoryFilterable.CategoryIdFilter">
            <summary>
            Gets or sets an array of Category Id's that correspond to the index of the <see cref="P:CategoryTypeNames"/> property.
            </summary>
            <remarks>
            The length of this array must always be less than or equal the length of the <see cref="P:CategoryTypeNames"/> property.
            </remarks>
            <example>
            For example, if <see cref="P:CategoryTypeNames"/> returns "Project", to filter on ProjectID 12, this would return would be:
                <code>new string[] { "12" };</code>
            </example>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.ICategoryFilterable.CategoryTypeNames">
            <summary>
            Gets an inheritor-defined array of category types.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IReleaseNumberCloser">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackingProviderBase"/> can close a release
            number at the source.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IReleaseNumberCloser.CloseReleaseNumber(System.String)">
            <summary>
            Closes the specified release number at the source.
            </summary>
            <param name="releaseNumber">Release number to close.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IReleaseNumberCreator">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackingProviderBase"/> can create
            new release numbers at the source.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IReleaseNumberCreator.CreateReleaseNumber(System.String)">
            <summary>
            Creates the specified release number at the source.
            </summary>
            <param name="releaseNumber">Release number to create.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerIssue">
            <summary>
            Base class for an issue in an issue tracker.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerIssue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerIssue"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerIssue.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerIssue"/> class.
            </summary>
            <param name="issueId">The issue ID.</param>
            <param name="issueStatus">The issue status.</param>
            <param name="issueTitle">The issue title.</param>
            <param name="issueDescription">The issue description.</param>
            <param name="releaseNumber">The release number of the issue.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerIssue.IssueId">
            <summary>
            Gets or sets the issue's unique identifier.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerIssue.IssueStatus">
            <summary>
            Gets or sets the issue's status.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerIssue.IssueTitle">
            <summary>
            Gets or sets the issue's title.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerIssue.IssueDescription">
            <summary>
            Gets or sets the issue's description.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerIssue.IssueDescriptionRenderMode">
            <summary>
            Gets the issue description render mode.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerIssue.ReleaseNumber">
            <summary>
            Gets or sets the issue's release number.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerIssue.RenderMode">
            <summary>
            The modes that an issue description may be rendered.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerIssue.RenderMode.Text">
            <summary>
            Renders the description as plain text.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerIssue.RenderMode.Html">
            <summary>
            Renders the description as HTML.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackerIssue.RenderMode.Markdown">
            <summary>
            Renders the description after transforming the input using Markdown.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IUpdatingProvider">
            <summary>
            Indicates that a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IssueTrackingProviderBase"/> can update issues.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IUpdatingProvider.AppendIssueDescription(System.String,System.String)">
            <summary>
            Appends the specified text to the specified issue.
            </summary>
            <param name="issueId">Id of the issue.</param>
            <param name="textToAppend">Text to append to the issue description.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IUpdatingProvider.ChangeIssueStatus(System.String,System.String)">
            <summary>
            Changes the specified issue's status.
            </summary>
            <param name="issueId">ID of the issue.</param>
            <param name="newStatus">New status of the issue.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IUpdatingProvider.CloseIssue(System.String)">
            <summary>
            Closes the specified issue.
            </summary>
            <param name="issueId">ID of the issue.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IUpdatingProvider.CanAppendIssueDescriptions">
            <summary>
            Gets a value indicating whether an issue's description can be appended to.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IUpdatingProvider.CanChangeIssueStatuses">
            <summary>
            Gets a value indicating whether an issue's status can be changed.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Providers.IssueTracking.IUpdatingProvider.CanCloseIssues">
            <summary>
            Gets a value indicating whether an issue can be closed.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.RequiresInterfaceAttribute">
            <summary>
            Indicates that a class (generally, an <see cref="T:Inedo.BuildMaster.Extensibility.Actions.ActionBase"/>) requires that a class it
            consumes (generally a <see cref="T:Inedo.BuildMaster.Extensibility.Providers.ProviderBase"/>) must implement an interface.
            </summary>
            <remarks>
            This attribute is only relevant for provider-based actions.
            </remarks>
            <seealso cref="T:Inedo.BuildMaster.Extensibility.Actions.ProviderBasedAction`1"/>
        </member>
        <member name="M:Inedo.BuildMaster.RequiresInterfaceAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.RequiresInterfaceAttribute"/> class.
            </summary>
            <param name="requiredInterface">The type of the interface which must be implemented by the related <see cref="T:Inedo.BuildMaster.Extensibility.Providers.ProviderBase"/>.</param>
        </member>
        <member name="P:Inedo.BuildMaster.RequiresInterfaceAttribute.RequiredInterface">
            <summary>
            Gets the type of the interface which must be implemented by the related <see cref="T:Inedo.BuildMaster.Extensibility.Providers.ProviderBase"/>.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Variables.VariablePropertiesAttribute">
            <summary>
            Describes a <see cref="T:Inedo.BuildMaster.Extensibility.Variables.VariableBase"/> to the user.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.VariablePropertiesAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Variables.VariablePropertiesAttribute"/> class.
            </summary>
            <param name="name">The friendly name of the variable.</param>
            <param name="desc">The description of the variable.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Extensibility.Variables.VariableBase">
            <summary>
            Base class for all variables.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Extensibility.Variables.VariableBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Extensibility.Variables.VariableBase"/> class.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Extensibility.Variables.VariableBase.Value">
            <summary>
            Gets or sets the value of the variable.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Web.BuildMasterSmtpClient">
            <summary>
            A simple wrapper around SmtpClient that defaults the SMTP settings to the values specified in configuration.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Web.BuildMasterSmtpClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Web.BuildMasterSmtpClient"/> class using the default configuration settings.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Web.BuildMasterSmtpClient.#ctor(System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Web.BuildMasterSmtpClient"/> class using the specified SMTP settings.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="enableSSL">Whether to enable transmission over SSL.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Web.BuildMasterSmtpClient.CreateMailMessage(System.String)">
            <summary>
            Creates a mail message with the configured From address to the specified recipient.
            </summary>
            <param name="toEmailAddress">To email address.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Web.BuildMasterSmtpClient.CreateMailMessage(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a mail message with the configured From address to the specified recipients.
            </summary>
            <param name="toEmailAddresses">To email addresses of the recipients.</param>
        </member>
        <member name="T:Inedo.BuildMaster.Web.EditorFieldAttribute">
            <summary>
            Indicates that a property should have special user-defined behavior
            in generic action editors.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Web.EditorFieldAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Web.EditorFieldAttribute"/> class.
            </summary>
            <param name="label">The label to display for this field.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Web.EditorFieldAttribute.Label">
            <summary>
            Gets the label text that will be displayed instead of the property name.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Web.EditorFieldAttribute.HelpText">
            <summary>
            Gets or sets the optional help text displayed next to the label.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Web.EditorFieldAttribute.Required">
            <summary>
            Gets or sets a value indicating whether the property must be set.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Web.EditorFieldAttribute.EditMode">
            <summary>
            Gets or sets the edit mode.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Web.FieldEditMode">
            <summary>
            Indicates how a field is to be edited.
            </summary>
            <remarks>
            This is only applicable to string-based fields
            </remarks>
        </member>
        <member name="F:Inedo.BuildMaster.Web.FieldEditMode.Singleline">
            <summary>
            Display a single line textbox.
            </summary>
            <remarks>Default behavior</remarks>
        </member>
        <member name="F:Inedo.BuildMaster.Web.FieldEditMode.Multiline">
            <summary>
            Display as a multiline (3 row) textarea.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Web.FieldEditMode.Password">
            <summary>
            Display as a password text box.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Web.CustomSetterAttribute">
            <summary>
            Indicates that a type has a custom value setter control.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Web.CustomSetterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Web.CustomSetterAttribute"/> class.
            </summary>
            <param name="controlType">Type of the setter control.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Web.CustomSetterAttribute.ControlType">
            <summary>
            Gets the type of the setter control.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Web.CustomEditorAttribute">
            <summary>
            Indicates that a type has a custom editor.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Web.CustomEditorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Web.CustomEditorAttribute"/> class.
            </summary>
            <param name="controlType">Type of the control.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Web.CustomEditorAttribute.ControlType">
            <summary>
            Gets the type of the user control.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Web.DisplayRemoteActionPropertiesAttribute">
            <summary>
            Provides addtional control over the behavior of the default action editor
            for remote actions.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Web.DisplayRemoteActionPropertiesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Web.DisplayRemoteActionPropertiesAttribute"/> class.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Web.DisplayRemoteActionPropertiesAttribute.DisplaySourceDirectory">
            <summary>
            Gets or sets a value indicating whether to display a source directory editor
            on the default action editor.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Web.DisplayRemoteActionPropertiesAttribute.DisplayTargetDirectory">
            <summary>
            Gets or sets a value indicating whether to display a target directory editor
            on the default action editor.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Web.ProxiedException">
            <summary>
            Wraps an exception of another type.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Web.ProxiedException.OriginalExceptionType">
            <summary>
            Gets the original exception type.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Web.Security.ForceManualTaskValidationAttribute">
            <summary>
            Indicates that a method implements its own task validation.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.ForceManualTaskValidationAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Web.Security.ForceManualTaskValidationAttribute"/> class.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Web.Security.ScopedTask">
            <summary>
            Represents a task with a scope.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.ScopedTask.#ctor(Inedo.BuildMaster.Web.Security.SecuredTask,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Web.Security.ScopedTask"/> class.
            </summary>
            <param name="securedTask">The task.</param>
            <param name="applicationGroupId">The application group scope.</param>
            <param name="applicationId">The application scope.</param>
            <param name="environmentId">The environment scope.</param>
            <param name="serverId">The server scope.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.ScopedTask.GetHashCode">
            <summary>
            Returns a hash code for the instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.ScopedTask.Equals(Inedo.BuildMaster.Web.Security.ScopedTask)">
            <summary>
            Returns a value indicating whether this instances is equivalent to another.
            </summary>
            <param name="other">The other instance.</param>
            <returns>True if instances are equal; otherwise false.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.ScopedTask.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instances is equivalent to another.
            </summary>
            <param name="obj">The other instance.</param>
            <returns>True if instances are equal; otherwise false.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.ScopedTask.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>String representation of this instance.</returns>
        </member>
        <member name="P:Inedo.BuildMaster.Web.Security.ScopedTask.Task">
            <summary>
            Gets the task.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Web.Security.ScopedTask.ApplicationGroupId">
            <summary>
            Gets the application group scope if applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Web.Security.ScopedTask.ApplicationId">
            <summary>
            Gets the application scope if applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Web.Security.ScopedTask.EnvironmentId">
            <summary>
            Gets the environment scope if applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Web.Security.ScopedTask.ServerId">
            <summary>
            Gets the server scope if applicable.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Web.Security.SecuredTask">
            <summary>
            List of tasks users can perform.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Web.Security.SecuredTaskDeniedException">
            <summary>
            The exception that is thrown when a user cannot perform a task.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.SecuredTaskDeniedException.#ctor(Inedo.BuildMaster.Web.Security.SecuredTask,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Web.Security.SecuredTaskDeniedException"/> class.
            </summary>
            <param name="task">The task that cannot be performed.</param>
            <param name="userName">The name of the user which was denied the task.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.SecuredTaskDeniedException.#ctor(Inedo.BuildMaster.Web.Security.SecuredTask,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Web.Security.SecuredTaskDeniedException"/> class.
            </summary>
            <param name="task">The task that cannot be performed.</param>
            <param name="userName">The name of the user which was denied the task.</param>
            <param name="privilegeId">The ID of the deny privilege if applicable.</param>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.SecuredTaskDeniedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Web.Security.SecuredTaskDeniedException.SecuredTask">
            <summary>
            Gets the task which the user tried to perform.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Web.Security.SecuredTaskDeniedException.UserName">
            <summary>
            Gets the name of the user which tried to perform the task.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Web.Security.SecuredTaskDeniedException.DeniedPrivilegeId">
            <summary>
            Gets the ID of the deny privilege if applicable.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Web.Security.SecuredTaskDeniedException.Message">
            <summary>
            Gets a friendly description of the error.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Web.Security.SecuredTaskRequiredAttribute">
            <summary>
            Marks a page as requiring a specific secured task.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.SecuredTaskRequiredAttribute.#ctor(Inedo.BuildMaster.Web.Security.SecuredTask)">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Web.Security.SecuredTaskRequiredAttribute"/> class.
            </summary>
            <param name="task">The required task.</param>
        </member>
        <member name="P:Inedo.BuildMaster.Web.Security.SecuredTaskRequiredAttribute.Task">
            <summary>
            Gets the required task.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Web.Security.TaskChecker">
            <summary>
            Performs evaluation of privileges for a user directory.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.TaskChecker.Create">
            <summary>
            Returns a new <see cref="T:Inedo.BuildMaster.Web.Security.TaskChecker"/> instance using the current directory provider.
            </summary>
            <returns>New instance of a <see cref="T:Inedo.BuildMaster.Web.Security.TaskChecker"/>.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.TaskChecker.Create(System.Int32)">
            <summary>
            Returns a new <see cref="T:Inedo.BuildMaster.Web.Security.TaskChecker"/> instance.
            </summary>
            <param name="directoryProviderId">The ID of the directory provider to use.</param>
            <returns>New instance of a <see cref="T:Inedo.BuildMaster.Web.Security.TaskChecker"/>.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.TaskChecker.ValidatePrivileges(Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo,Inedo.BuildMaster.Web.Security.SecuredTask,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Verifies that the specified user can perform the specified task.
            </summary>
            <param name="user">The user to evaluate privileges for.</param>
            <param name="task">The task to test.</param>
            <param name="applicationGroupId">The current application group ID in scope.</param>
            <param name="applicationId">The current application ID in scope.</param>
            <param name="environmentId">The current environment ID in scope.</param>
            <param name="serverId">The current server ID in scope.</param>
            <exception cref="T:Inedo.BuildMaster.Web.Security.SecuredTaskDeniedException">The user cannot perform the specified task.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="user"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.TaskChecker.IsAuthorizedForTask(Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo,Inedo.BuildMaster.Web.Security.SecuredTask,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Returns a value indicating whether the specified user is authorized for the specified task.
            </summary>
            <param name="user">The user to evaluate privileges for.</param>
            <param name="task">The task to test.</param>
            <param name="applicationGroupId">The current application group ID in scope.</param>
            <param name="applicationId">The current application ID in scope.</param>
            <param name="environmentId">The current environment ID in scope.</param>
            <param name="serverId">The current server ID in scope.</param>
            <returns>True if the user can perform the specified task; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="user"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.TaskChecker.FindPrivilege(Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo,Inedo.BuildMaster.Web.Security.SecuredTask,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Returns the ID of the evaluated privilege for the specified user and task.
            </summary>
            <param name="user">The user to evaluate privileges for.</param>
            <param name="task">The task to test.</param>
            <param name="applicationGroupId">The current application group ID in scope.</param>
            <param name="applicationId">The current application ID in scope.</param>
            <param name="environmentId">The current environment ID in scope.</param>
            <param name="serverId">The current server ID in scope.</param>
            <returns>A positive number indicates that the privilege was explicitly granted; a negative number indicates that the privilege was explicitly denied; zero indicates no privileges.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="user"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.TaskChecker.GetEffectivePrivileges(Inedo.BuildMaster.Extensibility.Providers.UserDirectory.UserInfo,System.Int32,System.Int32)">
            <summary>
            Returns a sequence of tasks which the user is allowed to perform in the specified context.
            </summary>
            <param name="user">The user to evaluate privileges for.</param>
            <param name="applicationId">The current application ID in scope.</param>
            <param name="environmentId">The current environment ID in scope.</param>
            <returns>Sequence of permitted tasks.</returns>
            <remarks>
            This method is for informational purposes only and is not optimized for performance.
            </remarks>
        </member>
        <member name="T:Inedo.BuildMaster.Web.Security.WebUserContext">
            <summary>
            Represents the current user context.
            </summary>
        </member>
        <member name="F:Inedo.BuildMaster.Web.Security.WebUserContext.Current">
            <summary>
            Use the static properties and methods on <see cref="T:Inedo.BuildMaster.Web.Security.WebUserContext"/> instead.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.WebUserContext.ValidatePrivileges(Inedo.BuildMaster.Web.Security.SecuredTask,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Verifies that the current user can perform the specified task.
            </summary>
            <param name="task">The task to test.</param>
            <param name="applicationGroupId">The current application group ID in scope.</param>
            <param name="applicationId">The current application ID in scope.</param>
            <param name="environmentId">The current environment ID in scope.</param>
            <param name="serverId">The current server ID in scope.</param>
            <exception cref="T:Inedo.BuildMaster.Web.Security.SecuredTaskDeniedException">The user cannot perform the specified task.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.WebUserContext.ValidatePrivileges(Inedo.BuildMaster.Web.Security.ScopedTask)">
            <summary>
            Verifies that the current user can perform the specified task.
            </summary>
            <param name="scopedTask">The task to test.</param>
            <exception cref="T:Inedo.BuildMaster.Web.Security.SecuredTaskDeniedException">The user cannot perform the specified task.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.WebUserContext.CanPerformTask(Inedo.BuildMaster.Web.Security.ScopedTask)">
            <summary>
            Returns a value indicating whether the current user is allowed to perform the specified task.
            </summary>
            <param name="scopedTask">The task to check.</param>
            <returns>True if the current user can perform the task; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scopedTask"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.WebUserContext.CanPerformTask(Inedo.BuildMaster.Web.Security.SecuredTask,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Returns a value indicating whether the current user is allowed to perform the specified task.
            </summary>
            <param name="task">The task to check.</param>
            <param name="applicationGroupId">The application group in context if applicable.</param>
            <param name="applicationId">The application in context if applicable.</param>
            <param name="environmentId">The environment in context if applicable.</param>
            <param name="serverId">The server in context if applicable.</param>
            <returns>True if the current user can perform the task; otherwise false.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.WebUserContext.CanPerformTasks(Inedo.BuildMaster.Web.Security.SecuredTask[])">
            <summary>
            Returns a value indicating whether the current user is allowed to perform the specified tasks.
            </summary>
            <param name="tasks">The tasks to check.</param>
            <returns>Array of values whose indexes correspond to the supplied tasks.</returns>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.WebUserContext.CanPerformTasks(System.Collections.Generic.IEnumerable{Inedo.BuildMaster.Web.Security.ScopedTask})">
            <summary>
            Returns a value indicating whether the current user is allowed to perform the specified tasks.
            </summary>
            <param name="scopedTasks">The tasks to check.</param>
            <returns>Array of values whose indexes correspond to the supplied tasks.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scopedTasks"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.WebUserContext.CacheTaskPermissions(System.Collections.Generic.IEnumerable{Inedo.BuildMaster.Web.Security.ScopedTask})">
            <summary>
            Adds the specified task checks to the request cache if necessary.
            </summary>
            <param name="scopedTasks">The tasks to check.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="scopedTasks"/> is null.</exception>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.WebUserContext.InvalidateCache">
            <summary>
            Invalidates the privilege cache.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Web.Security.WebUserContext.IsAvailable">
            <summary>
            Gets a value indicating whether a user is currently in context.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Web.Security.WebUserContext.UserInfo">
            <summary>
            Gets information about the user currently in context.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Web.Security.WebUserContext.Directory">
            <summary>
            Gets the directory provider currently in context.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Web.Security.WebUserContext.WebUserContextWrapper">
            <summary>
            This class is for legacy pages only and should not be used by new code.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.WebUserContext.WebUserContextWrapper.IsAuthorizedForTask(Inedo.BuildMaster.Web.Security.SecuredTask)">
            <summary>
            Use CanPerformTask instead.
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.WebUserContext.WebUserContextWrapper.IsAuthorizedForTask(Inedo.BuildMaster.Web.Security.SecuredTask,System.Int32)">
            <summary>
            Use CanPerformTask instead.
            </summary>
            <param name="task"></param>
            <param name="environmentId"></param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.WebUserContext.WebUserContextWrapper.IsAuthorizedForTaskInApp(Inedo.BuildMaster.Web.Security.SecuredTask,System.Int32)">
            <summary>
            Use CanPerformTask instead.
            </summary>
            <param name="task"></param>
            <param name="applicationId"></param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.WebUserContext.WebUserContextWrapper.IsAuthorizedForTask(Inedo.BuildMaster.Web.Security.SecuredTask,System.Int32,System.Int32)">
            <summary>
            Use CanPerformTask instead.
            </summary>
            <param name="task"></param>
            <param name="applicationId"></param>
            <param name="environmentId"></param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.WebUserContext.WebUserContextWrapper.IsAuthorizedForAnyTask(System.Int32,Inedo.BuildMaster.Web.Security.SecuredTask[])">
            <summary>
            Use <see cref="M:Inedo.BuildMaster.Web.Security.WebUserContext.CanPerformTasks(System.Collections.Generic.IEnumerable{Inedo.BuildMaster.Web.Security.ScopedTask})"/> instead.
            </summary>
            <param name="environmentId"></param>
            <param name="tasks"></param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Web.Security.WebUserContext.WebUserContextWrapper.IsAuthorizedForAnySystemTask(Inedo.BuildMaster.Web.Security.SecuredTask[])">
            <summary>
            Use <see cref="M:Inedo.BuildMaster.Web.Security.WebUserContext.CanPerformTasks(Inedo.BuildMaster.Web.Security.SecuredTask[])"/> instead.
            </summary>
            <param name="tasks"></param>
            <returns></returns>
        </member>
        <member name="P:Inedo.BuildMaster.Web.Security.WebUserContext.WebUserContextWrapper.UserInfo">
            <summary>
            Use <see cref="P:Inedo.BuildMaster.Web.Security.WebUserContext.UserInfo"/> instead.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Web.Security.WebUserContext.WebUserContextWrapper.IsAvailable">
            <summary>
            Use <see cref="P:Inedo.BuildMaster.Web.Security.WebUserContext.IsAvailable"/> instead.
            </summary>
        </member>
        <member name="T:Inedo.BuildMaster.Web.SoapExceptionWrapper">
            <summary>
            Contains helper methods to wrap and unwrap <see cref="T:System.Web.Services.Protocols.SoapException"/>
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Web.SoapExceptionWrapper.WrapException(System.Exception)">
            <summary>
            Wraps the exception.
            </summary>
            <param name="ex">The ex.</param>
            <returns></returns>
        </member>
        <member name="M:Inedo.BuildMaster.Web.SoapExceptionWrapper.UnwrapException(System.Exception)">
            <summary>
            Unwraps the exception.
            </summary>
            <param name="ex">The ex.</param>
            <returns></returns>
        </member>
        <member name="T:Inedo.BuildMaster.Web.UnauthorizedClientException">
            <summary>
            Thrown by an agent when a client attempts to use the service
            without authorization.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Web.UnauthorizedClientException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inedo.BuildMaster.Web.UnauthorizedClientException"/> class.
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Web.UnauthorizedClientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Prevents a default instance of the <see cref="T:Inedo.BuildMaster.Web.UnauthorizedClientException"/> class from being created.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
              </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
              </exception>
        </member>
        <member name="P:Inedo.BuildMaster.Web.UnauthorizedClientException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was thrown.
            </summary>
            <returns>
            A string that describes the contents of the call stack, with the most recent method call appearing first.
              </returns>
              
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
              </PermissionSet>
        </member>
        <member name="P:Inedo.BuildMaster.Web.UnauthorizedClientException.Source">
            <summary>
            Gets or sets the name of the application or the object that causes the error.
            </summary>
            <returns>
            The name of the application or the object that causes the error.
              </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Web.UnauthorizedClientException.HelpLink">
            <summary>
            Gets or sets a link to the help file associated with this exception.
            </summary>
            <returns>
            The Uniform Resource Name (URN) or Uniform Resource Locator (URL).
              </returns>
        </member>
        <member name="P:Inedo.BuildMaster.Web.UnauthorizedClientException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
              </returns>
        </member>
        <member name="T:Inedo.BuildMaster.Web.UnwrappableException">
            <summary>
            Represents an exception that could not be de-serialized from <see cref="T:Inedo.BuildMaster.Web.SoapExceptionWrapper"/>
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Web.UnwrappableException.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Inedo.BuildMaster.Web.UnwrappableException.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance with the specified parameters
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Web.UnwrappableException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Web.UnwrappableException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was thrown.
            </summary>
        </member>
        <member name="P:Inedo.BuildMaster.Web.UnwrappableException.Source">
            <summary>
            Gets or sets the name of the application or the object that causes the error.
            </summary>
        </member>
    </members>
</doc>
